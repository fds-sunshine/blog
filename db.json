{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"340499890fcdfc2fcb03e125ef0962f7462fe87c","modified":1648002651942},{"_id":"source/_posts/acwing/quicksort.md","hash":"fc05f2d5ca124faf9b7dfa8ae28ceb4a073cc697","modified":1648109477585},{"_id":"source/_posts/zookeeper/zookeeper入门.md","hash":"df097c82ae0b8edcc8cd1d3f4e2c022c64662a61","modified":1648195782652},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1648002651964},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1648002651965},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1648002651943},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1648002651943},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1648002651943},{"_id":"themes/fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1648002651945},{"_id":"themes/fluid/LICENSE","hash":"694fb3659a4331dd752bd92e4248623bff8617cd","modified":1648002651945},{"_id":"themes/fluid/README.md","hash":"399804e1359046480fe9e1908c26ba49809aaf9b","modified":1648002651945},{"_id":"themes/fluid/README_en.md","hash":"2b47ed68ec888dcc34fa6aad9ce95aeba6744fec","modified":1648002651945},{"_id":"themes/fluid/_config.yml","hash":"34b51572b5086053f1bfdc6deb6a51fdd89133d9","modified":1648114195249},{"_id":"themes/fluid/aa","hash":"d537d9d82e5d05dbfa06f321372eb0b1f72efe0b","modified":1648107696646},{"_id":"themes/fluid/package.json","hash":"40e3a3fea5dedbc09e859a2ea6ce271004a57e87","modified":1648002651953},{"_id":"themes/fluid/languages/de.yml","hash":"288f649c2c2314eb610693b18853ee74f0541e87","modified":1648002651946},{"_id":"themes/fluid/languages/en.yml","hash":"31f2867619a768606166778d4ee51f3d00ac33a0","modified":1648002651946},{"_id":"themes/fluid/languages/eo.yml","hash":"2c1c481d9af116e79fe55a0aa0bdbb143a97f559","modified":1648002651946},{"_id":"themes/fluid/languages/ja.yml","hash":"dc43be11a300893ebef47283c22f2f946ca21260","modified":1648002651946},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"3b92f4428d66c31610f6cde13b82ee723aff00d2","modified":1648088217044},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"de9b7e729d72eee9327671c3d5df0a607c4c3257","modified":1648002651947},{"_id":"themes/fluid/layout/404.ejs","hash":"79a598e43c40d48b23076361720f1e77df466e41","modified":1648002651947},{"_id":"themes/fluid/layout/about.ejs","hash":"5b6de01c82b14834ab1e67f0a803612f5855f064","modified":1648002651952},{"_id":"themes/fluid/layout/archive.ejs","hash":"7a1e19dec37804927f0d331d7e6c80ed03becd61","modified":1648002651952},{"_id":"themes/fluid/layout/category.ejs","hash":"dd2bd15cbd811d6ea973b6e6a17d99e36151e274","modified":1648002651952},{"_id":"themes/fluid/layout/categories.ejs","hash":"e7733779366ff6402615d96d4195f1196fa8351d","modified":1648002651952},{"_id":"themes/fluid/layout/index.ejs","hash":"bd118b6f7bd882a2ff896a1c4bc7bfa1c7694568","modified":1648002651952},{"_id":"themes/fluid/layout/layout.ejs","hash":"a1cea9b8fe0954d5a8d89941404f31ac344a4f5b","modified":1648002651952},{"_id":"themes/fluid/layout/links.ejs","hash":"76807f949aaa20983b89efc9e6bc39108d022ac3","modified":1648002651953},{"_id":"themes/fluid/layout/page.ejs","hash":"f867e69e563b8ad83054714f73d9173ea050d93b","modified":1648002651953},{"_id":"themes/fluid/layout/post.ejs","hash":"edfeb655895027d15334d009324d27a29926cc94","modified":1648002651953},{"_id":"themes/fluid/layout/tag.ejs","hash":"3a9296eb7181e8b3fb0cdc60cbafc815b98d6f51","modified":1648002651953},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1648002651953},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"beb3474d6f65c1e56700ba872c6a0d0836d4168e","modified":1648002651944},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"78ce211415d502c5a4398d786d5c697d34d868b9","modified":1648002651944},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1648002651944},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1648002651944},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1648002651944},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"18381d03518526d7cefd024a0bdd8d9e7c6440f5","modified":1648002651945},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1648002651945},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"780117f8032df3b52169a387658a13cc025a0e13","modified":1648002651947},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"904971bf3419bec46de416c27dceb39a73063f33","modified":1648002651947},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"a137110fe5c4c13eb189dc53fe270c0d390a97e0","modified":1648002651949},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"9af7ff960a421933169162ea1a2cd7e7577b0ed7","modified":1648002651949},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"b7d5b438e2eeb624aecd86f3b321466834deac11","modified":1648002651949},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"2af4653ed3fefdbcb12c16a6d2fa166d14672845","modified":1648002651950},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1648002651950},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"010b8b5ff2d1ae178cfba83a6c95d6345b053617","modified":1648002651951},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"00cdbf4c5e25a7f0c461ef460ae1af28c29e4712","modified":1648002651951},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"bea21f1b5de61badd6c068080315c201fc80bc36","modified":1648002651951},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"a70c26e415a27f07f38b9384e7eb48d1f2b30328","modified":1648002651951},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"76e6bc368cf46d4103ea9514699e10ec0b9a4b56","modified":1648002651951},{"_id":"themes/fluid/scripts/events/index.js","hash":"91defe82d50a317903411f0b260da0f140f43dc4","modified":1648002651954},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1648002651955},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"cb72e5acfba882a6eacd6cae8db3238bb078737a","modified":1648002651955},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1648002651956},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1648002651956},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"a26549407de10b994d1f6e37ba8fecf9dd4622de","modified":1648002651956},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1648002651956},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1648002651956},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"b6ccfffdee010ebd60cd8cc2386c43db076b6ca1","modified":1648002651956},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"9c01393f446c490c56b6b0d482aaa8d97cc8b717","modified":1648002651957},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1648002651957},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"dac0e08eaa3614a6fd9ddbdfb4584094b1bdb30a","modified":1648002651957},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1648002651957},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1648002651957},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1648002651958},{"_id":"themes/fluid/scripts/tags/note.js","hash":"8020acc2c4bb3a2054e3cb349fac7cd10b79a0be","modified":1648002651958},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1648002651958},{"_id":"themes/fluid/scripts/utils/object.js","hash":"d798779ec79a53ce04b8ac79efd5d064981d95bd","modified":1648002651958},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1648002651958},{"_id":"themes/fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1648002651966},{"_id":"themes/fluid/source/css/main.styl","hash":"bf536db598434c36cc0c752196bfde46e584a92e","modified":1648002651966},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1648002651966},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1648002651967},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1648002651967},{"_id":"themes/fluid/source/js/boot.js","hash":"5264c0d2eb73b4948ee6bcb1bd847a924d906088","modified":1648002651967},{"_id":"themes/fluid/source/js/color-schema.js","hash":"719296a8b6e1b76ec682554fb3dbcc75a2a2d78d","modified":1648002651968},{"_id":"themes/fluid/source/js/events.js","hash":"b019f58951cc02c5fd1863e2e05101254bf2896c","modified":1648086935178},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1648002651968},{"_id":"themes/fluid/source/js/leancloud.js","hash":"9115c754794bfd20e84b61f3beb1ec37773b4c0c","modified":1648002651968},{"_id":"themes/fluid/source/js/utils.js","hash":"a2da89bb185fcd9de7a834e862b03548f5efcd04","modified":1648002651969},{"_id":"themes/fluid/source/js/plugins.js","hash":"75b1d3e58fdfc5230608a0f7d116e41c93050cef","modified":1648002651968},{"_id":"themes/fluid/source/js/local-search.js","hash":"90d7eb35aff2994fa173abeed7ce0c91357f5979","modified":1648002651968},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1648002651969},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1648002651947},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1648002651948},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1648002651948},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1648002651948},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1648002651948},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1648002651948},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"93d47bc528bf1a3d0fe950fc21a2da787e1b7dc9","modified":1648002651948},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"d1e86754c9560f7346200b2aa9a7f715a3fac82b","modified":1648002651949},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"bd2b8843094966dbc96c3768b4858c6e241a59a9","modified":1648002651949},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"d81bfb2f594d597f0e176abc09a76f3f58b98c2e","modified":1648002651949},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"d20f54bf2fd5cd274b4b9c5542eafbfec5120838","modified":1648002651950},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"80cdaa9da8770568af5bb06a66829dddf1d683d2","modified":1648002651950},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"fd1f78287c868ccab78b6244b66e3f9b0968c4a8","modified":1648002651950},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1648002651950},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"842da2fc1c99a3fb887b5e36b76625c9a1b3401a","modified":1648002651951},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"c0da20f9adca2761d370cc6dda013ec1ecbb7710","modified":1648002651954},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"13d8466cd4c98367131b5f3d6a30b3d4ce8de26f","modified":1648002651954},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"12a5fcf2e322a7e7f8184f4c3a1c6708308e1b61","modified":1648005759664},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"af80de29f06b4f64c31fe070a2af292876717ee1","modified":1648002651955},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1648002651955},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"3f2dba4959b27466521de97eff692815650c02b7","modified":1648002651955},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1648002651959},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1648002651965},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1648002651959},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"35179cd560f9919376abdcf99e0d23f20e18e84f","modified":1648002651966},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1648002651960},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"86926a80bf6f39a7f47789b1a8f44b5984b4683f","modified":1648002651960},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"0d6d39709999c8e1786ed64c6f5bbdc4acd21813","modified":1648002651962},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"6f2a3b8af2793dd831f661c6db0ccbe0a62ccc48","modified":1648002651963},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"ed0f3aae95edac702ed497f6e8a76b33f39f8c89","modified":1648002651963},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1648002651963},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"67103d8eb96cd94d185c00011b809eecdb88823a","modified":1648002651963},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"0924e35eff2ec84e2d9e4772abccda452d9463ef","modified":1648002651964},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"4123f77c742d94e903f7196350c830cbccf8669a","modified":1648002651964},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"2eaac14a1af09cf6a1ab24201e182ac2aca40385","modified":1648002651964},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"cd81947721c5aecc1cc8d4658599837701ef8af3","modified":1648002651965},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"10fcf4291b6efd5036214b7dde57ed2e3878fc1a","modified":1648002651965},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1648002651965},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"da823846f0896f16b21c7430f047f7222a89cd10","modified":1648002651960},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"bb9cdde191b9b1287ba19414bab862f30be6a8a0","modified":1648002651960},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e77f5c5d5da17a7e6241cca0e1d4e8cd07169c64","modified":1648002651961},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"c398892fba1494dd6fd417415076458ed321d34d","modified":1648002651961},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1648002651961},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"f770c5c3ee89421e9e3f1313ca5bd07a2448f400","modified":1648002651961},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1648002651961},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e568f308df26465e0432197e8b57384707470f54","modified":1648002651962},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1648002651962},{"_id":"themes/fluid/source/img/default.png","hash":"1eec8e152fbfcc661dc7eeb354498e6b2b88f64e","modified":1648085522455},{"_id":"themes/fluid/source/img/favicon.png","hash":"2aa1743dc823866820bdcd1bfca35efa235dd6ad","modified":1648028864736},{"_id":"public/local-search.xml","hash":"e42fc21b9e90521de53b80614998e440f4185cae","modified":1648196310590},{"_id":"public/archives/index.html","hash":"9e48ac07552baa04969612577a5f1ea0a85297a8","modified":1648196310590},{"_id":"public/archives/2022/index.html","hash":"c0340b5c7c8b27e17a5cd27f9a3f4703e57a472c","modified":1648196310590},{"_id":"public/archives/2022/03/index.html","hash":"a47df1a760afa4961073310aa3276be32dd2c7e2","modified":1648196310590},{"_id":"public/categories/acwing算法基础/index.html","hash":"76af2c566174a0e62b0e271b040b72354602b428","modified":1648196310590},{"_id":"public/categories/zookeeper/index.html","hash":"17b0affe8017684d93cdc2d4bb0c03c8e02dffcf","modified":1648196310590},{"_id":"public/index.html","hash":"6627cc06f087a1f675d239908fe9bc3d433a8699","modified":1648196310590},{"_id":"public/tags/快速排序/index.html","hash":"be64c5053579fbd277769c94954c4013337d0a5b","modified":1648196310590},{"_id":"public/tags/zookeeper/index.html","hash":"45b6ec151804874bd7256a4a3388dd8c9ad70f1e","modified":1648196310590},{"_id":"public/404.html","hash":"d28395977711eb49a1bbc6cbb1058326ce946839","modified":1648196310590},{"_id":"public/tags/index.html","hash":"c59676cf2a93ea315c1f87e9ed5849209d484d51","modified":1648196310590},{"_id":"public/categories/index.html","hash":"3fff1dae52fba860e7975bb98832af19b4dd6de4","modified":1648196310590},{"_id":"public/links/index.html","hash":"835f934fec24b8ae8f987e2d16243955a116def2","modified":1648196310590},{"_id":"public/2022/03/25/zookeeper/zookeeper入门/index.html","hash":"2a6370003dd3f0af14f9564cf4817397969013fe","modified":1648196310590},{"_id":"public/2022/03/24/acwing/quicksort/index.html","hash":"a15dfccb14d4701219a6bfd74b0c47f1cc7f1ddc","modified":1648196310590},{"_id":"public/CNAME","hash":"340499890fcdfc2fcb03e125ef0962f7462fe87c","modified":1648196310590},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1648196310590},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1648196310590},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1648196310590},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1648196310590},{"_id":"public/img/default.png","hash":"1eec8e152fbfcc661dc7eeb354498e6b2b88f64e","modified":1648196310590},{"_id":"public/img/favicon.png","hash":"2aa1743dc823866820bdcd1bfca35efa235dd6ad","modified":1648196310590},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1648196310590},{"_id":"public/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1648196310590},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1648196310590},{"_id":"public/js/events.js","hash":"41632930eca3e763cc1cf2de0b521e602dc72152","modified":1648196310590},{"_id":"public/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1648196310590},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1648196310590},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1648196310590},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1648196310590},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1648196310590},{"_id":"public/css/main.css","hash":"63bc59b8ca4b03afa2b93883143c349d461b1052","modified":1648196310590}],"Category":[{"name":"acwing算法基础","_id":"cl165j0pb00025kjh8x8mc80q"},{"name":"zookeeper","_id":"cl165j0pd00045kjh8l322h1q"}],"Data":[],"Page":[],"Post":[{"title":"快速排序","date":"2022-03-24T02:58:50.000Z","description":"学习快排思想以及代码实现。","_content":"# 快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)\n快速排序是从冒泡排序演变而来的算法，但是它比冒泡排序要高效得多，所以我们把它叫做快速排序😂\n快速排序之所以快，是因为它用到了一个思想😮 ---------> 分治(不懂的可以百度哟😁)\n\n那么快排是怎么实现的呢?让我们来看一下下面的图文解释:\n#### 1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:\n ![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/1.png)\n#### 2. 然后我们把**小于分界点**的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把**大于分界点**的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在**分界点**左边的元素**小于或等于**分界点, 在**分界点**右边的元素**大于或等于**分界点: \n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/2.png)\n#### 3. 利用**分界点**分好两边的元素后,得到下面的三个部分, 我们分别对**左边的部分**与**右边的部分**分别进行1与2的操作, 最后便可以排好序了(下图演示):\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/3.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/4.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/5.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/6.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/7.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/8.png)\n> 到这里, 这个数组便已经排好序了\n#### 4. 这时候就进入我们紧张刺激的代码环节:\n##### 4.1 Java代码\n```java\n    public void quick_sort(int[] arr, int l, int r){\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(i < x);\n        //3.确定分界点右边的元素\n        do j--; while(j > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        //有代码整洁洁癖的童鞋可以把if里面的代码写成一个方法,然后在进行调用\n        if(i < j) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n\n##### 4.2 C代码\n```c\nvoid quick_sort(int arr[], int l, int r)\n    {\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(arr[i] < x);\n        //3.确定分界点右边的元素\n        do j--; while(arr[j] > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        if(i < j) \n        {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        };\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n\n##### 4.3 C++代码\n```c++\nvoid quick_sort(int arr[], int l, int r)\n    {\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(arr[i] < x);\n        //3.确定分界点右边的元素\n        do j--; while(arr[j] > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        if(i < j) swap(arr[i], arr[j]);\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n##### 4.4 Python代码(语法忘记, 后续更新)\n```python\n    def quick_sort(arr, l, r):\n        i = l - 1, j = r + 1, x = arr[l + r >> 1];\n```\n##### 4.5 Go代码(后续更新)\n```go\n\n```\n","source":"_posts/acwing/quicksort.md","raw":"---\ntitle: 快速排序\ndate: 2022-03-24 10:58:50\ntags: 快速排序\ncategory: acwing算法基础\ndescription: 学习快排思想以及代码实现。\n---\n# 快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)\n快速排序是从冒泡排序演变而来的算法，但是它比冒泡排序要高效得多，所以我们把它叫做快速排序😂\n快速排序之所以快，是因为它用到了一个思想😮 ---------> 分治(不懂的可以百度哟😁)\n\n那么快排是怎么实现的呢?让我们来看一下下面的图文解释:\n#### 1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:\n ![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/1.png)\n#### 2. 然后我们把**小于分界点**的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把**大于分界点**的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在**分界点**左边的元素**小于或等于**分界点, 在**分界点**右边的元素**大于或等于**分界点: \n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/2.png)\n#### 3. 利用**分界点**分好两边的元素后,得到下面的三个部分, 我们分别对**左边的部分**与**右边的部分**分别进行1与2的操作, 最后便可以排好序了(下图演示):\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/3.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/4.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/5.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/6.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/7.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/8.png)\n> 到这里, 这个数组便已经排好序了\n#### 4. 这时候就进入我们紧张刺激的代码环节:\n##### 4.1 Java代码\n```java\n    public void quick_sort(int[] arr, int l, int r){\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(i < x);\n        //3.确定分界点右边的元素\n        do j--; while(j > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        //有代码整洁洁癖的童鞋可以把if里面的代码写成一个方法,然后在进行调用\n        if(i < j) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n\n##### 4.2 C代码\n```c\nvoid quick_sort(int arr[], int l, int r)\n    {\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(arr[i] < x);\n        //3.确定分界点右边的元素\n        do j--; while(arr[j] > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        if(i < j) \n        {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        };\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n\n##### 4.3 C++代码\n```c++\nvoid quick_sort(int arr[], int l, int r)\n    {\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(arr[i] < x);\n        //3.确定分界点右边的元素\n        do j--; while(arr[j] > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        if(i < j) swap(arr[i], arr[j]);\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n##### 4.4 Python代码(语法忘记, 后续更新)\n```python\n    def quick_sort(arr, l, r):\n        i = l - 1, j = r + 1, x = arr[l + r >> 1];\n```\n##### 4.5 Go代码(后续更新)\n```go\n\n```\n","slug":"acwing/quicksort","published":1,"updated":"2022-03-24T08:11:17.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl165j0p500005kjha07t8wj8","content":"<h1 id=\"快速排序-如有不足之处-请各方大佬在底下批评指正\"><a href=\"#快速排序-如有不足之处-请各方大佬在底下批评指正\" class=\"headerlink\" title=\"快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)\"></a>快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)</h1><p>快速排序是从冒泡排序演变而来的算法，但是它比冒泡排序要高效得多，所以我们把它叫做快速排序😂<br>快速排序之所以快，是因为它用到了一个思想😮 ———&gt; 分治(不懂的可以百度哟😁)</p>\n<p>那么快排是怎么实现的呢?让我们来看一下下面的图文解释:</p>\n<h4 id=\"1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7\"><a href=\"#1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7\" class=\"headerlink\" title=\"1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:\"></a>1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:</h4><p> <img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/1.png\"></p>\n<h4 id=\"2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点\"><a href=\"#2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点\" class=\"headerlink\" title=\"2. 然后我们把小于分界点的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把大于分界点的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在分界点左边的元素小于或等于分界点, 在分界点右边的元素大于或等于分界点:\"></a>2. 然后我们把<strong>小于分界点</strong>的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把<strong>大于分界点</strong>的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在<strong>分界点</strong>左边的元素<strong>小于或等于</strong>分界点, 在<strong>分界点</strong>右边的元素<strong>大于或等于</strong>分界点:</h4><p><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/2.png\"></p>\n<h4 id=\"3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示\"><a href=\"#3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示\" class=\"headerlink\" title=\"3. 利用分界点分好两边的元素后,得到下面的三个部分, 我们分别对左边的部分与右边的部分分别进行1与2的操作, 最后便可以排好序了(下图演示):\"></a>3. 利用<strong>分界点</strong>分好两边的元素后,得到下面的三个部分, 我们分别对<strong>左边的部分</strong>与<strong>右边的部分</strong>分别进行1与2的操作, 最后便可以排好序了(下图演示):</h4><p><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/3.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/4.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/5.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/6.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/7.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/8.png\"></p>\n<blockquote>\n<p>到这里, 这个数组便已经排好序了</p>\n</blockquote>\n<h4 id=\"4-这时候就进入我们紧张刺激的代码环节\"><a href=\"#4-这时候就进入我们紧张刺激的代码环节\" class=\"headerlink\" title=\"4. 这时候就进入我们紧张刺激的代码环节:\"></a>4. 这时候就进入我们紧张刺激的代码环节:</h4><h5 id=\"4-1-Java代码\"><a href=\"#4-1-Java代码\" class=\"headerlink\" title=\"4.1 Java代码\"></a>4.1 Java代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-comment\">//1.确定分界点</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>    <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(i &lt; x);<br>    <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>    <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(j &gt; x);<br>    <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>    <span class=\"hljs-comment\">//有代码整洁洁癖的童鞋可以把if里面的代码写成一个方法,然后在进行调用</span><br>    <span class=\"hljs-keyword\">if</span>(i &lt; j) &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = temp;<br>    &#125;<br>    <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>    quick_sort(arr, l, j);<br>    <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>    quick_sort(arr, j + <span class=\"hljs-number\">1</span>, r);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"4-2-C代码\"><a href=\"#4-2-C代码\" class=\"headerlink\" title=\"4.2 C代码\"></a>4.2 C代码</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-comment\">//1.确定分界点</span><br>        <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class=\"hljs-keyword\">if</span>(i &lt; j) <br>        &#123;<br>            <span class=\"hljs-type\">int</span> temp = arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;;<br>        <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>        quick_sort(arr, l, j);<br>        <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>        quick_sort(arr, j + <span class=\"hljs-number\">1</span>, r);<br>    &#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"4-3-C-代码\"><a href=\"#4-3-C-代码\" class=\"headerlink\" title=\"4.3 C++代码\"></a>4.3 C++代码</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\">    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-comment\">//1.确定分界点</span><br>        <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class=\"hljs-keyword\">if</span>(i &lt; j) <span class=\"hljs-built_in\">swap</span>(arr[i], arr[j]);<br>        <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>        <span class=\"hljs-built_in\">quick_sort</span>(arr, l, j);<br>        <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>        <span class=\"hljs-built_in\">quick_sort</span>(arr, j + <span class=\"hljs-number\">1</span>, r);<br>    &#125;<br></code></pre></div></td></tr></table></figure>\n<h5 id=\"4-4-Python代码-语法忘记-后续更新\"><a href=\"#4-4-Python代码-语法忘记-后续更新\" class=\"headerlink\" title=\"4.4 Python代码(语法忘记, 后续更新)\"></a>4.4 Python代码(语法忘记, 后续更新)</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">quick_sort</span>(<span class=\"hljs-params\">arr, l, r</span>):<br>    i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br></code></pre></div></td></tr></table></figure>\n<h5 id=\"4-5-Go代码-后续更新\"><a href=\"#4-5-Go代码-后续更新\" class=\"headerlink\" title=\"4.5 Go代码(后续更新)\"></a>4.5 Go代码(后续更新)</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs go\"><br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"wordcount":1701,"excerpt":"","more":"<h1 id=\"快速排序-如有不足之处-请各方大佬在底下批评指正\"><a href=\"#快速排序-如有不足之处-请各方大佬在底下批评指正\" class=\"headerlink\" title=\"快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)\"></a>快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)</h1><p>快速排序是从冒泡排序演变而来的算法，但是它比冒泡排序要高效得多，所以我们把它叫做快速排序😂<br>快速排序之所以快，是因为它用到了一个思想😮 ———&gt; 分治(不懂的可以百度哟😁)</p>\n<p>那么快排是怎么实现的呢?让我们来看一下下面的图文解释:</p>\n<h4 id=\"1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7\"><a href=\"#1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7\" class=\"headerlink\" title=\"1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:\"></a>1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:</h4><p> <img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/1.png\"></p>\n<h4 id=\"2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点\"><a href=\"#2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点\" class=\"headerlink\" title=\"2. 然后我们把小于分界点的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把大于分界点的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在分界点左边的元素小于或等于分界点, 在分界点右边的元素大于或等于分界点:\"></a>2. 然后我们把<strong>小于分界点</strong>的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把<strong>大于分界点</strong>的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在<strong>分界点</strong>左边的元素<strong>小于或等于</strong>分界点, 在<strong>分界点</strong>右边的元素<strong>大于或等于</strong>分界点:</h4><p><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/2.png\"></p>\n<h4 id=\"3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示\"><a href=\"#3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示\" class=\"headerlink\" title=\"3. 利用分界点分好两边的元素后,得到下面的三个部分, 我们分别对左边的部分与右边的部分分别进行1与2的操作, 最后便可以排好序了(下图演示):\"></a>3. 利用<strong>分界点</strong>分好两边的元素后,得到下面的三个部分, 我们分别对<strong>左边的部分</strong>与<strong>右边的部分</strong>分别进行1与2的操作, 最后便可以排好序了(下图演示):</h4><p><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/3.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/4.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/5.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/6.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/7.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/8.png\"></p>\n<blockquote>\n<p>到这里, 这个数组便已经排好序了</p>\n</blockquote>\n<h4 id=\"4-这时候就进入我们紧张刺激的代码环节\"><a href=\"#4-这时候就进入我们紧张刺激的代码环节\" class=\"headerlink\" title=\"4. 这时候就进入我们紧张刺激的代码环节:\"></a>4. 这时候就进入我们紧张刺激的代码环节:</h4><h5 id=\"4-1-Java代码\"><a href=\"#4-1-Java代码\" class=\"headerlink\" title=\"4.1 Java代码\"></a>4.1 Java代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-comment\">//1.确定分界点</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>    <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(i &lt; x);<br>    <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>    <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(j &gt; x);<br>    <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>    <span class=\"hljs-comment\">//有代码整洁洁癖的童鞋可以把if里面的代码写成一个方法,然后在进行调用</span><br>    <span class=\"hljs-keyword\">if</span>(i &lt; j) &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = temp;<br>    &#125;<br>    <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>    quick_sort(arr, l, j);<br>    <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>    quick_sort(arr, j + <span class=\"hljs-number\">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-2-C代码\"><a href=\"#4-2-C代码\" class=\"headerlink\" title=\"4.2 C代码\"></a>4.2 C代码</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-comment\">//1.确定分界点</span><br>        <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class=\"hljs-keyword\">if</span>(i &lt; j) <br>        &#123;<br>            <span class=\"hljs-type\">int</span> temp = arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;;<br>        <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>        quick_sort(arr, l, j);<br>        <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>        quick_sort(arr, j + <span class=\"hljs-number\">1</span>, r);<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-3-C-代码\"><a href=\"#4-3-C-代码\" class=\"headerlink\" title=\"4.3 C++代码\"></a>4.3 C++代码</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\">    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-comment\">//1.确定分界点</span><br>        <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class=\"hljs-keyword\">if</span>(i &lt; j) <span class=\"hljs-built_in\">swap</span>(arr[i], arr[j]);<br>        <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>        <span class=\"hljs-built_in\">quick_sort</span>(arr, l, j);<br>        <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>        <span class=\"hljs-built_in\">quick_sort</span>(arr, j + <span class=\"hljs-number\">1</span>, r);<br>    &#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"4-4-Python代码-语法忘记-后续更新\"><a href=\"#4-4-Python代码-语法忘记-后续更新\" class=\"headerlink\" title=\"4.4 Python代码(语法忘记, 后续更新)\"></a>4.4 Python代码(语法忘记, 后续更新)</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">quick_sort</span>(<span class=\"hljs-params\">arr, l, r</span>):<br>    i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br></code></pre></td></tr></table></figure>\n<h5 id=\"4-5-Go代码-后续更新\"><a href=\"#4-5-Go代码-后续更新\" class=\"headerlink\" title=\"4.5 Go代码(后续更新)\"></a>4.5 Go代码(后续更新)</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br></code></pre></td></tr></table></figure>\n"},{"title":"一、zookeeper入门","date":"2022-03-25T03:09:47.000Z","description":"介绍zookeeper的入门概念、数据模型、应用场景以及Java对它进行整合。","_content":"# 1. 前言<br/>\n在此刻的我并不知道zookeeper是什么，我听到zookeeper的第一感觉就是这家伙是啥啊，对的，前言就这么短，因为我也不知道它是啥，也没怎么用。\n# 2. ZooKeeper介绍<br/>\n## 2.1 ZooKeeper名字的由来\n学习一样东西的时候，个人觉得最好是先了解它是怎么出现在人们眼前的，然后出现了之后是怎么慢慢地被人们使用的，使用后怎样被人们慢慢扩展的。\n这里介绍一下它的由来（摘自《从Paxos到Zookeeper  分布式一致性原理与实践 [倪超著][电子工业出版社]》）：\n> ZooKeeper最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。关于 \"ZooKeeper\" 这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目），雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 Raghu Ramakrishnan 开玩笑地说：\"再这样下去，我们这儿就变成动物园了！\"此话一出，大家纷纷表示就叫动物园管理员吧——因为各个以动物园命名的分布式组件放在一起，雅虎整个分布式系统看上去就像一个大型的动物园了，而ZooKeeper正好要用来进行分布式环境的协调——于是，ZooKeeper的名字也就由此诞生了。\n\n看完ZooKeeper名字的由来是不是有点想笑，传奇的分布式协调框架就由此被命名了，这名字像是不要钱想的一样😂不过也能理解，开发人员都是可爱的😆\n\n## 2.2 ZooKeeper概述\nZooKeeper他是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\n> 原语：一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。\n\nZooKeeper为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调、通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n此外，ZooKeeper将数据保存在内存中，性能是非常棒的。在\"读\"多于\"写\"的应用程序中尤其地高性能，因为\"写\"会导致所有的服务器进行数据同步。(\"读\"多于\"写\"是协调服务的典型场景)。\n\n## 2.3 ZooKeeper特点\n- **顺序一致性**：从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到ZooKeeper中去。\n- **原子性**：所有事务的请求处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功地应用了某一个事务，要么都没有应用。\n- **单一系统映像**：无论客户端连接到哪一个ZooKeeper服务器上，其看到的服务端数据模型都是一致的。\n- **可靠性**：任何一次更改请求被应用，更改的结果就会被持久化，知道被下一次更改覆盖。\n\n## 2.4 ZooKeeper典型应用场景\n\nZooKeeper概述中，我们介绍到使用其通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n下面选3个典型的应用场景来专门说说(后续更新具体代码逻辑)：\n1. **分布式锁**：通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放。\n2. **命名服务**：可以通过ZooKeeper的顺序节点生成全局唯一ID。\n3. **数据发布/订阅**：通过Watcher机制可以很方便地实现数据发布/订阅。当你将数据发布到ZooKeeper被监听的节点上，其他机器可通过监听ZooKeeper上的节点的变化来实现配置的动态更新。\n\n实际上，这些功能的实现基本上都得益于ZooKeeper可以保存数据的功能，但是ZooKeeper不适合保存大量数据，这一点需要注意一下😤\n\n# 3. ZooKeeper的功能<br/>\n友情提示👿：拿出小本本，下面的内容非常重要啊哈\n\n## 3.1 Data model（数据模型）\nZooKeeper数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数字可以说是数字、字符串或者是二进制序列。并且，每个节点还可以拥有N个子节点，最上层是根节点使用\"/\"来表示。每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最先单元。并且，每个znode都只有一个唯一的路径标识。\n\n强调一句👿：**ZooKeeper主要是用来协调服务，而不是用来存储业务数据的，所以，不要放比较大的数据在znode上，ZooKeeper给出的上线是每个结点的数据大小最大是1M。**\n\n从下图可以更直观地看出：ZooKeeper节点路径标识方式和Unix文件系统路径非常相似，都是由一系列使用\"/\"进行分割的路径表示，开发人员可以想这个结点中写入数据，也可以在节点下面创建子节点。\n这些操作后面我们来实操一下。\n![](https://javaguide.cn/assets/znode-structure.19119dbd.png)\n\n## 3.2 znode（数据节点）\n介绍了ZooKeeper树形数据模型之后，我们知道每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最小单元。你要存放的数据就放在上面，是你使用ZooKeeper过程中经常需要接触到的一个概念。\n\n### 3.2.1 znode的4中类型\n一般我们将znode分为4大类：\n- **持久（PERSISTENT）节点**：一旦创建就一直存在即使ZooKeeper集群宕机，直到将其删除。\n- **临时（EPHEMERAL）节点**：临时结点的生命周期是与**客户端会话（session）**绑定的，**会话消失则结点消失**。并且**临时结点只能做叶子结点**，不能创建子节点。\n- **持久顺序（PERSISTENT_SEQUENTIAL）节点**：除了具有持久（PERSISTENT）节点的特性之外，子节点的名称还具有顺序性。比如```/node1/00000000001```、```/node/00000000002```。\n- **临时顺序（EPHEMERAL_SEQUENTIAL）节点**：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。\n\n### 3.2.2 znode数据结构\n每个znode由2部分组成：\n- **stat**：状态信息。\n- **data**：节点存放的数据的具体内容。\n\n如下所示，我通过ZooKeeper的get命令来获取根目录下violet节点的内容。（get命令在下面会详细介绍哟）。\n```sh\n[zk: 127.0.0.1:2181(CONNECTED) 6] get /violet\n# 该数据节点关联的数据内容为空\nnull\n# 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出\ncZxid = 0x2\nctime = Tue Nov 27 18:05:34 CST 2022\nmZxid = 0x2\nmtime = Tue Nov 27 18:05:34 CST 2022\npZxid = 0x3\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 0\nnumChildren = 1\n```\n\nStat类中包含了一个数据节点的所有状态信息的字段，包括事务ID-cZxid、节点创建时间-ctime和子节点个数-numChidren等等。\n\n下面我们来看一下每个znode状态信息究竟代表的是什么吧！（下面的内容来源于《从Paxos到Zookeeper  分布式一致性原理与实践》，因为松松也不是特别清楚，要学会参考资料哟）：\n\n| **znode状态信息**|**解释**|\n|--|--|\n| cZxid|create ZXID，即该数据节点被创建时的事务id|\n|ctime|create time, 即该节点的创建时间|\n|mZxid|modified ZXID，即该节点最终一次更新时的事务id|\n|mtime|modified time，即该节点最后一次的更新时间|\n|pZxid|该节点的子节点列表最后一次修改时的事务id，只有子节点列表变更才会更新pZxid，子节点内容变更不会更新|\n|cversion|子节点版本号，当前节点的子节点每次变化时值增加1|\n|dataVersion|数据节点内容版本号，节点创建时为0，每更新一次节点内容（不管内容有无变化）该版本号的值增加1|\n|aclVersion|节点的ACL版本号，表示该节点ACL信息变更次数|\n|ephemeralOwner|创建该临时节点的会话的sessionid：如果当前节点为持久节点，则ephemeralOwner=0|\n|dataLength|数据节点内容长度|\n|numChildren|当前节点的子节点个数|\n\n## 3.3 版本（version）\n在前面我们已经提到，对应每个znode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个znode的三个相关的版本：\n- **dataVersion**：当前znode节点的版本号。\n- **cversion**：当前znode子节点的版本。\n- **aclVersion**：当前znode的ACL的版本号。\n\n## 3.4 ACL（权限控制）\nZooKeeper采用ACL（AccessControlLists）策略来进行权限控制，类似于UNIX文件系统的权限控制。\n\n对于znode操作的权限，ZooKeeper提供了以下5种：\n- **CREATE**：能创建子节点\n- **READ**：能获取节点数据和列出其子节点\n- **WRITE**：能设置/更新节点数据\n- **DELETE**：能删除子节点\n- **ADMIN**: 能设置节点ACL的权限\n\n其中尤其需要注意的是， CREATE和DELETE这两种权限都是针对子节点的权限控制。\n\n对于身份认证，提供了以下几种方式：\n- **world**：默认方式，所有用户都可无条件访问。\n- **auth**：不适用任何id，代表任何已认证的用户。\n- **digest**：用户名：密码认证方式：username:password。\n- **ip**：对指定ip进行限制。\n\n## 3.5 Watcher（事件监听器）\nWatcher（事件监听器），是ZooKeeper中的一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知感兴趣的客户端上去，该机制是ZooKeeper实现分布式协调服务的重要特性。\n![](https://javaguide.cn/assets/watche%E6%9C%BA%E5%88%B6.f523bd89.png)\n王之怒吼👿：非常有用的一个特性，都拿出小本本记好了，后面用到ZooKeeper基本离不开Watcher（事件监听）机制。\n\n## 3.6 会话（Session）\nSession 可以看做是ZooKeeper服务器与客户端之间的一个TCP长连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZooKeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watcher事件通知。\n\nSession有一个属性叫作：sessionTimeout，sessionTimeout代表会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话依然有效。\n\n另外，在为客户端创建会话之前，服务端首先会为每个客户端都分配一个sessionID。由于sessionID是ZooKeeper会话的一个重要标识，许多与会话相关的运行机制都是基于这个sessionID的，因此，无论是哪台服务器为客户端分配的sessionID，都务必保证全局唯一。\n\n## 4. ZooKeeper集群\n为了保证高可用，最好是以集群形态来部署ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么ZooKeeper本身仍然是可用的。通常3台服务器就可以构成一个ZooKeeper集群了。ZooKeeper官方提供的架构图就是一个ZooKeeper集群整体对外提供服务。\n![](https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4.6fdcc61e.png)\n上图中每一个Server代表一个安装ZooKeeper服务的服务器。组成ZooKeeper服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都保持着通信。集群间通过ZAB协议（ZooKeeper Atomic Broadcast）来保持数据的一致性。\n\n**最典型集群模式**：**Master/Slave模式（主备模式）。在这种模式中，通常Master服务器作为主服务器提供写服务，其他的Slave服务器从服务器通过异步复制的方式获取Master服务器最新的数据提供读服务。\n\n### 4.1 ZooKeeper集群角色\n但是，在ZooKeeper中没有选择传统的Master/Slave概念，而是引入了Leader、Follower和Observer三种角色。如下图所示\n![](https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.ffff8ef5.png)\nZooKeeper集群中的所有机器通过一个Leader**选举过程**来选定一台称为\"Leader\"的机器，Leader既可以为客户端提供写服务又能提供读服务。除了Leader外，**Follower**和**Observer**都只能提供读服务。Follower和Observer唯一的区别在于Observer机器不参与Leader的选举过程，也不参与写操作的\"过半写成功\"策略，因此Observer机器可以在不影响写性能的情况下提升集群的读性能。\n\n|角色|说明|\n|-|-|\n|Leader|为客户提供读和写的服务，负责投票的发起和决议，更新系统状态。|\n|Follower|为客户端提供读服务，如果是写服务则转发给Leader。参与选举过程中的投票。|\n|Observer|为客户端提供读服务，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与\"过半写成功\"策略。在不影响写性能的情况下提升集群的读性能。此角色于ZooKeeper3.3系列新增的角色。|\n\n当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，就会进入Leader选举过程，这个过程会选举产生新的Leader服务器。\n\n这个过程大概是这样子的：\n1. Leader election在（选举阶段）：节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准leader。\n2. Discovery（发现阶段）：在这个阶段，followers跟准leader进行通信，同步followers最近接收的事务提议。\n3. Synchronization（同步阶段）：同步阶段主要是利用leader前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后准leader才会成为真正的leader。\n4. Broadcast（广播阶段）：到了这个阶段，ZooKeeper集群才能正式对外提供事务服务，并且leader可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。\n\n### 4.2 ZooKeeper集群中的服务器状态\n- **LOOKING**：寻找Leader。\n- **LEADING**：Leader状态，对应的节点为Leader。\n- **FOLLOWING**：Follower状态，对应的节点为Follower。\n- **OBSERVING**：Observer状态，对应节点为Observer，该节点不参与Leader选举。\n\n### 4.3 ZooKeeper集群为啥最好是奇数台？\nZooKeeper集群在宕掉几个ZooKeeper服务器之后，如果剩下的ZooKeeper服务器个数大于宕掉的个数的话整个ZooKeeper才依然可用。假如我们的集群中有n台ZooKeeper服务器，那么也就是剩下的服务数必须大于n/2。先说一下结论，2n和2n-1的容忍度是一样的，都是n-1，大家可以先自己仔细想一想。\n\n比如：假如我们有3台，那么最大允许宕掉1台ZooKeeper服务器，如果我们有4台的的时候也同样只允许宕掉1台。 假如我们有5台，那么最大允许宕掉2台ZooKeeper服务器，如果我们有6台的的时候也同样只允许宕掉2台。\n\n综上，何必增加那一个不必要的ZooKeeper服务器呢？\n\n### 4.4 ZooKeeper选举的过半机制防止脑裂\n##### 何为集群脑裂？\n","source":"_posts/zookeeper/zookeeper入门.md","raw":"---\ntitle: 一、zookeeper入门\ndate: 2022-03-25 11:09:47\ntags: zookeeper\ncategory: zookeeper\ndescription: 介绍zookeeper的入门概念、数据模型、应用场景以及Java对它进行整合。\n---\n# 1. 前言<br/>\n在此刻的我并不知道zookeeper是什么，我听到zookeeper的第一感觉就是这家伙是啥啊，对的，前言就这么短，因为我也不知道它是啥，也没怎么用。\n# 2. ZooKeeper介绍<br/>\n## 2.1 ZooKeeper名字的由来\n学习一样东西的时候，个人觉得最好是先了解它是怎么出现在人们眼前的，然后出现了之后是怎么慢慢地被人们使用的，使用后怎样被人们慢慢扩展的。\n这里介绍一下它的由来（摘自《从Paxos到Zookeeper  分布式一致性原理与实践 [倪超著][电子工业出版社]》）：\n> ZooKeeper最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。关于 \"ZooKeeper\" 这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目），雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 Raghu Ramakrishnan 开玩笑地说：\"再这样下去，我们这儿就变成动物园了！\"此话一出，大家纷纷表示就叫动物园管理员吧——因为各个以动物园命名的分布式组件放在一起，雅虎整个分布式系统看上去就像一个大型的动物园了，而ZooKeeper正好要用来进行分布式环境的协调——于是，ZooKeeper的名字也就由此诞生了。\n\n看完ZooKeeper名字的由来是不是有点想笑，传奇的分布式协调框架就由此被命名了，这名字像是不要钱想的一样😂不过也能理解，开发人员都是可爱的😆\n\n## 2.2 ZooKeeper概述\nZooKeeper他是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\n> 原语：一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。\n\nZooKeeper为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调、通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n此外，ZooKeeper将数据保存在内存中，性能是非常棒的。在\"读\"多于\"写\"的应用程序中尤其地高性能，因为\"写\"会导致所有的服务器进行数据同步。(\"读\"多于\"写\"是协调服务的典型场景)。\n\n## 2.3 ZooKeeper特点\n- **顺序一致性**：从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到ZooKeeper中去。\n- **原子性**：所有事务的请求处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功地应用了某一个事务，要么都没有应用。\n- **单一系统映像**：无论客户端连接到哪一个ZooKeeper服务器上，其看到的服务端数据模型都是一致的。\n- **可靠性**：任何一次更改请求被应用，更改的结果就会被持久化，知道被下一次更改覆盖。\n\n## 2.4 ZooKeeper典型应用场景\n\nZooKeeper概述中，我们介绍到使用其通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n下面选3个典型的应用场景来专门说说(后续更新具体代码逻辑)：\n1. **分布式锁**：通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放。\n2. **命名服务**：可以通过ZooKeeper的顺序节点生成全局唯一ID。\n3. **数据发布/订阅**：通过Watcher机制可以很方便地实现数据发布/订阅。当你将数据发布到ZooKeeper被监听的节点上，其他机器可通过监听ZooKeeper上的节点的变化来实现配置的动态更新。\n\n实际上，这些功能的实现基本上都得益于ZooKeeper可以保存数据的功能，但是ZooKeeper不适合保存大量数据，这一点需要注意一下😤\n\n# 3. ZooKeeper的功能<br/>\n友情提示👿：拿出小本本，下面的内容非常重要啊哈\n\n## 3.1 Data model（数据模型）\nZooKeeper数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数字可以说是数字、字符串或者是二进制序列。并且，每个节点还可以拥有N个子节点，最上层是根节点使用\"/\"来表示。每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最先单元。并且，每个znode都只有一个唯一的路径标识。\n\n强调一句👿：**ZooKeeper主要是用来协调服务，而不是用来存储业务数据的，所以，不要放比较大的数据在znode上，ZooKeeper给出的上线是每个结点的数据大小最大是1M。**\n\n从下图可以更直观地看出：ZooKeeper节点路径标识方式和Unix文件系统路径非常相似，都是由一系列使用\"/\"进行分割的路径表示，开发人员可以想这个结点中写入数据，也可以在节点下面创建子节点。\n这些操作后面我们来实操一下。\n![](https://javaguide.cn/assets/znode-structure.19119dbd.png)\n\n## 3.2 znode（数据节点）\n介绍了ZooKeeper树形数据模型之后，我们知道每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最小单元。你要存放的数据就放在上面，是你使用ZooKeeper过程中经常需要接触到的一个概念。\n\n### 3.2.1 znode的4中类型\n一般我们将znode分为4大类：\n- **持久（PERSISTENT）节点**：一旦创建就一直存在即使ZooKeeper集群宕机，直到将其删除。\n- **临时（EPHEMERAL）节点**：临时结点的生命周期是与**客户端会话（session）**绑定的，**会话消失则结点消失**。并且**临时结点只能做叶子结点**，不能创建子节点。\n- **持久顺序（PERSISTENT_SEQUENTIAL）节点**：除了具有持久（PERSISTENT）节点的特性之外，子节点的名称还具有顺序性。比如```/node1/00000000001```、```/node/00000000002```。\n- **临时顺序（EPHEMERAL_SEQUENTIAL）节点**：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。\n\n### 3.2.2 znode数据结构\n每个znode由2部分组成：\n- **stat**：状态信息。\n- **data**：节点存放的数据的具体内容。\n\n如下所示，我通过ZooKeeper的get命令来获取根目录下violet节点的内容。（get命令在下面会详细介绍哟）。\n```sh\n[zk: 127.0.0.1:2181(CONNECTED) 6] get /violet\n# 该数据节点关联的数据内容为空\nnull\n# 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出\ncZxid = 0x2\nctime = Tue Nov 27 18:05:34 CST 2022\nmZxid = 0x2\nmtime = Tue Nov 27 18:05:34 CST 2022\npZxid = 0x3\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 0\nnumChildren = 1\n```\n\nStat类中包含了一个数据节点的所有状态信息的字段，包括事务ID-cZxid、节点创建时间-ctime和子节点个数-numChidren等等。\n\n下面我们来看一下每个znode状态信息究竟代表的是什么吧！（下面的内容来源于《从Paxos到Zookeeper  分布式一致性原理与实践》，因为松松也不是特别清楚，要学会参考资料哟）：\n\n| **znode状态信息**|**解释**|\n|--|--|\n| cZxid|create ZXID，即该数据节点被创建时的事务id|\n|ctime|create time, 即该节点的创建时间|\n|mZxid|modified ZXID，即该节点最终一次更新时的事务id|\n|mtime|modified time，即该节点最后一次的更新时间|\n|pZxid|该节点的子节点列表最后一次修改时的事务id，只有子节点列表变更才会更新pZxid，子节点内容变更不会更新|\n|cversion|子节点版本号，当前节点的子节点每次变化时值增加1|\n|dataVersion|数据节点内容版本号，节点创建时为0，每更新一次节点内容（不管内容有无变化）该版本号的值增加1|\n|aclVersion|节点的ACL版本号，表示该节点ACL信息变更次数|\n|ephemeralOwner|创建该临时节点的会话的sessionid：如果当前节点为持久节点，则ephemeralOwner=0|\n|dataLength|数据节点内容长度|\n|numChildren|当前节点的子节点个数|\n\n## 3.3 版本（version）\n在前面我们已经提到，对应每个znode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个znode的三个相关的版本：\n- **dataVersion**：当前znode节点的版本号。\n- **cversion**：当前znode子节点的版本。\n- **aclVersion**：当前znode的ACL的版本号。\n\n## 3.4 ACL（权限控制）\nZooKeeper采用ACL（AccessControlLists）策略来进行权限控制，类似于UNIX文件系统的权限控制。\n\n对于znode操作的权限，ZooKeeper提供了以下5种：\n- **CREATE**：能创建子节点\n- **READ**：能获取节点数据和列出其子节点\n- **WRITE**：能设置/更新节点数据\n- **DELETE**：能删除子节点\n- **ADMIN**: 能设置节点ACL的权限\n\n其中尤其需要注意的是， CREATE和DELETE这两种权限都是针对子节点的权限控制。\n\n对于身份认证，提供了以下几种方式：\n- **world**：默认方式，所有用户都可无条件访问。\n- **auth**：不适用任何id，代表任何已认证的用户。\n- **digest**：用户名：密码认证方式：username:password。\n- **ip**：对指定ip进行限制。\n\n## 3.5 Watcher（事件监听器）\nWatcher（事件监听器），是ZooKeeper中的一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知感兴趣的客户端上去，该机制是ZooKeeper实现分布式协调服务的重要特性。\n![](https://javaguide.cn/assets/watche%E6%9C%BA%E5%88%B6.f523bd89.png)\n王之怒吼👿：非常有用的一个特性，都拿出小本本记好了，后面用到ZooKeeper基本离不开Watcher（事件监听）机制。\n\n## 3.6 会话（Session）\nSession 可以看做是ZooKeeper服务器与客户端之间的一个TCP长连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZooKeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watcher事件通知。\n\nSession有一个属性叫作：sessionTimeout，sessionTimeout代表会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话依然有效。\n\n另外，在为客户端创建会话之前，服务端首先会为每个客户端都分配一个sessionID。由于sessionID是ZooKeeper会话的一个重要标识，许多与会话相关的运行机制都是基于这个sessionID的，因此，无论是哪台服务器为客户端分配的sessionID，都务必保证全局唯一。\n\n## 4. ZooKeeper集群\n为了保证高可用，最好是以集群形态来部署ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么ZooKeeper本身仍然是可用的。通常3台服务器就可以构成一个ZooKeeper集群了。ZooKeeper官方提供的架构图就是一个ZooKeeper集群整体对外提供服务。\n![](https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4.6fdcc61e.png)\n上图中每一个Server代表一个安装ZooKeeper服务的服务器。组成ZooKeeper服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都保持着通信。集群间通过ZAB协议（ZooKeeper Atomic Broadcast）来保持数据的一致性。\n\n**最典型集群模式**：**Master/Slave模式（主备模式）。在这种模式中，通常Master服务器作为主服务器提供写服务，其他的Slave服务器从服务器通过异步复制的方式获取Master服务器最新的数据提供读服务。\n\n### 4.1 ZooKeeper集群角色\n但是，在ZooKeeper中没有选择传统的Master/Slave概念，而是引入了Leader、Follower和Observer三种角色。如下图所示\n![](https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.ffff8ef5.png)\nZooKeeper集群中的所有机器通过一个Leader**选举过程**来选定一台称为\"Leader\"的机器，Leader既可以为客户端提供写服务又能提供读服务。除了Leader外，**Follower**和**Observer**都只能提供读服务。Follower和Observer唯一的区别在于Observer机器不参与Leader的选举过程，也不参与写操作的\"过半写成功\"策略，因此Observer机器可以在不影响写性能的情况下提升集群的读性能。\n\n|角色|说明|\n|-|-|\n|Leader|为客户提供读和写的服务，负责投票的发起和决议，更新系统状态。|\n|Follower|为客户端提供读服务，如果是写服务则转发给Leader。参与选举过程中的投票。|\n|Observer|为客户端提供读服务，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与\"过半写成功\"策略。在不影响写性能的情况下提升集群的读性能。此角色于ZooKeeper3.3系列新增的角色。|\n\n当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，就会进入Leader选举过程，这个过程会选举产生新的Leader服务器。\n\n这个过程大概是这样子的：\n1. Leader election在（选举阶段）：节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准leader。\n2. Discovery（发现阶段）：在这个阶段，followers跟准leader进行通信，同步followers最近接收的事务提议。\n3. Synchronization（同步阶段）：同步阶段主要是利用leader前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后准leader才会成为真正的leader。\n4. Broadcast（广播阶段）：到了这个阶段，ZooKeeper集群才能正式对外提供事务服务，并且leader可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。\n\n### 4.2 ZooKeeper集群中的服务器状态\n- **LOOKING**：寻找Leader。\n- **LEADING**：Leader状态，对应的节点为Leader。\n- **FOLLOWING**：Follower状态，对应的节点为Follower。\n- **OBSERVING**：Observer状态，对应节点为Observer，该节点不参与Leader选举。\n\n### 4.3 ZooKeeper集群为啥最好是奇数台？\nZooKeeper集群在宕掉几个ZooKeeper服务器之后，如果剩下的ZooKeeper服务器个数大于宕掉的个数的话整个ZooKeeper才依然可用。假如我们的集群中有n台ZooKeeper服务器，那么也就是剩下的服务数必须大于n/2。先说一下结论，2n和2n-1的容忍度是一样的，都是n-1，大家可以先自己仔细想一想。\n\n比如：假如我们有3台，那么最大允许宕掉1台ZooKeeper服务器，如果我们有4台的的时候也同样只允许宕掉1台。 假如我们有5台，那么最大允许宕掉2台ZooKeeper服务器，如果我们有6台的的时候也同样只允许宕掉2台。\n\n综上，何必增加那一个不必要的ZooKeeper服务器呢？\n\n### 4.4 ZooKeeper选举的过半机制防止脑裂\n##### 何为集群脑裂？\n","slug":"zookeeper/zookeeper入门","published":1,"updated":"2022-03-25T08:09:42.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl165j0pa00015kjhcsfm0uj3","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言<br/></h1><p>在此刻的我并不知道zookeeper是什么，我听到zookeeper的第一感觉就是这家伙是啥啊，对的，前言就这么短，因为我也不知道它是啥，也没怎么用。</p>\n<h1 id=\"2-ZooKeeper介绍\"><a href=\"#2-ZooKeeper介绍\" class=\"headerlink\" title=\"2. ZooKeeper介绍\"></a>2. ZooKeeper介绍<br/></h1><h2 id=\"2-1-ZooKeeper名字的由来\"><a href=\"#2-1-ZooKeeper名字的由来\" class=\"headerlink\" title=\"2.1 ZooKeeper名字的由来\"></a>2.1 ZooKeeper名字的由来</h2><p>学习一样东西的时候，个人觉得最好是先了解它是怎么出现在人们眼前的，然后出现了之后是怎么慢慢地被人们使用的，使用后怎样被人们慢慢扩展的。<br>这里介绍一下它的由来（摘自《从Paxos到Zookeeper  分布式一致性原理与实践 [倪超著][电子工业出版社]》）：</p>\n<blockquote>\n<p>ZooKeeper最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。关于 “ZooKeeper” 这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目），雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 Raghu Ramakrishnan 开玩笑地说：”再这样下去，我们这儿就变成动物园了！”此话一出，大家纷纷表示就叫动物园管理员吧——因为各个以动物园命名的分布式组件放在一起，雅虎整个分布式系统看上去就像一个大型的动物园了，而ZooKeeper正好要用来进行分布式环境的协调——于是，ZooKeeper的名字也就由此诞生了。</p>\n</blockquote>\n<p>看完ZooKeeper名字的由来是不是有点想笑，传奇的分布式协调框架就由此被命名了，这名字像是不要钱想的一样😂不过也能理解，开发人员都是可爱的😆</p>\n<h2 id=\"2-2-ZooKeeper概述\"><a href=\"#2-2-ZooKeeper概述\" class=\"headerlink\" title=\"2.2 ZooKeeper概述\"></a>2.2 ZooKeeper概述</h2><p>ZooKeeper他是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p>\n<blockquote>\n<p>原语：一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。</p>\n</blockquote>\n<p>ZooKeeper为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调、通知、集群管理、Master选举、分布式锁和分布式队列等功能。</p>\n<p>此外，ZooKeeper将数据保存在内存中，性能是非常棒的。在”读”多于”写”的应用程序中尤其地高性能，因为”写”会导致所有的服务器进行数据同步。(“读”多于”写”是协调服务的典型场景)。</p>\n<h2 id=\"2-3-ZooKeeper特点\"><a href=\"#2-3-ZooKeeper特点\" class=\"headerlink\" title=\"2.3 ZooKeeper特点\"></a>2.3 ZooKeeper特点</h2><ul>\n<li><strong>顺序一致性</strong>：从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到ZooKeeper中去。</li>\n<li><strong>原子性</strong>：所有事务的请求处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功地应用了某一个事务，要么都没有应用。</li>\n<li><strong>单一系统映像</strong>：无论客户端连接到哪一个ZooKeeper服务器上，其看到的服务端数据模型都是一致的。</li>\n<li><strong>可靠性</strong>：任何一次更改请求被应用，更改的结果就会被持久化，知道被下一次更改覆盖。</li>\n</ul>\n<h2 id=\"2-4-ZooKeeper典型应用场景\"><a href=\"#2-4-ZooKeeper典型应用场景\" class=\"headerlink\" title=\"2.4 ZooKeeper典型应用场景\"></a>2.4 ZooKeeper典型应用场景</h2><p>ZooKeeper概述中，我们介绍到使用其通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。</p>\n<p>下面选3个典型的应用场景来专门说说(后续更新具体代码逻辑)：</p>\n<ol>\n<li><strong>分布式锁</strong>：通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放。</li>\n<li><strong>命名服务</strong>：可以通过ZooKeeper的顺序节点生成全局唯一ID。</li>\n<li><strong>数据发布/订阅</strong>：通过Watcher机制可以很方便地实现数据发布/订阅。当你将数据发布到ZooKeeper被监听的节点上，其他机器可通过监听ZooKeeper上的节点的变化来实现配置的动态更新。</li>\n</ol>\n<p>实际上，这些功能的实现基本上都得益于ZooKeeper可以保存数据的功能，但是ZooKeeper不适合保存大量数据，这一点需要注意一下😤</p>\n<h1 id=\"3-ZooKeeper的功能\"><a href=\"#3-ZooKeeper的功能\" class=\"headerlink\" title=\"3. ZooKeeper的功能\"></a>3. ZooKeeper的功能<br/></h1><p>友情提示👿：拿出小本本，下面的内容非常重要啊哈</p>\n<h2 id=\"3-1-Data-model（数据模型）\"><a href=\"#3-1-Data-model（数据模型）\" class=\"headerlink\" title=\"3.1 Data model（数据模型）\"></a>3.1 Data model（数据模型）</h2><p>ZooKeeper数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数字可以说是数字、字符串或者是二进制序列。并且，每个节点还可以拥有N个子节点，最上层是根节点使用”/“来表示。每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最先单元。并且，每个znode都只有一个唯一的路径标识。</p>\n<p>强调一句👿：<strong>ZooKeeper主要是用来协调服务，而不是用来存储业务数据的，所以，不要放比较大的数据在znode上，ZooKeeper给出的上线是每个结点的数据大小最大是1M。</strong></p>\n<p>从下图可以更直观地看出：ZooKeeper节点路径标识方式和Unix文件系统路径非常相似，都是由一系列使用”/“进行分割的路径表示，开发人员可以想这个结点中写入数据，也可以在节点下面创建子节点。<br>这些操作后面我们来实操一下。<br><img src=\"https://javaguide.cn/assets/znode-structure.19119dbd.png\"></p>\n<h2 id=\"3-2-znode（数据节点）\"><a href=\"#3-2-znode（数据节点）\" class=\"headerlink\" title=\"3.2 znode（数据节点）\"></a>3.2 znode（数据节点）</h2><p>介绍了ZooKeeper树形数据模型之后，我们知道每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最小单元。你要存放的数据就放在上面，是你使用ZooKeeper过程中经常需要接触到的一个概念。</p>\n<h3 id=\"3-2-1-znode的4中类型\"><a href=\"#3-2-1-znode的4中类型\" class=\"headerlink\" title=\"3.2.1 znode的4中类型\"></a>3.2.1 znode的4中类型</h3><p>一般我们将znode分为4大类：</p>\n<ul>\n<li><strong>持久（PERSISTENT）节点</strong>：一旦创建就一直存在即使ZooKeeper集群宕机，直到将其删除。</li>\n<li><strong>临时（EPHEMERAL）节点</strong>：临时结点的生命周期是与<strong>客户端会话（session）</strong>绑定的，<strong>会话消失则结点消失</strong>。并且<strong>临时结点只能做叶子结点</strong>，不能创建子节点。</li>\n<li><strong>持久顺序（PERSISTENT_SEQUENTIAL）节点</strong>：除了具有持久（PERSISTENT）节点的特性之外，子节点的名称还具有顺序性。比如<code>/node1/00000000001</code>、<code>/node/00000000002</code>。</li>\n<li><strong>临时顺序（EPHEMERAL_SEQUENTIAL）节点</strong>：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。</li>\n</ul>\n<h3 id=\"3-2-2-znode数据结构\"><a href=\"#3-2-2-znode数据结构\" class=\"headerlink\" title=\"3.2.2 znode数据结构\"></a>3.2.2 znode数据结构</h3><p>每个znode由2部分组成：</p>\n<ul>\n<li><strong>stat</strong>：状态信息。</li>\n<li><strong>data</strong>：节点存放的数据的具体内容。</li>\n</ul>\n<p>如下所示，我通过ZooKeeper的get命令来获取根目录下violet节点的内容。（get命令在下面会详细介绍哟）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sh\">[zk: 127.0.0.1:2181(CONNECTED) 6] get /violet<br><span class=\"hljs-comment\"># 该数据节点关联的数据内容为空</span><br>null<br><span class=\"hljs-comment\"># 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出</span><br>cZxid = 0x2<br>ctime = Tue Nov 27 18:05:34 CST 2022<br>mZxid = 0x2<br>mtime = Tue Nov 27 18:05:34 CST 2022<br>pZxid = 0x3<br>cversion = 1<br>dataVersion = 0<br>aclVersion = 0<br>ephemeralOwner = 0x0<br>dataLength = 0<br>numChildren = 1<br></code></pre></div></td></tr></table></figure>\n\n<p>Stat类中包含了一个数据节点的所有状态信息的字段，包括事务ID-cZxid、节点创建时间-ctime和子节点个数-numChidren等等。</p>\n<p>下面我们来看一下每个znode状态信息究竟代表的是什么吧！（下面的内容来源于《从Paxos到Zookeeper  分布式一致性原理与实践》，因为松松也不是特别清楚，要学会参考资料哟）：</p>\n<table>\n<thead>\n<tr>\n<th><strong>znode状态信息</strong></th>\n<th><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cZxid</td>\n<td>create ZXID，即该数据节点被创建时的事务id</td>\n</tr>\n<tr>\n<td>ctime</td>\n<td>create time, 即该节点的创建时间</td>\n</tr>\n<tr>\n<td>mZxid</td>\n<td>modified ZXID，即该节点最终一次更新时的事务id</td>\n</tr>\n<tr>\n<td>mtime</td>\n<td>modified time，即该节点最后一次的更新时间</td>\n</tr>\n<tr>\n<td>pZxid</td>\n<td>该节点的子节点列表最后一次修改时的事务id，只有子节点列表变更才会更新pZxid，子节点内容变更不会更新</td>\n</tr>\n<tr>\n<td>cversion</td>\n<td>子节点版本号，当前节点的子节点每次变化时值增加1</td>\n</tr>\n<tr>\n<td>dataVersion</td>\n<td>数据节点内容版本号，节点创建时为0，每更新一次节点内容（不管内容有无变化）该版本号的值增加1</td>\n</tr>\n<tr>\n<td>aclVersion</td>\n<td>节点的ACL版本号，表示该节点ACL信息变更次数</td>\n</tr>\n<tr>\n<td>ephemeralOwner</td>\n<td>创建该临时节点的会话的sessionid：如果当前节点为持久节点，则ephemeralOwner=0</td>\n</tr>\n<tr>\n<td>dataLength</td>\n<td>数据节点内容长度</td>\n</tr>\n<tr>\n<td>numChildren</td>\n<td>当前节点的子节点个数</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-3-版本（version）\"><a href=\"#3-3-版本（version）\" class=\"headerlink\" title=\"3.3 版本（version）\"></a>3.3 版本（version）</h2><p>在前面我们已经提到，对应每个znode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个znode的三个相关的版本：</p>\n<ul>\n<li><strong>dataVersion</strong>：当前znode节点的版本号。</li>\n<li><strong>cversion</strong>：当前znode子节点的版本。</li>\n<li><strong>aclVersion</strong>：当前znode的ACL的版本号。</li>\n</ul>\n<h2 id=\"3-4-ACL（权限控制）\"><a href=\"#3-4-ACL（权限控制）\" class=\"headerlink\" title=\"3.4 ACL（权限控制）\"></a>3.4 ACL（权限控制）</h2><p>ZooKeeper采用ACL（AccessControlLists）策略来进行权限控制，类似于UNIX文件系统的权限控制。</p>\n<p>对于znode操作的权限，ZooKeeper提供了以下5种：</p>\n<ul>\n<li><strong>CREATE</strong>：能创建子节点</li>\n<li><strong>READ</strong>：能获取节点数据和列出其子节点</li>\n<li><strong>WRITE</strong>：能设置/更新节点数据</li>\n<li><strong>DELETE</strong>：能删除子节点</li>\n<li><strong>ADMIN</strong>: 能设置节点ACL的权限</li>\n</ul>\n<p>其中尤其需要注意的是， CREATE和DELETE这两种权限都是针对子节点的权限控制。</p>\n<p>对于身份认证，提供了以下几种方式：</p>\n<ul>\n<li><strong>world</strong>：默认方式，所有用户都可无条件访问。</li>\n<li><strong>auth</strong>：不适用任何id，代表任何已认证的用户。</li>\n<li><strong>digest</strong>：用户名：密码认证方式：username:password。</li>\n<li><strong>ip</strong>：对指定ip进行限制。</li>\n</ul>\n<h2 id=\"3-5-Watcher（事件监听器）\"><a href=\"#3-5-Watcher（事件监听器）\" class=\"headerlink\" title=\"3.5 Watcher（事件监听器）\"></a>3.5 Watcher（事件监听器）</h2><p>Watcher（事件监听器），是ZooKeeper中的一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知感兴趣的客户端上去，该机制是ZooKeeper实现分布式协调服务的重要特性。<br><img src=\"https://javaguide.cn/assets/watche%E6%9C%BA%E5%88%B6.f523bd89.png\"><br>王之怒吼👿：非常有用的一个特性，都拿出小本本记好了，后面用到ZooKeeper基本离不开Watcher（事件监听）机制。</p>\n<h2 id=\"3-6-会话（Session）\"><a href=\"#3-6-会话（Session）\" class=\"headerlink\" title=\"3.6 会话（Session）\"></a>3.6 会话（Session）</h2><p>Session 可以看做是ZooKeeper服务器与客户端之间的一个TCP长连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZooKeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watcher事件通知。</p>\n<p>Session有一个属性叫作：sessionTimeout，sessionTimeout代表会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话依然有效。</p>\n<p>另外，在为客户端创建会话之前，服务端首先会为每个客户端都分配一个sessionID。由于sessionID是ZooKeeper会话的一个重要标识，许多与会话相关的运行机制都是基于这个sessionID的，因此，无论是哪台服务器为客户端分配的sessionID，都务必保证全局唯一。</p>\n<h2 id=\"4-ZooKeeper集群\"><a href=\"#4-ZooKeeper集群\" class=\"headerlink\" title=\"4. ZooKeeper集群\"></a>4. ZooKeeper集群</h2><p>为了保证高可用，最好是以集群形态来部署ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么ZooKeeper本身仍然是可用的。通常3台服务器就可以构成一个ZooKeeper集群了。ZooKeeper官方提供的架构图就是一个ZooKeeper集群整体对外提供服务。<br><img src=\"https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4.6fdcc61e.png\"><br>上图中每一个Server代表一个安装ZooKeeper服务的服务器。组成ZooKeeper服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都保持着通信。集群间通过ZAB协议（ZooKeeper Atomic Broadcast）来保持数据的一致性。</p>\n<p><strong>最典型集群模式</strong>：**Master/Slave模式（主备模式）。在这种模式中，通常Master服务器作为主服务器提供写服务，其他的Slave服务器从服务器通过异步复制的方式获取Master服务器最新的数据提供读服务。</p>\n<h3 id=\"4-1-ZooKeeper集群角色\"><a href=\"#4-1-ZooKeeper集群角色\" class=\"headerlink\" title=\"4.1 ZooKeeper集群角色\"></a>4.1 ZooKeeper集群角色</h3><p>但是，在ZooKeeper中没有选择传统的Master/Slave概念，而是引入了Leader、Follower和Observer三种角色。如下图所示<br><img src=\"https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.ffff8ef5.png\"><br>ZooKeeper集群中的所有机器通过一个Leader<strong>选举过程</strong>来选定一台称为”Leader”的机器，Leader既可以为客户端提供写服务又能提供读服务。除了Leader外，<strong>Follower</strong>和<strong>Observer</strong>都只能提供读服务。Follower和Observer唯一的区别在于Observer机器不参与Leader的选举过程，也不参与写操作的”过半写成功”策略，因此Observer机器可以在不影响写性能的情况下提升集群的读性能。</p>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Leader</td>\n<td>为客户提供读和写的服务，负责投票的发起和决议，更新系统状态。</td>\n</tr>\n<tr>\n<td>Follower</td>\n<td>为客户端提供读服务，如果是写服务则转发给Leader。参与选举过程中的投票。</td>\n</tr>\n<tr>\n<td>Observer</td>\n<td>为客户端提供读服务，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与”过半写成功”策略。在不影响写性能的情况下提升集群的读性能。此角色于ZooKeeper3.3系列新增的角色。</td>\n</tr>\n</tbody></table>\n<p>当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，就会进入Leader选举过程，这个过程会选举产生新的Leader服务器。</p>\n<p>这个过程大概是这样子的：</p>\n<ol>\n<li>Leader election在（选举阶段）：节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准leader。</li>\n<li>Discovery（发现阶段）：在这个阶段，followers跟准leader进行通信，同步followers最近接收的事务提议。</li>\n<li>Synchronization（同步阶段）：同步阶段主要是利用leader前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后准leader才会成为真正的leader。</li>\n<li>Broadcast（广播阶段）：到了这个阶段，ZooKeeper集群才能正式对外提供事务服务，并且leader可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。</li>\n</ol>\n<h3 id=\"4-2-ZooKeeper集群中的服务器状态\"><a href=\"#4-2-ZooKeeper集群中的服务器状态\" class=\"headerlink\" title=\"4.2 ZooKeeper集群中的服务器状态\"></a>4.2 ZooKeeper集群中的服务器状态</h3><ul>\n<li><strong>LOOKING</strong>：寻找Leader。</li>\n<li><strong>LEADING</strong>：Leader状态，对应的节点为Leader。</li>\n<li><strong>FOLLOWING</strong>：Follower状态，对应的节点为Follower。</li>\n<li><strong>OBSERVING</strong>：Observer状态，对应节点为Observer，该节点不参与Leader选举。</li>\n</ul>\n<h3 id=\"4-3-ZooKeeper集群为啥最好是奇数台？\"><a href=\"#4-3-ZooKeeper集群为啥最好是奇数台？\" class=\"headerlink\" title=\"4.3 ZooKeeper集群为啥最好是奇数台？\"></a>4.3 ZooKeeper集群为啥最好是奇数台？</h3><p>ZooKeeper集群在宕掉几个ZooKeeper服务器之后，如果剩下的ZooKeeper服务器个数大于宕掉的个数的话整个ZooKeeper才依然可用。假如我们的集群中有n台ZooKeeper服务器，那么也就是剩下的服务数必须大于n/2。先说一下结论，2n和2n-1的容忍度是一样的，都是n-1，大家可以先自己仔细想一想。</p>\n<p>比如：假如我们有3台，那么最大允许宕掉1台ZooKeeper服务器，如果我们有4台的的时候也同样只允许宕掉1台。 假如我们有5台，那么最大允许宕掉2台ZooKeeper服务器，如果我们有6台的的时候也同样只允许宕掉2台。</p>\n<p>综上，何必增加那一个不必要的ZooKeeper服务器呢？</p>\n<h3 id=\"4-4-ZooKeeper选举的过半机制防止脑裂\"><a href=\"#4-4-ZooKeeper选举的过半机制防止脑裂\" class=\"headerlink\" title=\"4.4 ZooKeeper选举的过半机制防止脑裂\"></a>4.4 ZooKeeper选举的过半机制防止脑裂</h3><h5 id=\"何为集群脑裂？\"><a href=\"#何为集群脑裂？\" class=\"headerlink\" title=\"何为集群脑裂？\"></a>何为集群脑裂？</h5>","site":{"data":{}},"wordcount":6439,"excerpt":"","more":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言<br/></h1><p>在此刻的我并不知道zookeeper是什么，我听到zookeeper的第一感觉就是这家伙是啥啊，对的，前言就这么短，因为我也不知道它是啥，也没怎么用。</p>\n<h1 id=\"2-ZooKeeper介绍\"><a href=\"#2-ZooKeeper介绍\" class=\"headerlink\" title=\"2. ZooKeeper介绍\"></a>2. ZooKeeper介绍<br/></h1><h2 id=\"2-1-ZooKeeper名字的由来\"><a href=\"#2-1-ZooKeeper名字的由来\" class=\"headerlink\" title=\"2.1 ZooKeeper名字的由来\"></a>2.1 ZooKeeper名字的由来</h2><p>学习一样东西的时候，个人觉得最好是先了解它是怎么出现在人们眼前的，然后出现了之后是怎么慢慢地被人们使用的，使用后怎样被人们慢慢扩展的。<br>这里介绍一下它的由来（摘自《从Paxos到Zookeeper  分布式一致性原理与实践 [倪超著][电子工业出版社]》）：</p>\n<blockquote>\n<p>ZooKeeper最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。关于 “ZooKeeper” 这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目），雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 Raghu Ramakrishnan 开玩笑地说：”再这样下去，我们这儿就变成动物园了！”此话一出，大家纷纷表示就叫动物园管理员吧——因为各个以动物园命名的分布式组件放在一起，雅虎整个分布式系统看上去就像一个大型的动物园了，而ZooKeeper正好要用来进行分布式环境的协调——于是，ZooKeeper的名字也就由此诞生了。</p>\n</blockquote>\n<p>看完ZooKeeper名字的由来是不是有点想笑，传奇的分布式协调框架就由此被命名了，这名字像是不要钱想的一样😂不过也能理解，开发人员都是可爱的😆</p>\n<h2 id=\"2-2-ZooKeeper概述\"><a href=\"#2-2-ZooKeeper概述\" class=\"headerlink\" title=\"2.2 ZooKeeper概述\"></a>2.2 ZooKeeper概述</h2><p>ZooKeeper他是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p>\n<blockquote>\n<p>原语：一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。</p>\n</blockquote>\n<p>ZooKeeper为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调、通知、集群管理、Master选举、分布式锁和分布式队列等功能。</p>\n<p>此外，ZooKeeper将数据保存在内存中，性能是非常棒的。在”读”多于”写”的应用程序中尤其地高性能，因为”写”会导致所有的服务器进行数据同步。(“读”多于”写”是协调服务的典型场景)。</p>\n<h2 id=\"2-3-ZooKeeper特点\"><a href=\"#2-3-ZooKeeper特点\" class=\"headerlink\" title=\"2.3 ZooKeeper特点\"></a>2.3 ZooKeeper特点</h2><ul>\n<li><strong>顺序一致性</strong>：从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到ZooKeeper中去。</li>\n<li><strong>原子性</strong>：所有事务的请求处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功地应用了某一个事务，要么都没有应用。</li>\n<li><strong>单一系统映像</strong>：无论客户端连接到哪一个ZooKeeper服务器上，其看到的服务端数据模型都是一致的。</li>\n<li><strong>可靠性</strong>：任何一次更改请求被应用，更改的结果就会被持久化，知道被下一次更改覆盖。</li>\n</ul>\n<h2 id=\"2-4-ZooKeeper典型应用场景\"><a href=\"#2-4-ZooKeeper典型应用场景\" class=\"headerlink\" title=\"2.4 ZooKeeper典型应用场景\"></a>2.4 ZooKeeper典型应用场景</h2><p>ZooKeeper概述中，我们介绍到使用其通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。</p>\n<p>下面选3个典型的应用场景来专门说说(后续更新具体代码逻辑)：</p>\n<ol>\n<li><strong>分布式锁</strong>：通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放。</li>\n<li><strong>命名服务</strong>：可以通过ZooKeeper的顺序节点生成全局唯一ID。</li>\n<li><strong>数据发布/订阅</strong>：通过Watcher机制可以很方便地实现数据发布/订阅。当你将数据发布到ZooKeeper被监听的节点上，其他机器可通过监听ZooKeeper上的节点的变化来实现配置的动态更新。</li>\n</ol>\n<p>实际上，这些功能的实现基本上都得益于ZooKeeper可以保存数据的功能，但是ZooKeeper不适合保存大量数据，这一点需要注意一下😤</p>\n<h1 id=\"3-ZooKeeper的功能\"><a href=\"#3-ZooKeeper的功能\" class=\"headerlink\" title=\"3. ZooKeeper的功能\"></a>3. ZooKeeper的功能<br/></h1><p>友情提示👿：拿出小本本，下面的内容非常重要啊哈</p>\n<h2 id=\"3-1-Data-model（数据模型）\"><a href=\"#3-1-Data-model（数据模型）\" class=\"headerlink\" title=\"3.1 Data model（数据模型）\"></a>3.1 Data model（数据模型）</h2><p>ZooKeeper数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数字可以说是数字、字符串或者是二进制序列。并且，每个节点还可以拥有N个子节点，最上层是根节点使用”/“来表示。每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最先单元。并且，每个znode都只有一个唯一的路径标识。</p>\n<p>强调一句👿：<strong>ZooKeeper主要是用来协调服务，而不是用来存储业务数据的，所以，不要放比较大的数据在znode上，ZooKeeper给出的上线是每个结点的数据大小最大是1M。</strong></p>\n<p>从下图可以更直观地看出：ZooKeeper节点路径标识方式和Unix文件系统路径非常相似，都是由一系列使用”/“进行分割的路径表示，开发人员可以想这个结点中写入数据，也可以在节点下面创建子节点。<br>这些操作后面我们来实操一下。<br><img src=\"https://javaguide.cn/assets/znode-structure.19119dbd.png\"></p>\n<h2 id=\"3-2-znode（数据节点）\"><a href=\"#3-2-znode（数据节点）\" class=\"headerlink\" title=\"3.2 znode（数据节点）\"></a>3.2 znode（数据节点）</h2><p>介绍了ZooKeeper树形数据模型之后，我们知道每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最小单元。你要存放的数据就放在上面，是你使用ZooKeeper过程中经常需要接触到的一个概念。</p>\n<h3 id=\"3-2-1-znode的4中类型\"><a href=\"#3-2-1-znode的4中类型\" class=\"headerlink\" title=\"3.2.1 znode的4中类型\"></a>3.2.1 znode的4中类型</h3><p>一般我们将znode分为4大类：</p>\n<ul>\n<li><strong>持久（PERSISTENT）节点</strong>：一旦创建就一直存在即使ZooKeeper集群宕机，直到将其删除。</li>\n<li><strong>临时（EPHEMERAL）节点</strong>：临时结点的生命周期是与<strong>客户端会话（session）</strong>绑定的，<strong>会话消失则结点消失</strong>。并且<strong>临时结点只能做叶子结点</strong>，不能创建子节点。</li>\n<li><strong>持久顺序（PERSISTENT_SEQUENTIAL）节点</strong>：除了具有持久（PERSISTENT）节点的特性之外，子节点的名称还具有顺序性。比如<code>/node1/00000000001</code>、<code>/node/00000000002</code>。</li>\n<li><strong>临时顺序（EPHEMERAL_SEQUENTIAL）节点</strong>：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。</li>\n</ul>\n<h3 id=\"3-2-2-znode数据结构\"><a href=\"#3-2-2-znode数据结构\" class=\"headerlink\" title=\"3.2.2 znode数据结构\"></a>3.2.2 znode数据结构</h3><p>每个znode由2部分组成：</p>\n<ul>\n<li><strong>stat</strong>：状态信息。</li>\n<li><strong>data</strong>：节点存放的数据的具体内容。</li>\n</ul>\n<p>如下所示，我通过ZooKeeper的get命令来获取根目录下violet节点的内容。（get命令在下面会详细介绍哟）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[zk: 127.0.0.1:2181(CONNECTED) 6] get /violet<br><span class=\"hljs-comment\"># 该数据节点关联的数据内容为空</span><br>null<br><span class=\"hljs-comment\"># 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出</span><br>cZxid = 0x2<br>ctime = Tue Nov 27 18:05:34 CST 2022<br>mZxid = 0x2<br>mtime = Tue Nov 27 18:05:34 CST 2022<br>pZxid = 0x3<br>cversion = 1<br>dataVersion = 0<br>aclVersion = 0<br>ephemeralOwner = 0x0<br>dataLength = 0<br>numChildren = 1<br></code></pre></td></tr></table></figure>\n\n<p>Stat类中包含了一个数据节点的所有状态信息的字段，包括事务ID-cZxid、节点创建时间-ctime和子节点个数-numChidren等等。</p>\n<p>下面我们来看一下每个znode状态信息究竟代表的是什么吧！（下面的内容来源于《从Paxos到Zookeeper  分布式一致性原理与实践》，因为松松也不是特别清楚，要学会参考资料哟）：</p>\n<table>\n<thead>\n<tr>\n<th><strong>znode状态信息</strong></th>\n<th><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cZxid</td>\n<td>create ZXID，即该数据节点被创建时的事务id</td>\n</tr>\n<tr>\n<td>ctime</td>\n<td>create time, 即该节点的创建时间</td>\n</tr>\n<tr>\n<td>mZxid</td>\n<td>modified ZXID，即该节点最终一次更新时的事务id</td>\n</tr>\n<tr>\n<td>mtime</td>\n<td>modified time，即该节点最后一次的更新时间</td>\n</tr>\n<tr>\n<td>pZxid</td>\n<td>该节点的子节点列表最后一次修改时的事务id，只有子节点列表变更才会更新pZxid，子节点内容变更不会更新</td>\n</tr>\n<tr>\n<td>cversion</td>\n<td>子节点版本号，当前节点的子节点每次变化时值增加1</td>\n</tr>\n<tr>\n<td>dataVersion</td>\n<td>数据节点内容版本号，节点创建时为0，每更新一次节点内容（不管内容有无变化）该版本号的值增加1</td>\n</tr>\n<tr>\n<td>aclVersion</td>\n<td>节点的ACL版本号，表示该节点ACL信息变更次数</td>\n</tr>\n<tr>\n<td>ephemeralOwner</td>\n<td>创建该临时节点的会话的sessionid：如果当前节点为持久节点，则ephemeralOwner=0</td>\n</tr>\n<tr>\n<td>dataLength</td>\n<td>数据节点内容长度</td>\n</tr>\n<tr>\n<td>numChildren</td>\n<td>当前节点的子节点个数</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-3-版本（version）\"><a href=\"#3-3-版本（version）\" class=\"headerlink\" title=\"3.3 版本（version）\"></a>3.3 版本（version）</h2><p>在前面我们已经提到，对应每个znode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个znode的三个相关的版本：</p>\n<ul>\n<li><strong>dataVersion</strong>：当前znode节点的版本号。</li>\n<li><strong>cversion</strong>：当前znode子节点的版本。</li>\n<li><strong>aclVersion</strong>：当前znode的ACL的版本号。</li>\n</ul>\n<h2 id=\"3-4-ACL（权限控制）\"><a href=\"#3-4-ACL（权限控制）\" class=\"headerlink\" title=\"3.4 ACL（权限控制）\"></a>3.4 ACL（权限控制）</h2><p>ZooKeeper采用ACL（AccessControlLists）策略来进行权限控制，类似于UNIX文件系统的权限控制。</p>\n<p>对于znode操作的权限，ZooKeeper提供了以下5种：</p>\n<ul>\n<li><strong>CREATE</strong>：能创建子节点</li>\n<li><strong>READ</strong>：能获取节点数据和列出其子节点</li>\n<li><strong>WRITE</strong>：能设置/更新节点数据</li>\n<li><strong>DELETE</strong>：能删除子节点</li>\n<li><strong>ADMIN</strong>: 能设置节点ACL的权限</li>\n</ul>\n<p>其中尤其需要注意的是， CREATE和DELETE这两种权限都是针对子节点的权限控制。</p>\n<p>对于身份认证，提供了以下几种方式：</p>\n<ul>\n<li><strong>world</strong>：默认方式，所有用户都可无条件访问。</li>\n<li><strong>auth</strong>：不适用任何id，代表任何已认证的用户。</li>\n<li><strong>digest</strong>：用户名：密码认证方式：username:password。</li>\n<li><strong>ip</strong>：对指定ip进行限制。</li>\n</ul>\n<h2 id=\"3-5-Watcher（事件监听器）\"><a href=\"#3-5-Watcher（事件监听器）\" class=\"headerlink\" title=\"3.5 Watcher（事件监听器）\"></a>3.5 Watcher（事件监听器）</h2><p>Watcher（事件监听器），是ZooKeeper中的一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知感兴趣的客户端上去，该机制是ZooKeeper实现分布式协调服务的重要特性。<br><img src=\"https://javaguide.cn/assets/watche%E6%9C%BA%E5%88%B6.f523bd89.png\"><br>王之怒吼👿：非常有用的一个特性，都拿出小本本记好了，后面用到ZooKeeper基本离不开Watcher（事件监听）机制。</p>\n<h2 id=\"3-6-会话（Session）\"><a href=\"#3-6-会话（Session）\" class=\"headerlink\" title=\"3.6 会话（Session）\"></a>3.6 会话（Session）</h2><p>Session 可以看做是ZooKeeper服务器与客户端之间的一个TCP长连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZooKeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watcher事件通知。</p>\n<p>Session有一个属性叫作：sessionTimeout，sessionTimeout代表会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话依然有效。</p>\n<p>另外，在为客户端创建会话之前，服务端首先会为每个客户端都分配一个sessionID。由于sessionID是ZooKeeper会话的一个重要标识，许多与会话相关的运行机制都是基于这个sessionID的，因此，无论是哪台服务器为客户端分配的sessionID，都务必保证全局唯一。</p>\n<h2 id=\"4-ZooKeeper集群\"><a href=\"#4-ZooKeeper集群\" class=\"headerlink\" title=\"4. ZooKeeper集群\"></a>4. ZooKeeper集群</h2><p>为了保证高可用，最好是以集群形态来部署ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么ZooKeeper本身仍然是可用的。通常3台服务器就可以构成一个ZooKeeper集群了。ZooKeeper官方提供的架构图就是一个ZooKeeper集群整体对外提供服务。<br><img src=\"https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4.6fdcc61e.png\"><br>上图中每一个Server代表一个安装ZooKeeper服务的服务器。组成ZooKeeper服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都保持着通信。集群间通过ZAB协议（ZooKeeper Atomic Broadcast）来保持数据的一致性。</p>\n<p><strong>最典型集群模式</strong>：**Master/Slave模式（主备模式）。在这种模式中，通常Master服务器作为主服务器提供写服务，其他的Slave服务器从服务器通过异步复制的方式获取Master服务器最新的数据提供读服务。</p>\n<h3 id=\"4-1-ZooKeeper集群角色\"><a href=\"#4-1-ZooKeeper集群角色\" class=\"headerlink\" title=\"4.1 ZooKeeper集群角色\"></a>4.1 ZooKeeper集群角色</h3><p>但是，在ZooKeeper中没有选择传统的Master/Slave概念，而是引入了Leader、Follower和Observer三种角色。如下图所示<br><img src=\"https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.ffff8ef5.png\"><br>ZooKeeper集群中的所有机器通过一个Leader<strong>选举过程</strong>来选定一台称为”Leader”的机器，Leader既可以为客户端提供写服务又能提供读服务。除了Leader外，<strong>Follower</strong>和<strong>Observer</strong>都只能提供读服务。Follower和Observer唯一的区别在于Observer机器不参与Leader的选举过程，也不参与写操作的”过半写成功”策略，因此Observer机器可以在不影响写性能的情况下提升集群的读性能。</p>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Leader</td>\n<td>为客户提供读和写的服务，负责投票的发起和决议，更新系统状态。</td>\n</tr>\n<tr>\n<td>Follower</td>\n<td>为客户端提供读服务，如果是写服务则转发给Leader。参与选举过程中的投票。</td>\n</tr>\n<tr>\n<td>Observer</td>\n<td>为客户端提供读服务，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与”过半写成功”策略。在不影响写性能的情况下提升集群的读性能。此角色于ZooKeeper3.3系列新增的角色。</td>\n</tr>\n</tbody></table>\n<p>当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，就会进入Leader选举过程，这个过程会选举产生新的Leader服务器。</p>\n<p>这个过程大概是这样子的：</p>\n<ol>\n<li>Leader election在（选举阶段）：节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准leader。</li>\n<li>Discovery（发现阶段）：在这个阶段，followers跟准leader进行通信，同步followers最近接收的事务提议。</li>\n<li>Synchronization（同步阶段）：同步阶段主要是利用leader前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后准leader才会成为真正的leader。</li>\n<li>Broadcast（广播阶段）：到了这个阶段，ZooKeeper集群才能正式对外提供事务服务，并且leader可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。</li>\n</ol>\n<h3 id=\"4-2-ZooKeeper集群中的服务器状态\"><a href=\"#4-2-ZooKeeper集群中的服务器状态\" class=\"headerlink\" title=\"4.2 ZooKeeper集群中的服务器状态\"></a>4.2 ZooKeeper集群中的服务器状态</h3><ul>\n<li><strong>LOOKING</strong>：寻找Leader。</li>\n<li><strong>LEADING</strong>：Leader状态，对应的节点为Leader。</li>\n<li><strong>FOLLOWING</strong>：Follower状态，对应的节点为Follower。</li>\n<li><strong>OBSERVING</strong>：Observer状态，对应节点为Observer，该节点不参与Leader选举。</li>\n</ul>\n<h3 id=\"4-3-ZooKeeper集群为啥最好是奇数台？\"><a href=\"#4-3-ZooKeeper集群为啥最好是奇数台？\" class=\"headerlink\" title=\"4.3 ZooKeeper集群为啥最好是奇数台？\"></a>4.3 ZooKeeper集群为啥最好是奇数台？</h3><p>ZooKeeper集群在宕掉几个ZooKeeper服务器之后，如果剩下的ZooKeeper服务器个数大于宕掉的个数的话整个ZooKeeper才依然可用。假如我们的集群中有n台ZooKeeper服务器，那么也就是剩下的服务数必须大于n/2。先说一下结论，2n和2n-1的容忍度是一样的，都是n-1，大家可以先自己仔细想一想。</p>\n<p>比如：假如我们有3台，那么最大允许宕掉1台ZooKeeper服务器，如果我们有4台的的时候也同样只允许宕掉1台。 假如我们有5台，那么最大允许宕掉2台ZooKeeper服务器，如果我们有6台的的时候也同样只允许宕掉2台。</p>\n<p>综上，何必增加那一个不必要的ZooKeeper服务器呢？</p>\n<h3 id=\"4-4-ZooKeeper选举的过半机制防止脑裂\"><a href=\"#4-4-ZooKeeper选举的过半机制防止脑裂\" class=\"headerlink\" title=\"4.4 ZooKeeper选举的过半机制防止脑裂\"></a>4.4 ZooKeeper选举的过半机制防止脑裂</h3><h5 id=\"何为集群脑裂？\"><a href=\"#何为集群脑裂？\" class=\"headerlink\" title=\"何为集群脑裂？\"></a>何为集群脑裂？</h5>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl165j0p500005kjha07t8wj8","category_id":"cl165j0pb00025kjh8x8mc80q","_id":"cl165j0pe00075kjhbvoz74uf"},{"post_id":"cl165j0pa00015kjhcsfm0uj3","category_id":"cl165j0pd00045kjh8l322h1q","_id":"cl165j0pf00095kjh7ei0fc48"}],"PostTag":[{"post_id":"cl165j0p500005kjha07t8wj8","tag_id":"cl165j0pd00035kjhbx8ra6xu","_id":"cl165j0pe00065kjhgfoo42md"},{"post_id":"cl165j0pa00015kjhcsfm0uj3","tag_id":"cl165j0pe00055kjhhc0aa6t4","_id":"cl165j0pf00085kjh46puh45q"}],"Tag":[{"name":"快速排序","_id":"cl165j0pd00035kjhbx8ra6xu"},{"name":"zookeeper","_id":"cl165j0pe00055kjhhc0aa6t4"}]}}