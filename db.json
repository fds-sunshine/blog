{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"340499890fcdfc2fcb03e125ef0962f7462fe87c","modified":1648002651942},{"_id":"source/_posts/violet.md","hash":"2079ce42c3c41c04f989cdc897818eb7b5ff2115","modified":1648102785471},{"_id":"source/_posts/acwing/quicksort.md","hash":"acfeedea4734fd25f141eba1fba8399d1ab60f36","modified":1648109225735},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1648002651964},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1648002651965},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1648002651943},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1648002651943},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1648002651943},{"_id":"themes/fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1648002651945},{"_id":"themes/fluid/LICENSE","hash":"694fb3659a4331dd752bd92e4248623bff8617cd","modified":1648002651945},{"_id":"themes/fluid/README.md","hash":"399804e1359046480fe9e1908c26ba49809aaf9b","modified":1648002651945},{"_id":"themes/fluid/README_en.md","hash":"2b47ed68ec888dcc34fa6aad9ce95aeba6744fec","modified":1648002651945},{"_id":"themes/fluid/_config.yml","hash":"825054312c5afab18a99bda729607a5a9c3000d5","modified":1648108816816},{"_id":"themes/fluid/aa","hash":"d537d9d82e5d05dbfa06f321372eb0b1f72efe0b","modified":1648107696646},{"_id":"themes/fluid/package.json","hash":"40e3a3fea5dedbc09e859a2ea6ce271004a57e87","modified":1648002651953},{"_id":"themes/fluid/languages/de.yml","hash":"288f649c2c2314eb610693b18853ee74f0541e87","modified":1648002651946},{"_id":"themes/fluid/languages/en.yml","hash":"31f2867619a768606166778d4ee51f3d00ac33a0","modified":1648002651946},{"_id":"themes/fluid/languages/eo.yml","hash":"2c1c481d9af116e79fe55a0aa0bdbb143a97f559","modified":1648002651946},{"_id":"themes/fluid/languages/ja.yml","hash":"dc43be11a300893ebef47283c22f2f946ca21260","modified":1648002651946},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"3b92f4428d66c31610f6cde13b82ee723aff00d2","modified":1648088217044},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"de9b7e729d72eee9327671c3d5df0a607c4c3257","modified":1648002651947},{"_id":"themes/fluid/layout/404.ejs","hash":"79a598e43c40d48b23076361720f1e77df466e41","modified":1648002651947},{"_id":"themes/fluid/layout/about.ejs","hash":"5b6de01c82b14834ab1e67f0a803612f5855f064","modified":1648002651952},{"_id":"themes/fluid/layout/archive.ejs","hash":"7a1e19dec37804927f0d331d7e6c80ed03becd61","modified":1648002651952},{"_id":"themes/fluid/layout/categories.ejs","hash":"e7733779366ff6402615d96d4195f1196fa8351d","modified":1648002651952},{"_id":"themes/fluid/layout/category.ejs","hash":"dd2bd15cbd811d6ea973b6e6a17d99e36151e274","modified":1648002651952},{"_id":"themes/fluid/layout/index.ejs","hash":"bd118b6f7bd882a2ff896a1c4bc7bfa1c7694568","modified":1648002651952},{"_id":"themes/fluid/layout/layout.ejs","hash":"a1cea9b8fe0954d5a8d89941404f31ac344a4f5b","modified":1648002651952},{"_id":"themes/fluid/layout/links.ejs","hash":"76807f949aaa20983b89efc9e6bc39108d022ac3","modified":1648002651953},{"_id":"themes/fluid/layout/page.ejs","hash":"f867e69e563b8ad83054714f73d9173ea050d93b","modified":1648002651953},{"_id":"themes/fluid/layout/post.ejs","hash":"edfeb655895027d15334d009324d27a29926cc94","modified":1648002651953},{"_id":"themes/fluid/layout/tag.ejs","hash":"3a9296eb7181e8b3fb0cdc60cbafc815b98d6f51","modified":1648002651953},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1648002651953},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"beb3474d6f65c1e56700ba872c6a0d0836d4168e","modified":1648002651944},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"78ce211415d502c5a4398d786d5c697d34d868b9","modified":1648002651944},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1648002651944},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1648002651944},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1648002651944},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"18381d03518526d7cefd024a0bdd8d9e7c6440f5","modified":1648002651945},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1648002651945},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"780117f8032df3b52169a387658a13cc025a0e13","modified":1648002651947},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"904971bf3419bec46de416c27dceb39a73063f33","modified":1648002651947},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"a137110fe5c4c13eb189dc53fe270c0d390a97e0","modified":1648002651949},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"9af7ff960a421933169162ea1a2cd7e7577b0ed7","modified":1648002651949},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"b7d5b438e2eeb624aecd86f3b321466834deac11","modified":1648002651949},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"2af4653ed3fefdbcb12c16a6d2fa166d14672845","modified":1648002651950},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1648002651950},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"010b8b5ff2d1ae178cfba83a6c95d6345b053617","modified":1648002651951},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"00cdbf4c5e25a7f0c461ef460ae1af28c29e4712","modified":1648002651951},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"bea21f1b5de61badd6c068080315c201fc80bc36","modified":1648002651951},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"76e6bc368cf46d4103ea9514699e10ec0b9a4b56","modified":1648002651951},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"a70c26e415a27f07f38b9384e7eb48d1f2b30328","modified":1648002651951},{"_id":"themes/fluid/scripts/events/index.js","hash":"91defe82d50a317903411f0b260da0f140f43dc4","modified":1648002651954},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1648002651955},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"cb72e5acfba882a6eacd6cae8db3238bb078737a","modified":1648002651955},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1648002651956},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1648002651956},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"a26549407de10b994d1f6e37ba8fecf9dd4622de","modified":1648002651956},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1648002651956},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1648002651956},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"b6ccfffdee010ebd60cd8cc2386c43db076b6ca1","modified":1648002651956},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"9c01393f446c490c56b6b0d482aaa8d97cc8b717","modified":1648002651957},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1648002651957},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"dac0e08eaa3614a6fd9ddbdfb4584094b1bdb30a","modified":1648002651957},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1648002651957},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1648002651957},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1648002651958},{"_id":"themes/fluid/scripts/tags/note.js","hash":"8020acc2c4bb3a2054e3cb349fac7cd10b79a0be","modified":1648002651958},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1648002651958},{"_id":"themes/fluid/scripts/utils/object.js","hash":"d798779ec79a53ce04b8ac79efd5d064981d95bd","modified":1648002651958},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1648002651958},{"_id":"themes/fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1648002651966},{"_id":"themes/fluid/source/css/main.styl","hash":"bf536db598434c36cc0c752196bfde46e584a92e","modified":1648002651966},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1648002651966},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1648002651967},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1648002651967},{"_id":"themes/fluid/source/js/boot.js","hash":"5264c0d2eb73b4948ee6bcb1bd847a924d906088","modified":1648002651967},{"_id":"themes/fluid/source/js/color-schema.js","hash":"719296a8b6e1b76ec682554fb3dbcc75a2a2d78d","modified":1648002651968},{"_id":"themes/fluid/source/js/events.js","hash":"b019f58951cc02c5fd1863e2e05101254bf2896c","modified":1648086935178},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1648002651968},{"_id":"themes/fluid/source/js/leancloud.js","hash":"9115c754794bfd20e84b61f3beb1ec37773b4c0c","modified":1648002651968},{"_id":"themes/fluid/source/js/local-search.js","hash":"90d7eb35aff2994fa173abeed7ce0c91357f5979","modified":1648002651968},{"_id":"themes/fluid/source/js/plugins.js","hash":"75b1d3e58fdfc5230608a0f7d116e41c93050cef","modified":1648002651968},{"_id":"themes/fluid/source/js/utils.js","hash":"a2da89bb185fcd9de7a834e862b03548f5efcd04","modified":1648002651969},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1648002651969},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1648002651947},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1648002651948},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1648002651948},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1648002651948},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1648002651948},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1648002651948},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"93d47bc528bf1a3d0fe950fc21a2da787e1b7dc9","modified":1648002651948},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"d1e86754c9560f7346200b2aa9a7f715a3fac82b","modified":1648002651949},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"bd2b8843094966dbc96c3768b4858c6e241a59a9","modified":1648002651949},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"d81bfb2f594d597f0e176abc09a76f3f58b98c2e","modified":1648002651949},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"d20f54bf2fd5cd274b4b9c5542eafbfec5120838","modified":1648002651950},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"80cdaa9da8770568af5bb06a66829dddf1d683d2","modified":1648002651950},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"fd1f78287c868ccab78b6244b66e3f9b0968c4a8","modified":1648002651950},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1648002651950},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"842da2fc1c99a3fb887b5e36b76625c9a1b3401a","modified":1648002651951},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"c0da20f9adca2761d370cc6dda013ec1ecbb7710","modified":1648002651954},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"13d8466cd4c98367131b5f3d6a30b3d4ce8de26f","modified":1648002651954},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"12a5fcf2e322a7e7f8184f4c3a1c6708308e1b61","modified":1648005759664},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"af80de29f06b4f64c31fe070a2af292876717ee1","modified":1648002651955},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1648002651955},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"3f2dba4959b27466521de97eff692815650c02b7","modified":1648002651955},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1648002651959},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1648002651959},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1648002651965},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"35179cd560f9919376abdcf99e0d23f20e18e84f","modified":1648002651966},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1648002651960},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"86926a80bf6f39a7f47789b1a8f44b5984b4683f","modified":1648002651960},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"0d6d39709999c8e1786ed64c6f5bbdc4acd21813","modified":1648002651962},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"ed0f3aae95edac702ed497f6e8a76b33f39f8c89","modified":1648002651963},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"6f2a3b8af2793dd831f661c6db0ccbe0a62ccc48","modified":1648002651963},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1648002651963},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"67103d8eb96cd94d185c00011b809eecdb88823a","modified":1648002651963},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"0924e35eff2ec84e2d9e4772abccda452d9463ef","modified":1648002651964},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"4123f77c742d94e903f7196350c830cbccf8669a","modified":1648002651964},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"2eaac14a1af09cf6a1ab24201e182ac2aca40385","modified":1648002651964},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"cd81947721c5aecc1cc8d4658599837701ef8af3","modified":1648002651965},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"10fcf4291b6efd5036214b7dde57ed2e3878fc1a","modified":1648002651965},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1648002651965},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"da823846f0896f16b21c7430f047f7222a89cd10","modified":1648002651960},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"bb9cdde191b9b1287ba19414bab862f30be6a8a0","modified":1648002651960},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"c398892fba1494dd6fd417415076458ed321d34d","modified":1648002651961},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e77f5c5d5da17a7e6241cca0e1d4e8cd07169c64","modified":1648002651961},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1648002651961},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"f770c5c3ee89421e9e3f1313ca5bd07a2448f400","modified":1648002651961},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1648002651961},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e568f308df26465e0432197e8b57384707470f54","modified":1648002651962},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1648002651962},{"_id":"themes/fluid/source/img/default.png","hash":"1eec8e152fbfcc661dc7eeb354498e6b2b88f64e","modified":1648085522455},{"_id":"themes/fluid/source/img/favicon.png","hash":"2aa1743dc823866820bdcd1bfca35efa235dd6ad","modified":1648028864736},{"_id":"public/local-search.xml","hash":"41a8f2621409c11ab930d8fd913006933dd4821a","modified":1648109240079},{"_id":"public/2022/03/23/violet/index.html","hash":"c8d5952e40195eba518dc8b332cde2eaf7255240","modified":1648109240079},{"_id":"public/archives/index.html","hash":"ccffb5ba39ed30c4a99bdcbc4b0db318351d221d","modified":1648109240079},{"_id":"public/archives/2022/index.html","hash":"a0b0e98e58b0463fd1380760abb2b11de83436c8","modified":1648109240079},{"_id":"public/archives/2022/03/index.html","hash":"0b82572710dcd6b585597f5b254482887aaef0c9","modified":1648109240079},{"_id":"public/categories/六月的目标/index.html","hash":"5a89c6a16b704c61d915aa2c99b0e0acf6b7e16b","modified":1648109240079},{"_id":"public/categories/acwing算法基础/index.html","hash":"76af2c566174a0e62b0e271b040b72354602b428","modified":1648109240079},{"_id":"public/index.html","hash":"2f0aea496f1a430643187721eaf08c9d991ce531","modified":1648109240079},{"_id":"public/tags/六月的目标/index.html","hash":"753b188c235cb10334caf52e137a6c0fcfb4d400","modified":1648109240079},{"_id":"public/tags/快速排序/index.html","hash":"be64c5053579fbd277769c94954c4013337d0a5b","modified":1648109240079},{"_id":"public/404.html","hash":"d28395977711eb49a1bbc6cbb1058326ce946839","modified":1648109240079},{"_id":"public/tags/index.html","hash":"c264cd0b4fc292a65b7217a7438310897dd24a16","modified":1648109240079},{"_id":"public/categories/index.html","hash":"b91634c8706bf4e8434a0e50de117ee727be222d","modified":1648109240079},{"_id":"public/links/index.html","hash":"835f934fec24b8ae8f987e2d16243955a116def2","modified":1648109240079},{"_id":"public/2022/03/24/acwing/quicksort/index.html","hash":"fd2edb5591db6dadfd2a8f0638ff453a90befba9","modified":1648109240079},{"_id":"public/CNAME","hash":"340499890fcdfc2fcb03e125ef0962f7462fe87c","modified":1648109240079},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1648109240079},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1648109240079},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1648109240079},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1648109240079},{"_id":"public/img/default.png","hash":"1eec8e152fbfcc661dc7eeb354498e6b2b88f64e","modified":1648109240079},{"_id":"public/img/favicon.png","hash":"2aa1743dc823866820bdcd1bfca35efa235dd6ad","modified":1648109240079},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1648109240079},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1648109240079},{"_id":"public/js/events.js","hash":"41632930eca3e763cc1cf2de0b521e602dc72152","modified":1648109240079},{"_id":"public/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1648109240079},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1648109240079},{"_id":"public/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1648109240079},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1648109240079},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1648109240079},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1648109240079},{"_id":"public/css/main.css","hash":"63bc59b8ca4b03afa2b93883143c349d461b1052","modified":1648109240079}],"Category":[{"name":"六月的目标","_id":"cl14posoh0002tcjh1f16c8ad"},{"name":"acwing算法基础","_id":"cl14posoj0004tcjhfcgh5k6a"}],"Data":[],"Page":[],"Post":[{"title":"六月的目标","date":"2022-03-23T02:32:17.000Z","description":"六月的目标","_content":"\n# 六月的目标\n\n1. Spring Cloud.\n2. JVM.\n3. MySQL\n4. 设计模式.\n5. zookeeper.\n6. redis.\n7. kafka.\n8. RabbitMQ、RocketMQ.\n9. mongoDB.\n10. 读写分离&分库分表.\n11. 并发编程.\n","source":"_posts/violet.md","raw":"---\ntitle: 六月的目标 \ndate: 2022-03-23 10:32:17\ntags: 六月的目标 \ncategory: 六月的目标 \ndescription: 六月的目标\n---\n\n# 六月的目标\n\n1. Spring Cloud.\n2. JVM.\n3. MySQL\n4. 设计模式.\n5. zookeeper.\n6. redis.\n7. kafka.\n8. RabbitMQ、RocketMQ.\n9. mongoDB.\n10. 读写分离&分库分表.\n11. 并发编程.\n","slug":"violet","published":1,"updated":"2022-03-24T06:19:45.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl14posob0000tcjh8j60djbu","content":"<h1 id=\"六月的目标\"><a href=\"#六月的目标\" class=\"headerlink\" title=\"六月的目标\"></a>六月的目标</h1><ol>\n<li>Spring Cloud.</li>\n<li>JVM.</li>\n<li>MySQL</li>\n<li>设计模式.</li>\n<li>zookeeper.</li>\n<li>redis.</li>\n<li>kafka.</li>\n<li>RabbitMQ、RocketMQ.</li>\n<li>mongoDB.</li>\n<li>读写分离&amp;分库分表.</li>\n<li>并发编程.</li>\n</ol>\n","site":{"data":{}},"wordcount":98,"excerpt":"","more":"<h1 id=\"六月的目标\"><a href=\"#六月的目标\" class=\"headerlink\" title=\"六月的目标\"></a>六月的目标</h1><ol>\n<li>Spring Cloud.</li>\n<li>JVM.</li>\n<li>MySQL</li>\n<li>设计模式.</li>\n<li>zookeeper.</li>\n<li>redis.</li>\n<li>kafka.</li>\n<li>RabbitMQ、RocketMQ.</li>\n<li>mongoDB.</li>\n<li>读写分离&amp;分库分表.</li>\n<li>并发编程.</li>\n</ol>\n"},{"title":"快速排序","date":"2022-03-24T02:58:50.000Z","description":"学习快排思想以及代码实现。","_content":"# 快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)\n快速排序是从冒泡排序演变而来的算法，但是它比快排要高效得多，所以我们把它叫做快速排序😂\n快速排序之所以快，是因为它用到了一个思想😮 ---------> 分治(不懂的可以百度哟😁)\n\n那么快排是怎么实现的呢?让我们来看一下下面的图文解释:\n#### 1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:\n ![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/1.png)\n#### 2. 然后我们把**小于分界点**的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把**大于分界点**的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在**分界点**左边的元素**小于或等于**分界点, 在**分界点**右边的元素**大于或等于**分界点: \n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/2.png)\n#### 3. 利用**分界点**分好两边的元素后,得到下面的三个部分, 我们分别对**左边的部分**与**右边的部分**分别进行1与2的操作, 最后便可以排好序了(下图演示):\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/3.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/4.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/5.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/6.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/7.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/8.png)\n> 到这里, 这个数组便已经排好序了\n#### 4. 这时候就进入我们紧张刺激的代码环节:\n##### 4.1 Java代码\n```java\n    public void quick_sort(int[] arr, int l, int r){\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(i < x);\n        //3.确定分界点右边的元素\n        do j--; while(j > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        //有代码整洁洁癖的童鞋可以把if里面的代码写成一个方法,然后在进行调用\n        if(i < j) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n\n##### 4.2 C代码\n```c\nvoid quick_sort(int arr[], int l, int r)\n    {\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(arr[i] < x);\n        //3.确定分界点右边的元素\n        do j--; while(arr[j] > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        if(i < j) \n        {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        };\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n\n##### 4.3 C++代码\n```c++\nvoid quick_sort(int arr[], int l, int r)\n    {\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(arr[i] < x);\n        //3.确定分界点右边的元素\n        do j--; while(arr[j] > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        if(i < j) swap(arr[i], arr[j]);\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n##### 4.4 Python代码(语法忘记, 后续更新)\n```python\n    def quick_sort(arr, l, r):\n        i = l - 1, j = r + 1, x = arr[l + r >> 1];\n```\n##### 4.5 Go代码(后续更新)\n```go\n\n```\n","source":"_posts/acwing/quicksort.md","raw":"---\ntitle: 快速排序\ndate: 2022-03-24 10:58:50\ntags: 快速排序\ncategory: acwing算法基础\ndescription: 学习快排思想以及代码实现。\n---\n# 快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)\n快速排序是从冒泡排序演变而来的算法，但是它比快排要高效得多，所以我们把它叫做快速排序😂\n快速排序之所以快，是因为它用到了一个思想😮 ---------> 分治(不懂的可以百度哟😁)\n\n那么快排是怎么实现的呢?让我们来看一下下面的图文解释:\n#### 1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:\n ![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/1.png)\n#### 2. 然后我们把**小于分界点**的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把**大于分界点**的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在**分界点**左边的元素**小于或等于**分界点, 在**分界点**右边的元素**大于或等于**分界点: \n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/2.png)\n#### 3. 利用**分界点**分好两边的元素后,得到下面的三个部分, 我们分别对**左边的部分**与**右边的部分**分别进行1与2的操作, 最后便可以排好序了(下图演示):\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/3.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/4.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/5.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/6.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/7.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/8.png)\n> 到这里, 这个数组便已经排好序了\n#### 4. 这时候就进入我们紧张刺激的代码环节:\n##### 4.1 Java代码\n```java\n    public void quick_sort(int[] arr, int l, int r){\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(i < x);\n        //3.确定分界点右边的元素\n        do j--; while(j > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        //有代码整洁洁癖的童鞋可以把if里面的代码写成一个方法,然后在进行调用\n        if(i < j) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n\n##### 4.2 C代码\n```c\nvoid quick_sort(int arr[], int l, int r)\n    {\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(arr[i] < x);\n        //3.确定分界点右边的元素\n        do j--; while(arr[j] > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        if(i < j) \n        {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        };\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n\n##### 4.3 C++代码\n```c++\nvoid quick_sort(int arr[], int l, int r)\n    {\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(arr[i] < x);\n        //3.确定分界点右边的元素\n        do j--; while(arr[j] > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        if(i < j) swap(arr[i], arr[j]);\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n##### 4.4 Python代码(语法忘记, 后续更新)\n```python\n    def quick_sort(arr, l, r):\n        i = l - 1, j = r + 1, x = arr[l + r >> 1];\n```\n##### 4.5 Go代码(后续更新)\n```go\n\n```\n","slug":"acwing/quicksort","published":1,"updated":"2022-03-24T08:07:05.735Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl14posof0001tcjha9gj0euo","content":"<h1 id=\"快速排序-如有不足之处-请各方大佬在底下批评指正\"><a href=\"#快速排序-如有不足之处-请各方大佬在底下批评指正\" class=\"headerlink\" title=\"快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)\"></a>快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)</h1><p>快速排序是从冒泡排序演变而来的算法，但是它比快排要高效得多，所以我们把它叫做快速排序😂<br>快速排序之所以快，是因为它用到了一个思想😮 ———&gt; 分治(不懂的可以百度哟😁)</p>\n<p>那么快排是怎么实现的呢?让我们来看一下下面的图文解释:</p>\n<h4 id=\"1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7\"><a href=\"#1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7\" class=\"headerlink\" title=\"1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:\"></a>1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:</h4><p> <img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/1.png\"></p>\n<h4 id=\"2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点\"><a href=\"#2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点\" class=\"headerlink\" title=\"2. 然后我们把小于分界点的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把大于分界点的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在分界点左边的元素小于或等于分界点, 在分界点右边的元素大于或等于分界点:\"></a>2. 然后我们把<strong>小于分界点</strong>的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把<strong>大于分界点</strong>的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在<strong>分界点</strong>左边的元素<strong>小于或等于</strong>分界点, 在<strong>分界点</strong>右边的元素<strong>大于或等于</strong>分界点:</h4><p><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/2.png\"></p>\n<h4 id=\"3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示\"><a href=\"#3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示\" class=\"headerlink\" title=\"3. 利用分界点分好两边的元素后,得到下面的三个部分, 我们分别对左边的部分与右边的部分分别进行1与2的操作, 最后便可以排好序了(下图演示):\"></a>3. 利用<strong>分界点</strong>分好两边的元素后,得到下面的三个部分, 我们分别对<strong>左边的部分</strong>与<strong>右边的部分</strong>分别进行1与2的操作, 最后便可以排好序了(下图演示):</h4><p><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/3.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/4.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/5.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/6.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/7.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/8.png\"></p>\n<blockquote>\n<p>到这里, 这个数组便已经排好序了</p>\n</blockquote>\n<h4 id=\"4-这时候就进入我们紧张刺激的代码环节\"><a href=\"#4-这时候就进入我们紧张刺激的代码环节\" class=\"headerlink\" title=\"4. 这时候就进入我们紧张刺激的代码环节:\"></a>4. 这时候就进入我们紧张刺激的代码环节:</h4><h5 id=\"4-1-Java代码\"><a href=\"#4-1-Java代码\" class=\"headerlink\" title=\"4.1 Java代码\"></a>4.1 Java代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-comment\">//1.确定分界点</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>    <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(i &lt; x);<br>    <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>    <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(j &gt; x);<br>    <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>    <span class=\"hljs-comment\">//有代码整洁洁癖的童鞋可以把if里面的代码写成一个方法,然后在进行调用</span><br>    <span class=\"hljs-keyword\">if</span>(i &lt; j) &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = temp;<br>    &#125;<br>    <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>    quick_sort(arr, l, j);<br>    <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>    quick_sort(arr, j + <span class=\"hljs-number\">1</span>, r);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"4-2-C代码\"><a href=\"#4-2-C代码\" class=\"headerlink\" title=\"4.2 C代码\"></a>4.2 C代码</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-comment\">//1.确定分界点</span><br>        <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class=\"hljs-keyword\">if</span>(i &lt; j) <br>        &#123;<br>            <span class=\"hljs-type\">int</span> temp = arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;;<br>        <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>        quick_sort(arr, l, j);<br>        <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>        quick_sort(arr, j + <span class=\"hljs-number\">1</span>, r);<br>    &#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"4-3-C-代码\"><a href=\"#4-3-C-代码\" class=\"headerlink\" title=\"4.3 C++代码\"></a>4.3 C++代码</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\">    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-comment\">//1.确定分界点</span><br>        <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class=\"hljs-keyword\">if</span>(i &lt; j) <span class=\"hljs-built_in\">swap</span>(arr[i], arr[j]);<br>        <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>        <span class=\"hljs-built_in\">quick_sort</span>(arr, l, j);<br>        <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>        <span class=\"hljs-built_in\">quick_sort</span>(arr, j + <span class=\"hljs-number\">1</span>, r);<br>    &#125;<br></code></pre></div></td></tr></table></figure>\n<h5 id=\"4-4-Python代码-语法忘记-后续更新\"><a href=\"#4-4-Python代码-语法忘记-后续更新\" class=\"headerlink\" title=\"4.4 Python代码(语法忘记, 后续更新)\"></a>4.4 Python代码(语法忘记, 后续更新)</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">quick_sort</span>(<span class=\"hljs-params\">arr, l, r</span>):<br>    i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br></code></pre></div></td></tr></table></figure>\n<h5 id=\"4-5-Go代码-后续更新\"><a href=\"#4-5-Go代码-后续更新\" class=\"headerlink\" title=\"4.5 Go代码(后续更新)\"></a>4.5 Go代码(后续更新)</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs go\"><br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"wordcount":1699,"excerpt":"","more":"<h1 id=\"快速排序-如有不足之处-请各方大佬在底下批评指正\"><a href=\"#快速排序-如有不足之处-请各方大佬在底下批评指正\" class=\"headerlink\" title=\"快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)\"></a>快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)</h1><p>快速排序是从冒泡排序演变而来的算法，但是它比快排要高效得多，所以我们把它叫做快速排序😂<br>快速排序之所以快，是因为它用到了一个思想😮 ———&gt; 分治(不懂的可以百度哟😁)</p>\n<p>那么快排是怎么实现的呢?让我们来看一下下面的图文解释:</p>\n<h4 id=\"1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7\"><a href=\"#1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7\" class=\"headerlink\" title=\"1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:\"></a>1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:</h4><p> <img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/1.png\"></p>\n<h4 id=\"2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点\"><a href=\"#2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点\" class=\"headerlink\" title=\"2. 然后我们把小于分界点的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把大于分界点的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在分界点左边的元素小于或等于分界点, 在分界点右边的元素大于或等于分界点:\"></a>2. 然后我们把<strong>小于分界点</strong>的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把<strong>大于分界点</strong>的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在<strong>分界点</strong>左边的元素<strong>小于或等于</strong>分界点, 在<strong>分界点</strong>右边的元素<strong>大于或等于</strong>分界点:</h4><p><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/2.png\"></p>\n<h4 id=\"3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示\"><a href=\"#3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示\" class=\"headerlink\" title=\"3. 利用分界点分好两边的元素后,得到下面的三个部分, 我们分别对左边的部分与右边的部分分别进行1与2的操作, 最后便可以排好序了(下图演示):\"></a>3. 利用<strong>分界点</strong>分好两边的元素后,得到下面的三个部分, 我们分别对<strong>左边的部分</strong>与<strong>右边的部分</strong>分别进行1与2的操作, 最后便可以排好序了(下图演示):</h4><p><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/3.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/4.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/5.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/6.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/7.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/8.png\"></p>\n<blockquote>\n<p>到这里, 这个数组便已经排好序了</p>\n</blockquote>\n<h4 id=\"4-这时候就进入我们紧张刺激的代码环节\"><a href=\"#4-这时候就进入我们紧张刺激的代码环节\" class=\"headerlink\" title=\"4. 这时候就进入我们紧张刺激的代码环节:\"></a>4. 这时候就进入我们紧张刺激的代码环节:</h4><h5 id=\"4-1-Java代码\"><a href=\"#4-1-Java代码\" class=\"headerlink\" title=\"4.1 Java代码\"></a>4.1 Java代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-comment\">//1.确定分界点</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>    <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(i &lt; x);<br>    <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>    <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(j &gt; x);<br>    <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>    <span class=\"hljs-comment\">//有代码整洁洁癖的童鞋可以把if里面的代码写成一个方法,然后在进行调用</span><br>    <span class=\"hljs-keyword\">if</span>(i &lt; j) &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = temp;<br>    &#125;<br>    <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>    quick_sort(arr, l, j);<br>    <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>    quick_sort(arr, j + <span class=\"hljs-number\">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-2-C代码\"><a href=\"#4-2-C代码\" class=\"headerlink\" title=\"4.2 C代码\"></a>4.2 C代码</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-comment\">//1.确定分界点</span><br>        <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class=\"hljs-keyword\">if</span>(i &lt; j) <br>        &#123;<br>            <span class=\"hljs-type\">int</span> temp = arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;;<br>        <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>        quick_sort(arr, l, j);<br>        <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>        quick_sort(arr, j + <span class=\"hljs-number\">1</span>, r);<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-3-C-代码\"><a href=\"#4-3-C-代码\" class=\"headerlink\" title=\"4.3 C++代码\"></a>4.3 C++代码</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\">    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-comment\">//1.确定分界点</span><br>        <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class=\"hljs-keyword\">if</span>(i &lt; j) <span class=\"hljs-built_in\">swap</span>(arr[i], arr[j]);<br>        <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>        <span class=\"hljs-built_in\">quick_sort</span>(arr, l, j);<br>        <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>        <span class=\"hljs-built_in\">quick_sort</span>(arr, j + <span class=\"hljs-number\">1</span>, r);<br>    &#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"4-4-Python代码-语法忘记-后续更新\"><a href=\"#4-4-Python代码-语法忘记-后续更新\" class=\"headerlink\" title=\"4.4 Python代码(语法忘记, 后续更新)\"></a>4.4 Python代码(语法忘记, 后续更新)</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">quick_sort</span>(<span class=\"hljs-params\">arr, l, r</span>):<br>    i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br></code></pre></td></tr></table></figure>\n<h5 id=\"4-5-Go代码-后续更新\"><a href=\"#4-5-Go代码-后续更新\" class=\"headerlink\" title=\"4.5 Go代码(后续更新)\"></a>4.5 Go代码(后续更新)</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br></code></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl14posob0000tcjh8j60djbu","category_id":"cl14posoh0002tcjh1f16c8ad","_id":"cl14posok0007tcjhhqe8e2ux"},{"post_id":"cl14posof0001tcjha9gj0euo","category_id":"cl14posoj0004tcjhfcgh5k6a","_id":"cl14posok0009tcjhbwle092y"}],"PostTag":[{"post_id":"cl14posob0000tcjh8j60djbu","tag_id":"cl14posoi0003tcjh5mmqe7oi","_id":"cl14posoj0006tcjh8abh4jtw"},{"post_id":"cl14posof0001tcjha9gj0euo","tag_id":"cl14posoj0005tcjh26d72ks7","_id":"cl14posok0008tcjhf7r61rnt"}],"Tag":[{"name":"六月的目标","_id":"cl14posoi0003tcjh5mmqe7oi"},{"name":"快速排序","_id":"cl14posoj0005tcjh26d72ks7"}]}}