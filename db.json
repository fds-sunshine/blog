{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"340499890fcdfc2fcb03e125ef0962f7462fe87c","modified":1655793552273},{"_id":"source/_posts/acwing/acwing算法模板-基础算法篇.md","hash":"f19c91491ca134a37dee33fcbc19ea3492e16d06","modified":1656059118244},{"_id":"source/_posts/acwing/acwing算法模板-数据结构篇.md","hash":"168c96e931dcba18c5da1f8416ec90eebc756d68","modified":1656059114861},{"_id":"source/_posts/design-pattern/设计模式简介.md","hash":"a93fc813205b2be26d57c64507bd57b9e7933a89","modified":1656583233102},{"_id":"source/_posts/distributed/concept/2PC协议与3PC协议.md","hash":"c75c33f13075d578738388df7de1980183c33ff5","modified":1655793552273},{"_id":"source/_posts/distributed/concept/ACID.md","hash":"3d67bbbb837bd6030e7257caf784fe56b8f8c73c","modified":1655793552273},{"_id":"source/_posts/distributed/concept/分布式的理解.md","hash":"a2494dd8756b30176c03b71e56ab1494cd2b0dbd","modified":1655793552274},{"_id":"source/_posts/design-pattern/CreationalPatterns/创建型模式-工厂模式.md","hash":"b6dc93750f1307351e6cb0ddef399824096b4e8d","modified":1656668342005},{"_id":"source/_posts/design-pattern/CreationalPatterns/创建型模式-抽象工厂模式.md","hash":"d407b2cf0111b4f1965385639c5750d718f82c23","modified":1656744671032},{"_id":"source/_posts/distributed/zookeeper/zookeeper入门.md","hash":"2209de1ad01a496c6c899f58254b71f2d70633f9","modified":1655793552274},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1655793552291},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1655793552292},{"_id":"themes/fluid/.editorconfig","hash":"b595159772f3ee1ef5e6780ce307270e741cb309","modified":1655793552275},{"_id":"themes/fluid/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1655793552275},{"_id":"themes/fluid/.eslintrc","hash":"3df89453e1f63051fafc90f16a8d83951050e316","modified":1655793552275},{"_id":"themes/fluid/README.md","hash":"399804e1359046480fe9e1908c26ba49809aaf9b","modified":1655793552277},{"_id":"themes/fluid/.gitignore","hash":"9ede98b8d9dca802f82f651afb3b0366d69f05f1","modified":1655793552276},{"_id":"themes/fluid/LICENSE","hash":"694fb3659a4331dd752bd92e4248623bff8617cd","modified":1655793552276},{"_id":"themes/fluid/README_en.md","hash":"2b47ed68ec888dcc34fa6aad9ce95aeba6744fec","modified":1655793552277},{"_id":"themes/fluid/_config.yml","hash":"1f894fbbd0604118680b150b8910cfa1cbc4a01d","modified":1656745778215},{"_id":"themes/fluid/package.json","hash":"40e3a3fea5dedbc09e859a2ea6ce271004a57e87","modified":1655793552284},{"_id":"themes/fluid/languages/de.yml","hash":"288f649c2c2314eb610693b18853ee74f0541e87","modified":1655793552277},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"3b92f4428d66c31610f6cde13b82ee723aff00d2","modified":1655793552278},{"_id":"themes/fluid/languages/en.yml","hash":"31f2867619a768606166778d4ee51f3d00ac33a0","modified":1655793552277},{"_id":"themes/fluid/languages/eo.yml","hash":"2c1c481d9af116e79fe55a0aa0bdbb143a97f559","modified":1655793552278},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"de9b7e729d72eee9327671c3d5df0a607c4c3257","modified":1655793552278},{"_id":"themes/fluid/languages/ja.yml","hash":"dc43be11a300893ebef47283c22f2f946ca21260","modified":1655793552278},{"_id":"themes/fluid/layout/404.ejs","hash":"79a598e43c40d48b23076361720f1e77df466e41","modified":1655793552278},{"_id":"themes/fluid/layout/about.ejs","hash":"5b6de01c82b14834ab1e67f0a803612f5855f064","modified":1655793552282},{"_id":"themes/fluid/layout/archive.ejs","hash":"7a1e19dec37804927f0d331d7e6c80ed03becd61","modified":1655793552282},{"_id":"themes/fluid/layout/categories.ejs","hash":"e7733779366ff6402615d96d4195f1196fa8351d","modified":1655793552282},{"_id":"themes/fluid/layout/category.ejs","hash":"dd2bd15cbd811d6ea973b6e6a17d99e36151e274","modified":1655793552283},{"_id":"themes/fluid/layout/index.ejs","hash":"bd118b6f7bd882a2ff896a1c4bc7bfa1c7694568","modified":1655793552283},{"_id":"themes/fluid/layout/links.ejs","hash":"76807f949aaa20983b89efc9e6bc39108d022ac3","modified":1655793552283},{"_id":"themes/fluid/layout/layout.ejs","hash":"a1cea9b8fe0954d5a8d89941404f31ac344a4f5b","modified":1655793552283},{"_id":"themes/fluid/layout/page.ejs","hash":"f867e69e563b8ad83054714f73d9173ea050d93b","modified":1655793552283},{"_id":"themes/fluid/layout/post.ejs","hash":"edfeb655895027d15334d009324d27a29926cc94","modified":1655793552283},{"_id":"themes/fluid/layout/tag.ejs","hash":"3a9296eb7181e8b3fb0cdc60cbafc815b98d6f51","modified":1655793552283},{"_id":"themes/fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1655793552283},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"bdbdb66da69ab7353b546f02150a6792f4787975","modified":1655793552276},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"78ce211415d502c5a4398d786d5c697d34d868b9","modified":1655793552275},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"beb3474d6f65c1e56700ba872c6a0d0836d4168e","modified":1655793552275},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"5cc30e7b6e7b77c8b40b182ba02a5d93d37d2fc2","modified":1655793552275},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"7db378613df2b7d13e8c428c006399a879a4a852","modified":1655793552275},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"18381d03518526d7cefd024a0bdd8d9e7c6440f5","modified":1655793552276},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"102213e5d6790d060c0e26b4a3a7ec744d753c52","modified":1655793552276},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"780117f8032df3b52169a387658a13cc025a0e13","modified":1655793552278},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"904971bf3419bec46de416c27dceb39a73063f33","modified":1655793552278},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"a137110fe5c4c13eb189dc53fe270c0d390a97e0","modified":1655793552280},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"9af7ff960a421933169162ea1a2cd7e7577b0ed7","modified":1655793552280},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"b7d5b438e2eeb624aecd86f3b321466834deac11","modified":1655793552280},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"2af4653ed3fefdbcb12c16a6d2fa166d14672845","modified":1655793552280},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1655793552281},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"010b8b5ff2d1ae178cfba83a6c95d6345b053617","modified":1655793552282},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"00cdbf4c5e25a7f0c461ef460ae1af28c29e4712","modified":1655793552282},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"bea21f1b5de61badd6c068080315c201fc80bc36","modified":1655793552282},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"a70c26e415a27f07f38b9384e7eb48d1f2b30328","modified":1655793552282},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"76e6bc368cf46d4103ea9514699e10ec0b9a4b56","modified":1655793552282},{"_id":"themes/fluid/scripts/events/index.js","hash":"91defe82d50a317903411f0b260da0f140f43dc4","modified":1655793552284},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1655793552285},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1655793552285},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1655793552285},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"cb72e5acfba882a6eacd6cae8db3238bb078737a","modified":1655793552285},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1655793552287},{"_id":"themes/fluid/scripts/utils/object.js","hash":"d798779ec79a53ce04b8ac79efd5d064981d95bd","modified":1655793552287},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1655793552287},{"_id":"themes/fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1655793552286},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1655793552286},{"_id":"themes/fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1655793552287},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"dac0e08eaa3614a6fd9ddbdfb4584094b1bdb30a","modified":1655793552286},{"_id":"themes/fluid/scripts/tags/note.js","hash":"8020acc2c4bb3a2054e3cb349fac7cd10b79a0be","modified":1655793552287},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1655793552287},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"a26549407de10b994d1f6e37ba8fecf9dd4622de","modified":1655793552286},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1655793552286},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1655793552286},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"b6ccfffdee010ebd60cd8cc2386c43db076b6ca1","modified":1655793552286},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"9c01393f446c490c56b6b0d482aaa8d97cc8b717","modified":1655793552286},{"_id":"themes/fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1655793552292},{"_id":"themes/fluid/source/css/main.styl","hash":"bf536db598434c36cc0c752196bfde46e584a92e","modified":1655793552292},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1655793552293},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1655793552296},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1655793552296},{"_id":"themes/fluid/source/js/boot.js","hash":"5264c0d2eb73b4948ee6bcb1bd847a924d906088","modified":1655793552296},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1655793552297},{"_id":"themes/fluid/source/js/events.js","hash":"b019f58951cc02c5fd1863e2e05101254bf2896c","modified":1655793552296},{"_id":"themes/fluid/source/js/color-schema.js","hash":"719296a8b6e1b76ec682554fb3dbcc75a2a2d78d","modified":1655793552296},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1655793552296},{"_id":"themes/fluid/source/js/leancloud.js","hash":"9115c754794bfd20e84b61f3beb1ec37773b4c0c","modified":1655793552296},{"_id":"themes/fluid/source/js/local-search.js","hash":"90d7eb35aff2994fa173abeed7ce0c91357f5979","modified":1655793552297},{"_id":"themes/fluid/source/js/plugins.js","hash":"75b1d3e58fdfc5230608a0f7d116e41c93050cef","modified":1655793552297},{"_id":"themes/fluid/source/js/utils.js","hash":"a2da89bb185fcd9de7a834e862b03548f5efcd04","modified":1655793552297},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1655793552279},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1655793552279},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1655793552279},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1655793552279},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1655793552279},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1655793552279},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"93d47bc528bf1a3d0fe950fc21a2da787e1b7dc9","modified":1655793552280},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"d1e86754c9560f7346200b2aa9a7f715a3fac82b","modified":1655793552280},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"bd2b8843094966dbc96c3768b4858c6e241a59a9","modified":1655793552280},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"d81bfb2f594d597f0e176abc09a76f3f58b98c2e","modified":1655793552280},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"d20f54bf2fd5cd274b4b9c5542eafbfec5120838","modified":1655793552281},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"80cdaa9da8770568af5bb06a66829dddf1d683d2","modified":1655793552281},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1655793552281},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"fd1f78287c868ccab78b6244b66e3f9b0968c4a8","modified":1655793552281},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"842da2fc1c99a3fb887b5e36b76625c9a1b3401a","modified":1655793552281},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"c0da20f9adca2761d370cc6dda013ec1ecbb7710","modified":1655793552284},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"13d8466cd4c98367131b5f3d6a30b3d4ce8de26f","modified":1655793552284},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"12a5fcf2e322a7e7f8184f4c3a1c6708308e1b61","modified":1655793552284},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1655793552285},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"af80de29f06b4f64c31fe070a2af292876717ee1","modified":1655793552284},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"3f2dba4959b27466521de97eff692815650c02b7","modified":1655793552285},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1655793552288},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1655793552288},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1655793552292},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"35179cd560f9919376abdcf99e0d23f20e18e84f","modified":1655793552292},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1655793552288},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"0d6d39709999c8e1786ed64c6f5bbdc4acd21813","modified":1655793552290},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"ed0f3aae95edac702ed497f6e8a76b33f39f8c89","modified":1655793552290},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"6f2a3b8af2793dd831f661c6db0ccbe0a62ccc48","modified":1655793552290},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1655793552290},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"67103d8eb96cd94d185c00011b809eecdb88823a","modified":1655793552290},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"0924e35eff2ec84e2d9e4772abccda452d9463ef","modified":1655793552290},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"86926a80bf6f39a7f47789b1a8f44b5984b4683f","modified":1655793552288},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"4123f77c742d94e903f7196350c830cbccf8669a","modified":1655793552291},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"2eaac14a1af09cf6a1ab24201e182ac2aca40385","modified":1655793552291},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1655793552292},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"cd81947721c5aecc1cc8d4658599837701ef8af3","modified":1655793552291},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"10fcf4291b6efd5036214b7dde57ed2e3878fc1a","modified":1655793552291},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"da823846f0896f16b21c7430f047f7222a89cd10","modified":1655793552288},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"bb9cdde191b9b1287ba19414bab862f30be6a8a0","modified":1655793552289},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"c398892fba1494dd6fd417415076458ed321d34d","modified":1655793552289},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e77f5c5d5da17a7e6241cca0e1d4e8cd07169c64","modified":1655793552289},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1655793552289},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1655793552289},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"f770c5c3ee89421e9e3f1313ca5bd07a2448f400","modified":1655793552289},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e568f308df26465e0432197e8b57384707470f54","modified":1655793552289},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1655793552290},{"_id":"themes/fluid/source/img/default.png","hash":"1eec8e152fbfcc661dc7eeb354498e6b2b88f64e","modified":1655793552294},{"_id":"themes/fluid/source/img/favicon.png","hash":"2aa1743dc823866820bdcd1bfca35efa235dd6ad","modified":1655793552295},{"_id":"public/local-search.xml","hash":"7945e4385c5049a4ba11ae331ef4ef1746c6a7a7","modified":1656745789057},{"_id":"public/2022/06/24/acwing/acwing算法模板-数据结构篇/index.html","hash":"0b3b3456af784b78128821018b7a58c17f333e35","modified":1656745789057},{"_id":"public/2022/07/02/design-pattern/CreationalPatterns/创建型模式-抽象工厂模式/index.html","hash":"c58db3b3cbab14dd6302ef8d63365feba6435e6b","modified":1656745789057},{"_id":"public/2022/07/01/design-pattern/CreationalPatterns/创建型模式-工厂模式/index.html","hash":"11f515c650b9881bf54c4fecd49de7c8247a6311","modified":1656745789057},{"_id":"public/2022/06/30/design-pattern/设计模式简介/index.html","hash":"93a7209f2ba03d173b7fc0a9604a39c7a5d3f499","modified":1656745789057},{"_id":"public/2022/06/21/acwing/acwing算法模板-基础算法篇/index.html","hash":"23fbbf03d5fd4a7fd2eb1b941a0e6f77c9048b6a","modified":1656745789057},{"_id":"public/2022/04/02/distributed/concept/2PC协议与3PC协议/index.html","hash":"d7d24e32453b885b37aca722d5012b937bed8cf8","modified":1656745789057},{"_id":"public/2022/04/02/distributed/concept/ACID/index.html","hash":"a8caa117681b5b3eb78d8a9b1010a4bff0175011","modified":1656745789057},{"_id":"public/2022/04/02/distributed/concept/分布式的理解/index.html","hash":"95f1d946ba4f48dab2bc168f902f1c47ba808848","modified":1656745789057},{"_id":"public/2022/03/25/distributed/zookeeper/zookeeper入门/index.html","hash":"6ff0e22fb8bf4e45305a5635896058da1af962b0","modified":1656745789057},{"_id":"public/archives/index.html","hash":"87cc49f320dc679f7f1a156f39aec7356c2c0c05","modified":1656745789057},{"_id":"public/archives/2022/index.html","hash":"d6eb973088fa2dae3a21e099b98130a94488492b","modified":1656745789057},{"_id":"public/archives/2022/03/index.html","hash":"87da9625aafe592665fc6cf590d7dc0448f80410","modified":1656745789057},{"_id":"public/archives/2022/04/index.html","hash":"8dfd488f4e7e260d1c90c67ed04d2a6f90107520","modified":1656745789057},{"_id":"public/archives/2022/06/index.html","hash":"1a1fa2e052233929e0516e5c533ac1cf8e9c5945","modified":1656745789057},{"_id":"public/archives/2022/07/index.html","hash":"446d6725ad7b63df0206b2bbe7940b9b72de0776","modified":1656745789057},{"_id":"public/categories/acwing/index.html","hash":"4ffee00c3b6cf1264646931b5f54cb5f02d5ec2b","modified":1656745789057},{"_id":"public/categories/设计模式/index.html","hash":"5549963e4be237842fb75ac9dedf88a2a8559a93","modified":1656745789057},{"_id":"public/categories/分布式基础/index.html","hash":"2e44e217033916fc4dd2377eb5a3ae99f0214dd5","modified":1656745789057},{"_id":"public/categories/设计模式/创建型模式/index.html","hash":"e797a0459688673bf483cb1ebc1ba52b7c69a07d","modified":1656745789057},{"_id":"public/categories/分布式基础/zookeeper/index.html","hash":"711b57fe1052ddc9030949476436448ae167361f","modified":1656745789057},{"_id":"public/tags/acwing/index.html","hash":"5c8aa8dee21f09987236d100f01ad9da0a5fe4d7","modified":1656745789057},{"_id":"public/tags/设计模式/index.html","hash":"0076b82c311ec93419bd8f8e1bbc61c16e00c7f0","modified":1656745789057},{"_id":"public/tags/分布式协议/index.html","hash":"74d0f7b1c3f66ae3f521a804524f270053bd124d","modified":1656745789057},{"_id":"public/404.html","hash":"90573d6e70c9a8aa02d5da36b425d07098db0a44","modified":1656745789057},{"_id":"public/tags/ACID/index.html","hash":"1c4c4a4d4c1cedf0c6ea69dd8b95926c7ff2a8d2","modified":1656745789057},{"_id":"public/tags/zookeeper/index.html","hash":"46daac34444f5cd291a98536073094d71ec36bdb","modified":1656745789057},{"_id":"public/tags/index.html","hash":"f699a02a5eee67c2d0f43542578865b23bb3b9c1","modified":1656745789057},{"_id":"public/categories/index.html","hash":"c7ade86ca803cf05fe82bc6b6dd797fa7954d1b9","modified":1656745789057},{"_id":"public/links/index.html","hash":"7b6fff3dcf0e50bfb816ecfefee30e71ac190872","modified":1656745789057},{"_id":"public/index.html","hash":"d4fc540c843505b3e9959c00cd4e2753e89dbeea","modified":1656745789057},{"_id":"public/CNAME","hash":"340499890fcdfc2fcb03e125ef0962f7462fe87c","modified":1656745789057},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1656745789057},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1656745789057},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1656745789057},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1656745789057},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1656745789057},{"_id":"public/js/events.js","hash":"41632930eca3e763cc1cf2de0b521e602dc72152","modified":1656745789057},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1656745789057},{"_id":"public/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1656745789057},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1656745789057},{"_id":"public/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1656745789057},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1656745789057},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1656745789057},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1656745789057},{"_id":"public/css/main.css","hash":"9487432febfab1b5440bfb31c1d0bcdd07268710","modified":1656745789057},{"_id":"public/img/default.png","hash":"1eec8e152fbfcc661dc7eeb354498e6b2b88f64e","modified":1656745789057},{"_id":"public/img/favicon.png","hash":"2aa1743dc823866820bdcd1bfca35efa235dd6ad","modified":1656745789057}],"Category":[{"name":"acwing","_id":"cl53jo0is0002i8vp1gtoaob5"},{"name":"设计模式","_id":"cl53jo0iz000ci8vpe5my7o2t"},{"name":"分布式基础","_id":"cl53jo0j2000ji8vpc40r1gnn"},{"name":"创建型模式","parent":"cl53jo0iz000ci8vpe5my7o2t","_id":"cl53jo0j5000zi8vpej695lh2"},{"name":"zookeeper","parent":"cl53jo0j2000ji8vpc40r1gnn","_id":"cl53jo0j60016i8vpf3xa8834"}],"Data":[],"Page":[],"Post":[{"title":"acwing算法模板-数据结构篇","date":"2022-06-24T08:23:58.000Z","description":"学习acwing算法基础课背诵与灵活应用的模板。","_content":"","source":"_posts/acwing/acwing算法模板-数据结构篇.md","raw":"---\ntitle: acwing算法模板-数据结构篇\ncategories: [\"acwing\"]\ndate: 2022-06-24 16:23:58\ntags: acwing\ndescription: 学习acwing算法基础课背诵与灵活应用的模板。\n---\n","slug":"acwing/acwing算法模板-数据结构篇","published":1,"updated":"2022-06-24T08:25:14.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl53jo0il0000i8vphm419j1q","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"acwing算法模板-基础算法篇","date":"2022-06-21T06:51:04.000Z","description":"学习acwing算法基础课背诵与灵活应用的模板。","_content":"\n## 算法模板\n### 1. 快速排序\n快速排序这里使用的是分治的算法思想，分治算法其核心思想是“分而治之”，其是将一个大问题分解成多个相同模式的小问题，然后递归的求解各个小问题，再将小问题的解合并成大问题的解。\n```c++\nvoid quick_sort(int q[], int l, int r)\n{\n\n    if (l >= r) return;\n\n    int i = l - 1, j = r + 1, x = q[l + r >> 1];\n    while (i < j)\n    {\n        do i ++ ; while (q[i] < x);\n        do j -- ; while (q[j] > x);\n        if (i < j) swap(q[i], q[j]);\n    }\n\n    quick_sort(q, l, j);\n    quick_sort(q, j + 1, r);\n}\n```\n\n### 2. 归并排序\n归并排序也是采用分治的思想。\n```c++\nvoid merge_sort(int q[], int l, int r)\n{\n    if (l >= r) return;\n\n    int mid = l + r >> 1;\n\n    merge_sort(q, l, mid), merge_sort(q, mid + 1, r);\n\n    int k = 0, i = l, j = mid + 1;\n    while (i <= mid && j <= r)\n        if (q[i] <= q[j]) tmp[k ++ ] = q[i ++ ];\n        else tmp[k ++ ] = q[j ++ ];\n    while (i <= mid) tmp[k ++ ] = q[i ++ ];\n    while (j <= r) tmp[k ++ ] = q[j ++ ];\n\n    for (i = l, j = 0; i <= r; i ++, j ++ ) q[i] = tmp[j];\n}\n```\n### 3. 二分\n```c++\n    // 找左边第一个匹配的元素\n    int l = 0, r = n - 1;\n    while (l < r)\n    {\n        int mid = l + r >> 1;\n        if (q[mid] >= x) r = mid;\n        else l = mid + 1;\n    }\n\n    // 找右边第一个匹配的元素\n    int l = 0, r = n - 1;\n    while (l < r)\n    {\n        int mid = l + r + 1>> 1;\n        if (q[mid] <= x) l = mid;\n        else r = mid - 1;\n    }\n```\n### 4. 前缀和、差分（只看二维情况，以为过于简单）\n```c++\n// (i, j)的前缀和\nfor (int i = 1; i <= n; i ++ )\n    for (int j = 1; j <= m; j ++ )\n        s[i][j] += s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1];\n\n// 某个子矩阵的前缀和（x2 > x1, y2 > y1)\ns[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1]\n\n\n// 差分主要的思想\nvoid insert(int x1, int y1, int x2, int y2, int c)\n{\n    b[x1][y1] += c;\n    b[x2 + 1][y1] -= c;\n    b[x1][y2 + 1] -= c;\n    b[x2 + 1][y2 + 1] += c;\n}\n```\n\n### 5. 双指针\n```c++\nfor (int i = 0, j = 0; i < n; i ++ )\n{\n    s[q[i]] ++ ;\n    while (j < i && check(j, i)) j++;\n    res = max(res, i - j + 1);\n}\n```\n\n### 6. 位运算(待更新)\nx & -x = x & (~x + 1);\n\n### 7. 离散化(待更新)\n\n\n### 8. 区间合并\n```c++\nvoid merge(vector<PII> &segs)\n{\n    vector<PII> res;\n\n    sort(segs.begin(), segs.end());\n\n    int st = -2e9, ed = -2e9;\n    for (auto seg : segs)\n        if (ed < seg.first)\n        {\n            if (st != -2e9) res.push_back({st, ed});\n            st = seg.first, ed = seg.second;\n        }\n        else ed = max(ed, seg.second);\n\n    if (st != -2e9) res.push_back({st, ed});\n\n    segs = res;\n}\n```\n\n","source":"_posts/acwing/acwing算法模板-基础算法篇.md","raw":"---\ntitle: acwing算法模板-基础算法篇\ncategories: [\"acwing\"]\ndate: 2022-06-21 14:51:04\ntags: acwing\ndescription: 学习acwing算法基础课背诵与灵活应用的模板。\n---\n\n## 算法模板\n### 1. 快速排序\n快速排序这里使用的是分治的算法思想，分治算法其核心思想是“分而治之”，其是将一个大问题分解成多个相同模式的小问题，然后递归的求解各个小问题，再将小问题的解合并成大问题的解。\n```c++\nvoid quick_sort(int q[], int l, int r)\n{\n\n    if (l >= r) return;\n\n    int i = l - 1, j = r + 1, x = q[l + r >> 1];\n    while (i < j)\n    {\n        do i ++ ; while (q[i] < x);\n        do j -- ; while (q[j] > x);\n        if (i < j) swap(q[i], q[j]);\n    }\n\n    quick_sort(q, l, j);\n    quick_sort(q, j + 1, r);\n}\n```\n\n### 2. 归并排序\n归并排序也是采用分治的思想。\n```c++\nvoid merge_sort(int q[], int l, int r)\n{\n    if (l >= r) return;\n\n    int mid = l + r >> 1;\n\n    merge_sort(q, l, mid), merge_sort(q, mid + 1, r);\n\n    int k = 0, i = l, j = mid + 1;\n    while (i <= mid && j <= r)\n        if (q[i] <= q[j]) tmp[k ++ ] = q[i ++ ];\n        else tmp[k ++ ] = q[j ++ ];\n    while (i <= mid) tmp[k ++ ] = q[i ++ ];\n    while (j <= r) tmp[k ++ ] = q[j ++ ];\n\n    for (i = l, j = 0; i <= r; i ++, j ++ ) q[i] = tmp[j];\n}\n```\n### 3. 二分\n```c++\n    // 找左边第一个匹配的元素\n    int l = 0, r = n - 1;\n    while (l < r)\n    {\n        int mid = l + r >> 1;\n        if (q[mid] >= x) r = mid;\n        else l = mid + 1;\n    }\n\n    // 找右边第一个匹配的元素\n    int l = 0, r = n - 1;\n    while (l < r)\n    {\n        int mid = l + r + 1>> 1;\n        if (q[mid] <= x) l = mid;\n        else r = mid - 1;\n    }\n```\n### 4. 前缀和、差分（只看二维情况，以为过于简单）\n```c++\n// (i, j)的前缀和\nfor (int i = 1; i <= n; i ++ )\n    for (int j = 1; j <= m; j ++ )\n        s[i][j] += s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1];\n\n// 某个子矩阵的前缀和（x2 > x1, y2 > y1)\ns[x2][y2] - s[x1 - 1][y2] - s[x2][y1 - 1] + s[x1 - 1][y1 - 1]\n\n\n// 差分主要的思想\nvoid insert(int x1, int y1, int x2, int y2, int c)\n{\n    b[x1][y1] += c;\n    b[x2 + 1][y1] -= c;\n    b[x1][y2 + 1] -= c;\n    b[x2 + 1][y2 + 1] += c;\n}\n```\n\n### 5. 双指针\n```c++\nfor (int i = 0, j = 0; i < n; i ++ )\n{\n    s[q[i]] ++ ;\n    while (j < i && check(j, i)) j++;\n    res = max(res, i - j + 1);\n}\n```\n\n### 6. 位运算(待更新)\nx & -x = x & (~x + 1);\n\n### 7. 离散化(待更新)\n\n\n### 8. 区间合并\n```c++\nvoid merge(vector<PII> &segs)\n{\n    vector<PII> res;\n\n    sort(segs.begin(), segs.end());\n\n    int st = -2e9, ed = -2e9;\n    for (auto seg : segs)\n        if (ed < seg.first)\n        {\n            if (st != -2e9) res.push_back({st, ed});\n            st = seg.first, ed = seg.second;\n        }\n        else ed = max(ed, seg.second);\n\n    if (st != -2e9) res.push_back({st, ed});\n\n    segs = res;\n}\n```\n\n","slug":"acwing/acwing算法模板-基础算法篇","published":1,"updated":"2022-06-24T08:25:18.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl53jo0iq0001i8vp6ukh6jij","content":"<h2 id=\"算法模板\"><a href=\"#算法模板\" class=\"headerlink\" title=\"算法模板\"></a>算法模板</h2><h3 id=\"1-快速排序\"><a href=\"#1-快速排序\" class=\"headerlink\" title=\"1. 快速排序\"></a>1. 快速排序</h3><p>快速排序这里使用的是分治的算法思想，分治算法其核心思想是“分而治之”，其是将一个大问题分解成多个相同模式的小问题，然后递归的求解各个小问题，再将小问题的解合并成大问题的解。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> q[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\"></span>&#123;<br><br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br><br>    <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = q[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">while</span> (i &lt; j)<br>    &#123;<br>        <span class=\"hljs-keyword\">do</span> i ++ ; <span class=\"hljs-keyword\">while</span> (q[i] &lt; x);<br>        <span class=\"hljs-keyword\">do</span> j -- ; <span class=\"hljs-keyword\">while</span> (q[j] &gt; x);<br>        <span class=\"hljs-keyword\">if</span> (i &lt; j) <span class=\"hljs-built_in\">swap</span>(q[i], q[j]);<br>    &#125;<br><br>    <span class=\"hljs-built_in\">quick_sort</span>(q, l, j);<br>    <span class=\"hljs-built_in\">quick_sort</span>(q, j + <span class=\"hljs-number\">1</span>, r);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2-归并排序\"><a href=\"#2-归并排序\" class=\"headerlink\" title=\"2. 归并排序\"></a>2. 归并排序</h3><p>归并排序也是采用分治的思想。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> q[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br><br>    <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-built_in\">merge_sort</span>(q, l, mid), <span class=\"hljs-built_in\">merge_sort</span>(q, mid + <span class=\"hljs-number\">1</span>, r);<br><br>    <span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>, i = l, j = mid + <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class=\"hljs-keyword\">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];<br>        <span class=\"hljs-keyword\">else</span> tmp[k ++ ] = q[j ++ ];<br>    <span class=\"hljs-keyword\">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<br>    <span class=\"hljs-keyword\">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br><br>    <span class=\"hljs-keyword\">for</span> (i = l, j = <span class=\"hljs-number\">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"3-二分\"><a href=\"#3-二分\" class=\"headerlink\" title=\"3. 二分\"></a>3. 二分</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// 找左边第一个匹配的元素</span><br><span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">0</span>, r = n - <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">while</span> (l &lt; r)<br>&#123;<br>    <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span> (q[mid] &gt;= x) r = mid;<br>    <span class=\"hljs-keyword\">else</span> l = mid + <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// 找右边第一个匹配的元素</span><br><span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">0</span>, r = n - <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">while</span> (l &lt; r)<br>&#123;<br>    <span class=\"hljs-type\">int</span> mid = l + r + <span class=\"hljs-number\">1</span>&gt;&gt; <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span> (q[mid] &lt;= x) l = mid;<br>    <span class=\"hljs-keyword\">else</span> r = mid - <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"4-前缀和、差分（只看二维情况，以为过于简单）\"><a href=\"#4-前缀和、差分（只看二维情况，以为过于简单）\" class=\"headerlink\" title=\"4. 前缀和、差分（只看二维情况，以为过于简单）\"></a>4. 前缀和、差分（只看二维情况，以为过于简单）</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// (i, j)的前缀和</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ )<br>        s[i][j] += s[i - <span class=\"hljs-number\">1</span>][j] + s[i][j - <span class=\"hljs-number\">1</span>] - s[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>];<br><br><span class=\"hljs-comment\">// 某个子矩阵的前缀和（x2 &gt; x1, y2 &gt; y1)</span><br>s[x2][y2] - s[x1 - <span class=\"hljs-number\">1</span>][y2] - s[x2][y1 - <span class=\"hljs-number\">1</span>] + s[x1 - <span class=\"hljs-number\">1</span>][y1 - <span class=\"hljs-number\">1</span>]<br><br><br><span class=\"hljs-comment\">// 差分主要的思想</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x1, <span class=\"hljs-type\">int</span> y1, <span class=\"hljs-type\">int</span> x2, <span class=\"hljs-type\">int</span> y2, <span class=\"hljs-type\">int</span> c)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    b[x1][y1] += c;<br>    b[x2 + <span class=\"hljs-number\">1</span>][y1] -= c;<br>    b[x1][y2 + <span class=\"hljs-number\">1</span>] -= c;<br>    b[x2 + <span class=\"hljs-number\">1</span>][y2 + <span class=\"hljs-number\">1</span>] += c;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"5-双指针\"><a href=\"#5-双指针\" class=\"headerlink\" title=\"5. 双指针\"></a>5. 双指针</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>; i &lt; n; i ++ )<br>&#123;<br>    s[q[i]] ++ ;<br>    <span class=\"hljs-keyword\">while</span> (j &lt; i &amp;&amp; <span class=\"hljs-built_in\">check</span>(j, i)) j++;<br>    res = <span class=\"hljs-built_in\">max</span>(res, i - j + <span class=\"hljs-number\">1</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"6-位运算-待更新\"><a href=\"#6-位运算-待更新\" class=\"headerlink\" title=\"6. 位运算(待更新)\"></a>6. 位运算(待更新)</h3><p>x &amp; -x = x &amp; (~x + 1);</p>\n<h3 id=\"7-离散化-待更新\"><a href=\"#7-离散化-待更新\" class=\"headerlink\" title=\"7. 离散化(待更新)\"></a>7. 离散化(待更新)</h3><h3 id=\"8-区间合并\"><a href=\"#8-区间合并\" class=\"headerlink\" title=\"8. 区间合并\"></a>8. 区间合并</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(vector&lt;PII&gt; &amp;segs)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    vector&lt;PII&gt; res;<br><br>    <span class=\"hljs-built_in\">sort</span>(segs.<span class=\"hljs-built_in\">begin</span>(), segs.<span class=\"hljs-built_in\">end</span>());<br><br>    <span class=\"hljs-type\">int</span> st = <span class=\"hljs-number\">-2e9</span>, ed = <span class=\"hljs-number\">-2e9</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> seg : segs)<br>        <span class=\"hljs-keyword\">if</span> (ed &lt; seg.first)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (st != <span class=\"hljs-number\">-2e9</span>) res.<span class=\"hljs-built_in\">push_back</span>(&#123;st, ed&#125;);<br>            st = seg.first, ed = seg.second;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> ed = <span class=\"hljs-built_in\">max</span>(ed, seg.second);<br><br>    <span class=\"hljs-keyword\">if</span> (st != <span class=\"hljs-number\">-2e9</span>) res.<span class=\"hljs-built_in\">push_back</span>(&#123;st, ed&#125;);<br><br>    segs = res;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n","site":{"data":{}},"wordcount":1821,"excerpt":"","more":"<h2 id=\"算法模板\"><a href=\"#算法模板\" class=\"headerlink\" title=\"算法模板\"></a>算法模板</h2><h3 id=\"1-快速排序\"><a href=\"#1-快速排序\" class=\"headerlink\" title=\"1. 快速排序\"></a>1. 快速排序</h3><p>快速排序这里使用的是分治的算法思想，分治算法其核心思想是“分而治之”，其是将一个大问题分解成多个相同模式的小问题，然后递归的求解各个小问题，再将小问题的解合并成大问题的解。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> q[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\"></span>&#123;<br><br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br><br>    <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = q[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-keyword\">while</span> (i &lt; j)<br>    &#123;<br>        <span class=\"hljs-keyword\">do</span> i ++ ; <span class=\"hljs-keyword\">while</span> (q[i] &lt; x);<br>        <span class=\"hljs-keyword\">do</span> j -- ; <span class=\"hljs-keyword\">while</span> (q[j] &gt; x);<br>        <span class=\"hljs-keyword\">if</span> (i &lt; j) <span class=\"hljs-built_in\">swap</span>(q[i], q[j]);<br>    &#125;<br><br>    <span class=\"hljs-built_in\">quick_sort</span>(q, l, j);<br>    <span class=\"hljs-built_in\">quick_sort</span>(q, j + <span class=\"hljs-number\">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-归并排序\"><a href=\"#2-归并排序\" class=\"headerlink\" title=\"2. 归并排序\"></a>2. 归并排序</h3><p>归并排序也是采用分治的思想。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> q[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br><br>    <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br><br>    <span class=\"hljs-built_in\">merge_sort</span>(q, l, mid), <span class=\"hljs-built_in\">merge_sort</span>(q, mid + <span class=\"hljs-number\">1</span>, r);<br><br>    <span class=\"hljs-type\">int</span> k = <span class=\"hljs-number\">0</span>, i = l, j = mid + <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class=\"hljs-keyword\">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];<br>        <span class=\"hljs-keyword\">else</span> tmp[k ++ ] = q[j ++ ];<br>    <span class=\"hljs-keyword\">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<br>    <span class=\"hljs-keyword\">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br><br>    <span class=\"hljs-keyword\">for</span> (i = l, j = <span class=\"hljs-number\">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"3-二分\"><a href=\"#3-二分\" class=\"headerlink\" title=\"3. 二分\"></a>3. 二分</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// 找左边第一个匹配的元素</span><br><span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">0</span>, r = n - <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">while</span> (l &lt; r)<br>&#123;<br>    <span class=\"hljs-type\">int</span> mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span> (q[mid] &gt;= x) r = mid;<br>    <span class=\"hljs-keyword\">else</span> l = mid + <span class=\"hljs-number\">1</span>;<br>&#125;<br><br><span class=\"hljs-comment\">// 找右边第一个匹配的元素</span><br><span class=\"hljs-type\">int</span> l = <span class=\"hljs-number\">0</span>, r = n - <span class=\"hljs-number\">1</span>;<br><span class=\"hljs-keyword\">while</span> (l &lt; r)<br>&#123;<br>    <span class=\"hljs-type\">int</span> mid = l + r + <span class=\"hljs-number\">1</span>&gt;&gt; <span class=\"hljs-number\">1</span>;<br>    <span class=\"hljs-keyword\">if</span> (q[mid] &lt;= x) l = mid;<br>    <span class=\"hljs-keyword\">else</span> r = mid - <span class=\"hljs-number\">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"4-前缀和、差分（只看二维情况，以为过于简单）\"><a href=\"#4-前缀和、差分（只看二维情况，以为过于简单）\" class=\"headerlink\" title=\"4. 前缀和、差分（只看二维情况，以为过于简单）\"></a>4. 前缀和、差分（只看二维情况，以为过于简单）</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-comment\">// (i, j)的前缀和</span><br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">1</span>; i &lt;= n; i ++ )<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> j = <span class=\"hljs-number\">1</span>; j &lt;= m; j ++ )<br>        s[i][j] += s[i - <span class=\"hljs-number\">1</span>][j] + s[i][j - <span class=\"hljs-number\">1</span>] - s[i - <span class=\"hljs-number\">1</span>][j - <span class=\"hljs-number\">1</span>];<br><br><span class=\"hljs-comment\">// 某个子矩阵的前缀和（x2 &gt; x1, y2 &gt; y1)</span><br>s[x2][y2] - s[x1 - <span class=\"hljs-number\">1</span>][y2] - s[x2][y1 - <span class=\"hljs-number\">1</span>] + s[x1 - <span class=\"hljs-number\">1</span>][y1 - <span class=\"hljs-number\">1</span>]<br><br><br><span class=\"hljs-comment\">// 差分主要的思想</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x1, <span class=\"hljs-type\">int</span> y1, <span class=\"hljs-type\">int</span> x2, <span class=\"hljs-type\">int</span> y2, <span class=\"hljs-type\">int</span> c)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    b[x1][y1] += c;<br>    b[x2 + <span class=\"hljs-number\">1</span>][y1] -= c;<br>    b[x1][y2 + <span class=\"hljs-number\">1</span>] -= c;<br>    b[x2 + <span class=\"hljs-number\">1</span>][y2 + <span class=\"hljs-number\">1</span>] += c;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-双指针\"><a href=\"#5-双指针\" class=\"headerlink\" title=\"5. 双指针\"></a>5. 双指针</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> i = <span class=\"hljs-number\">0</span>, j = <span class=\"hljs-number\">0</span>; i &lt; n; i ++ )<br>&#123;<br>    s[q[i]] ++ ;<br>    <span class=\"hljs-keyword\">while</span> (j &lt; i &amp;&amp; <span class=\"hljs-built_in\">check</span>(j, i)) j++;<br>    res = <span class=\"hljs-built_in\">max</span>(res, i - j + <span class=\"hljs-number\">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-位运算-待更新\"><a href=\"#6-位运算-待更新\" class=\"headerlink\" title=\"6. 位运算(待更新)\"></a>6. 位运算(待更新)</h3><p>x &amp; -x = x &amp; (~x + 1);</p>\n<h3 id=\"7-离散化-待更新\"><a href=\"#7-离散化-待更新\" class=\"headerlink\" title=\"7. 离散化(待更新)\"></a>7. 离散化(待更新)</h3><h3 id=\"8-区间合并\"><a href=\"#8-区间合并\" class=\"headerlink\" title=\"8. 区间合并\"></a>8. 区间合并</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">merge</span><span class=\"hljs-params\">(vector&lt;PII&gt; &amp;segs)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    vector&lt;PII&gt; res;<br><br>    <span class=\"hljs-built_in\">sort</span>(segs.<span class=\"hljs-built_in\">begin</span>(), segs.<span class=\"hljs-built_in\">end</span>());<br><br>    <span class=\"hljs-type\">int</span> st = <span class=\"hljs-number\">-2e9</span>, ed = <span class=\"hljs-number\">-2e9</span>;<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">auto</span> seg : segs)<br>        <span class=\"hljs-keyword\">if</span> (ed &lt; seg.first)<br>        &#123;<br>            <span class=\"hljs-keyword\">if</span> (st != <span class=\"hljs-number\">-2e9</span>) res.<span class=\"hljs-built_in\">push_back</span>(&#123;st, ed&#125;);<br>            st = seg.first, ed = seg.second;<br>        &#125;<br>        <span class=\"hljs-keyword\">else</span> ed = <span class=\"hljs-built_in\">max</span>(ed, seg.second);<br><br>    <span class=\"hljs-keyword\">if</span> (st != <span class=\"hljs-number\">-2e9</span>) res.<span class=\"hljs-built_in\">push_back</span>(&#123;st, ed&#125;);<br><br>    segs = res;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n"},{"title":"设计模式简介","date":"2022-06-30T08:54:44.000Z","description":"简单地介绍设计模式","_content":"# 设计模式简介\n设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的实验和错误总结出来的。\n\n设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式是代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。\n\n## 什么是 GOF （四人帮，全拼 Gang of Four）\n在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Pattern - Elements of Reusable Object-Oriented Software （中文译名：设计模式 - 可复用的面对对象软件元素）的书，该书首次提到了软件开发中设计模式的概念。\n四位作者合称 GOF （四人帮， 全拼 Gang of Four）。他们所提出的设计模式主要是基于以下的面对对象设计原则。\n* 面对接口编程而不是面对实现编程。\n* 优先使用对象组合而不是继承。\n\n## 设计模式的使用\n设计模式在软件开发中的两个主要用途。\n### 1. 开发人员的共用平台\n设计模式提供了一个标准的术语系统，且具体到特定的情景。例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。\n\n### 2. 最佳的实践\n设计模式已经经历了很长的一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。\n\n## 设计模式的类型\n根据设计模式的参考书 Design Pattern - Elements of Reusable Object - Oriented Software（中文译名：设计模式 - 可复用的面对对象软件元素）中所提到的，总共有23 种设计模式。这些设计模式可以分为三大类：创建型模式（Creational Patterns)、结构性模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我还会讨论另一种设计模式：J2EE 设计模式。\n\n\n模式     |  描述 | 包括\n-------- | ---------- | --------\n创建型模式  |  这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。 这使得程序在判断针对某个给定实力需要创建哪些对象时更加灵活   | - 工厂模式（Factory Pattern）<br> - 抽象工厂模式（Abstract Factory Pattern）<br> - 单例模式（Singleton Pattern） <br> - 建造者模式（Builder Pattern）<br> -原型模式（Prototype Pattern）\n结构型模式  |  这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。  | - 适配器模式（Adapter Pattern） <br> - 桥接模式（Bridge Pattern） <br> - 过滤器模式（Filter 、Criteria Pattern） <br> - 组合模式（Composite Pattern）<br> - 装饰器模式（Decorator Pattern）<br> - 外观模式（Facade Pattern）<br> - 享元模式（Flyweight Pattern） <br> - 代理模式（Proxy Pattern）\n行为型模式  |  这些设计模式特别关注对象之间的通信   | - 责任链模式（Chain of Responsibility Pattern） <br> - 命令模式（Command Pattern）<br> - 解释器模式（Interpreter Pattern）<br> - 迭代器模式（Iterator Pattern）<br> - 中介者模式（Mediator Pattern）<br> - 备忘录模式（Memento Pattern）<br> - 观察者模式（Observer Pattern）<br> - 状态模式（State Pattern）<br> - 空对象模式（Null Object Pattern）<br> - 策略模式（Strategy Pattern）<br> - 模板模式（Template Pattern）<br> - 访问者模式（Visitor Pattern）\nJ2EE 模式  |  这些设计模式特别关注表示层。这些模式是由 Sun Java Center 坚定的  | - MVC 模式（MVC Pattern）<br> - 业务代表模式（Business Delegate Pattern）<br> - 组合实体模式（Composite Entity Pattern）<br> - 数据访问对象模式（Data Acess Object Pattern）<br> - 前端控制器模式（Front Controller Pattern）<br> - 拦截过滤器模式（Intercepting Filter Pattern）<br> - 服务定位器模式（Service Locator Pattern）<br> - 传输对象模式（Transfer Object Pattern）|\n\n下面用一个图片来整体描述一下设计模式之间的关系：\n![](https://atts.w3cschool.cn/attachments/day_211126/202111261752107158.jpg)\n\n## 设计模式的六大原则\n1. 开闭原则（Open Close Principle）\n开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简而言之，是为了是程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。\n\n2. 里氏代换原则（Liskov Substitution Principle）\n里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n3. 这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n\n4. 接口隔离原则（Interface Segregation Principle）\n这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n\n5. 迪米特法则，又称最少知道原则（Demeter Principle）\n最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n6. 合成复用原则（Composite Reuse Principle）\n合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。\n\n## 参考\n* [W3Cschool](https://www.w3cschool.cn)\n* 《设计模式 - 可复用的面向对象软件元素》","source":"_posts/design-pattern/设计模式简介.md","raw":"---\ntitle: 设计模式简介\ncategories: ['设计模式']\ndate: 2022-06-30 16:54:44\ntags: 设计模式\ndescription: 简单地介绍设计模式\n---\n# 设计模式简介\n设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的实验和错误总结出来的。\n\n设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式是代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。\n\n## 什么是 GOF （四人帮，全拼 Gang of Four）\n在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Pattern - Elements of Reusable Object-Oriented Software （中文译名：设计模式 - 可复用的面对对象软件元素）的书，该书首次提到了软件开发中设计模式的概念。\n四位作者合称 GOF （四人帮， 全拼 Gang of Four）。他们所提出的设计模式主要是基于以下的面对对象设计原则。\n* 面对接口编程而不是面对实现编程。\n* 优先使用对象组合而不是继承。\n\n## 设计模式的使用\n设计模式在软件开发中的两个主要用途。\n### 1. 开发人员的共用平台\n设计模式提供了一个标准的术语系统，且具体到特定的情景。例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。\n\n### 2. 最佳的实践\n设计模式已经经历了很长的一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。\n\n## 设计模式的类型\n根据设计模式的参考书 Design Pattern - Elements of Reusable Object - Oriented Software（中文译名：设计模式 - 可复用的面对对象软件元素）中所提到的，总共有23 种设计模式。这些设计模式可以分为三大类：创建型模式（Creational Patterns)、结构性模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我还会讨论另一种设计模式：J2EE 设计模式。\n\n\n模式     |  描述 | 包括\n-------- | ---------- | --------\n创建型模式  |  这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。 这使得程序在判断针对某个给定实力需要创建哪些对象时更加灵活   | - 工厂模式（Factory Pattern）<br> - 抽象工厂模式（Abstract Factory Pattern）<br> - 单例模式（Singleton Pattern） <br> - 建造者模式（Builder Pattern）<br> -原型模式（Prototype Pattern）\n结构型模式  |  这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。  | - 适配器模式（Adapter Pattern） <br> - 桥接模式（Bridge Pattern） <br> - 过滤器模式（Filter 、Criteria Pattern） <br> - 组合模式（Composite Pattern）<br> - 装饰器模式（Decorator Pattern）<br> - 外观模式（Facade Pattern）<br> - 享元模式（Flyweight Pattern） <br> - 代理模式（Proxy Pattern）\n行为型模式  |  这些设计模式特别关注对象之间的通信   | - 责任链模式（Chain of Responsibility Pattern） <br> - 命令模式（Command Pattern）<br> - 解释器模式（Interpreter Pattern）<br> - 迭代器模式（Iterator Pattern）<br> - 中介者模式（Mediator Pattern）<br> - 备忘录模式（Memento Pattern）<br> - 观察者模式（Observer Pattern）<br> - 状态模式（State Pattern）<br> - 空对象模式（Null Object Pattern）<br> - 策略模式（Strategy Pattern）<br> - 模板模式（Template Pattern）<br> - 访问者模式（Visitor Pattern）\nJ2EE 模式  |  这些设计模式特别关注表示层。这些模式是由 Sun Java Center 坚定的  | - MVC 模式（MVC Pattern）<br> - 业务代表模式（Business Delegate Pattern）<br> - 组合实体模式（Composite Entity Pattern）<br> - 数据访问对象模式（Data Acess Object Pattern）<br> - 前端控制器模式（Front Controller Pattern）<br> - 拦截过滤器模式（Intercepting Filter Pattern）<br> - 服务定位器模式（Service Locator Pattern）<br> - 传输对象模式（Transfer Object Pattern）|\n\n下面用一个图片来整体描述一下设计模式之间的关系：\n![](https://atts.w3cschool.cn/attachments/day_211126/202111261752107158.jpg)\n\n## 设计模式的六大原则\n1. 开闭原则（Open Close Principle）\n开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简而言之，是为了是程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。\n\n2. 里氏代换原则（Liskov Substitution Principle）\n里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n3. 这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。\n\n4. 接口隔离原则（Interface Segregation Principle）\n这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。\n\n5. 迪米特法则，又称最少知道原则（Demeter Principle）\n最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。\n\n6. 合成复用原则（Composite Reuse Principle）\n合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。\n\n## 参考\n* [W3Cschool](https://www.w3cschool.cn)\n* 《设计模式 - 可复用的面向对象软件元素》","slug":"design-pattern/设计模式简介","published":1,"updated":"2022-06-30T10:00:33.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl53jo0it0004i8vp5ekh3a5u","content":"<h1 id=\"设计模式简介\"><a href=\"#设计模式简介\" class=\"headerlink\" title=\"设计模式简介\"></a>设计模式简介</h1><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的实验和错误总结出来的。</p>\n<p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式是代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>\n<h2 id=\"什么是-GOF-（四人帮，全拼-Gang-of-Four）\"><a href=\"#什么是-GOF-（四人帮，全拼-Gang-of-Four）\" class=\"headerlink\" title=\"什么是 GOF （四人帮，全拼 Gang of Four）\"></a>什么是 GOF （四人帮，全拼 Gang of Four）</h2><p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Pattern - Elements of Reusable Object-Oriented Software （中文译名：设计模式 - 可复用的面对对象软件元素）的书，该书首次提到了软件开发中设计模式的概念。<br>四位作者合称 GOF （四人帮， 全拼 Gang of Four）。他们所提出的设计模式主要是基于以下的面对对象设计原则。</p>\n<ul>\n<li>面对接口编程而不是面对实现编程。</li>\n<li>优先使用对象组合而不是继承。</li>\n</ul>\n<h2 id=\"设计模式的使用\"><a href=\"#设计模式的使用\" class=\"headerlink\" title=\"设计模式的使用\"></a>设计模式的使用</h2><p>设计模式在软件开发中的两个主要用途。</p>\n<h3 id=\"1-开发人员的共用平台\"><a href=\"#1-开发人员的共用平台\" class=\"headerlink\" title=\"1. 开发人员的共用平台\"></a>1. 开发人员的共用平台</h3><p>设计模式提供了一个标准的术语系统，且具体到特定的情景。例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。</p>\n<h3 id=\"2-最佳的实践\"><a href=\"#2-最佳的实践\" class=\"headerlink\" title=\"2. 最佳的实践\"></a>2. 最佳的实践</h3><p>设计模式已经经历了很长的一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p>\n<h2 id=\"设计模式的类型\"><a href=\"#设计模式的类型\" class=\"headerlink\" title=\"设计模式的类型\"></a>设计模式的类型</h2><p>根据设计模式的参考书 Design Pattern - Elements of Reusable Object - Oriented Software（中文译名：设计模式 - 可复用的面对对象软件元素）中所提到的，总共有23 种设计模式。这些设计模式可以分为三大类：创建型模式（Creational Patterns)、结构性模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我还会讨论另一种设计模式：J2EE 设计模式。</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n<th>包括</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>创建型模式</td>\n<td>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。 这使得程序在判断针对某个给定实力需要创建哪些对象时更加灵活</td>\n<td>- 工厂模式（Factory Pattern）<br> - 抽象工厂模式（Abstract Factory Pattern）<br> - 单例模式（Singleton Pattern） <br> - 建造者模式（Builder Pattern）<br> -原型模式（Prototype Pattern）</td>\n</tr>\n<tr>\n<td>结构型模式</td>\n<td>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</td>\n<td>- 适配器模式（Adapter Pattern） <br> - 桥接模式（Bridge Pattern） <br> - 过滤器模式（Filter 、Criteria Pattern） <br> - 组合模式（Composite Pattern）<br> - 装饰器模式（Decorator Pattern）<br> - 外观模式（Facade Pattern）<br> - 享元模式（Flyweight Pattern） <br> - 代理模式（Proxy Pattern）</td>\n</tr>\n<tr>\n<td>行为型模式</td>\n<td>这些设计模式特别关注对象之间的通信</td>\n<td>- 责任链模式（Chain of Responsibility Pattern） <br> - 命令模式（Command Pattern）<br> - 解释器模式（Interpreter Pattern）<br> - 迭代器模式（Iterator Pattern）<br> - 中介者模式（Mediator Pattern）<br> - 备忘录模式（Memento Pattern）<br> - 观察者模式（Observer Pattern）<br> - 状态模式（State Pattern）<br> - 空对象模式（Null Object Pattern）<br> - 策略模式（Strategy Pattern）<br> - 模板模式（Template Pattern）<br> - 访问者模式（Visitor Pattern）</td>\n</tr>\n<tr>\n<td>J2EE 模式</td>\n<td>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 坚定的</td>\n<td>- MVC 模式（MVC Pattern）<br> - 业务代表模式（Business Delegate Pattern）<br> - 组合实体模式（Composite Entity Pattern）<br> - 数据访问对象模式（Data Acess Object Pattern）<br> - 前端控制器模式（Front Controller Pattern）<br> - 拦截过滤器模式（Intercepting Filter Pattern）<br> - 服务定位器模式（Service Locator Pattern）<br> - 传输对象模式（Transfer Object Pattern）</td>\n</tr>\n</tbody></table>\n<p>下面用一个图片来整体描述一下设计模式之间的关系：<br><img src=\"https://atts.w3cschool.cn/attachments/day_211126/202111261752107158.jpg\"></p>\n<h2 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h2><ol>\n<li><p>开闭原则（Open Close Principle）<br>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简而言之，是为了是程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>\n</li>\n<li><p>里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>\n</li>\n<li><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>\n</li>\n<li><p>接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>\n</li>\n<li><p>迪米特法则，又称最少知道原则（Demeter Principle）<br>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n</li>\n<li><p>合成复用原则（Composite Reuse Principle）<br>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>\n</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.w3cschool.cn/\">W3Cschool</a></li>\n<li>《设计模式 - 可复用的面向对象软件元素》</li>\n</ul>\n","site":{"data":{}},"wordcount":2881,"excerpt":"","more":"<h1 id=\"设计模式简介\"><a href=\"#设计模式简介\" class=\"headerlink\" title=\"设计模式简介\"></a>设计模式简介</h1><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的实验和错误总结出来的。</p>\n<p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式是代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p>\n<h2 id=\"什么是-GOF-（四人帮，全拼-Gang-of-Four）\"><a href=\"#什么是-GOF-（四人帮，全拼-Gang-of-Four）\" class=\"headerlink\" title=\"什么是 GOF （四人帮，全拼 Gang of Four）\"></a>什么是 GOF （四人帮，全拼 Gang of Four）</h2><p>在 1994 年，由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 四人合著出版了一本名为 Design Pattern - Elements of Reusable Object-Oriented Software （中文译名：设计模式 - 可复用的面对对象软件元素）的书，该书首次提到了软件开发中设计模式的概念。<br>四位作者合称 GOF （四人帮， 全拼 Gang of Four）。他们所提出的设计模式主要是基于以下的面对对象设计原则。</p>\n<ul>\n<li>面对接口编程而不是面对实现编程。</li>\n<li>优先使用对象组合而不是继承。</li>\n</ul>\n<h2 id=\"设计模式的使用\"><a href=\"#设计模式的使用\" class=\"headerlink\" title=\"设计模式的使用\"></a>设计模式的使用</h2><p>设计模式在软件开发中的两个主要用途。</p>\n<h3 id=\"1-开发人员的共用平台\"><a href=\"#1-开发人员的共用平台\" class=\"headerlink\" title=\"1. 开发人员的共用平台\"></a>1. 开发人员的共用平台</h3><p>设计模式提供了一个标准的术语系统，且具体到特定的情景。例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。</p>\n<h3 id=\"2-最佳的实践\"><a href=\"#2-最佳的实践\" class=\"headerlink\" title=\"2. 最佳的实践\"></a>2. 最佳的实践</h3><p>设计模式已经经历了很长的一段时间的发展，它们提供了软件开发过程中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。</p>\n<h2 id=\"设计模式的类型\"><a href=\"#设计模式的类型\" class=\"headerlink\" title=\"设计模式的类型\"></a>设计模式的类型</h2><p>根据设计模式的参考书 Design Pattern - Elements of Reusable Object - Oriented Software（中文译名：设计模式 - 可复用的面对对象软件元素）中所提到的，总共有23 种设计模式。这些设计模式可以分为三大类：创建型模式（Creational Patterns)、结构性模式（Structural Patterns）、行为型模式（Behavioral Patterns）。当然，我还会讨论另一种设计模式：J2EE 设计模式。</p>\n<table>\n<thead>\n<tr>\n<th>模式</th>\n<th>描述</th>\n<th>包括</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>创建型模式</td>\n<td>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。 这使得程序在判断针对某个给定实力需要创建哪些对象时更加灵活</td>\n<td>- 工厂模式（Factory Pattern）<br> - 抽象工厂模式（Abstract Factory Pattern）<br> - 单例模式（Singleton Pattern） <br> - 建造者模式（Builder Pattern）<br> -原型模式（Prototype Pattern）</td>\n</tr>\n<tr>\n<td>结构型模式</td>\n<td>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</td>\n<td>- 适配器模式（Adapter Pattern） <br> - 桥接模式（Bridge Pattern） <br> - 过滤器模式（Filter 、Criteria Pattern） <br> - 组合模式（Composite Pattern）<br> - 装饰器模式（Decorator Pattern）<br> - 外观模式（Facade Pattern）<br> - 享元模式（Flyweight Pattern） <br> - 代理模式（Proxy Pattern）</td>\n</tr>\n<tr>\n<td>行为型模式</td>\n<td>这些设计模式特别关注对象之间的通信</td>\n<td>- 责任链模式（Chain of Responsibility Pattern） <br> - 命令模式（Command Pattern）<br> - 解释器模式（Interpreter Pattern）<br> - 迭代器模式（Iterator Pattern）<br> - 中介者模式（Mediator Pattern）<br> - 备忘录模式（Memento Pattern）<br> - 观察者模式（Observer Pattern）<br> - 状态模式（State Pattern）<br> - 空对象模式（Null Object Pattern）<br> - 策略模式（Strategy Pattern）<br> - 模板模式（Template Pattern）<br> - 访问者模式（Visitor Pattern）</td>\n</tr>\n<tr>\n<td>J2EE 模式</td>\n<td>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 坚定的</td>\n<td>- MVC 模式（MVC Pattern）<br> - 业务代表模式（Business Delegate Pattern）<br> - 组合实体模式（Composite Entity Pattern）<br> - 数据访问对象模式（Data Acess Object Pattern）<br> - 前端控制器模式（Front Controller Pattern）<br> - 拦截过滤器模式（Intercepting Filter Pattern）<br> - 服务定位器模式（Service Locator Pattern）<br> - 传输对象模式（Transfer Object Pattern）</td>\n</tr>\n</tbody></table>\n<p>下面用一个图片来整体描述一下设计模式之间的关系：<br><img src=\"https://atts.w3cschool.cn/attachments/day_211126/202111261752107158.jpg\"></p>\n<h2 id=\"设计模式的六大原则\"><a href=\"#设计模式的六大原则\" class=\"headerlink\" title=\"设计模式的六大原则\"></a>设计模式的六大原则</h2><ol>\n<li><p>开闭原则（Open Close Principle）<br>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简而言之，是为了是程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>\n</li>\n<li><p>里氏代换原则（Liskov Substitution Principle）<br>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>\n</li>\n<li><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>\n</li>\n<li><p>接口隔离原则（Interface Segregation Principle）<br>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>\n</li>\n<li><p>迪米特法则，又称最少知道原则（Demeter Principle）<br>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>\n</li>\n<li><p>合成复用原则（Composite Reuse Principle）<br>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p>\n</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.w3cschool.cn/\">W3Cschool</a></li>\n<li>《设计模式 - 可复用的面向对象软件元素》</li>\n</ul>\n"},{"title":"2PC协议与3PC协议","date":"2022-04-02T06:26:10.000Z","description":"简单介绍 2PC 与 3PC","_content":"# 1. 2PC 与 3PC 的由来\n在分布式系统中，每一个机器节点虽然都能够明确地知道自己在进行事务操作过程中的结果是成功或失败，但却无法直接获取到其他分布式节点的操作结果。因此，当一个事务操作需要跨越多个分布式节点的时候，为了保持事务处理的 ACID 特性，就需要引入一个称为 \"协调者（Coordinator）\"的组件来统一调度所有分布式节点的执行逻辑，这些被调度的分布式节点则被称为 \"参与者（Participant）\"。协调者负责调度参与者的行为，并最终决定这些参与者是否要把事务真正进行提交。基于这个思想，衍生出了二阶段提交（2PC）和三阶段提交（3PC）两种协议。\n# 2. 2PC\n2PC, 是 Two-Phase Commit 的缩写，即二阶段提交，是计算机网络尤其是在数据库领域一致性二设计的一种算法。通常，二阶段提交协议也被认为是一种一致性协议，用来保证分布式系统的一致性。目前，绝大部分的关系型数据库都是采用二阶段提交协议来完成分布式事务处理的，利用该协议能够非常方便地完成所有分布式事务参与者的协调，统一决定事务的提交或回滚，从而能够有效地保证分布式数据一致性，因此二阶段提交协议被广泛地应用在许多分布式系统中。\n\n## 2.1 2PC协议执行过程\n2PC 提交协议是将事务的提交过程分成了两个阶段来进行处理，其执行流程如下：\n**阶段一：提交事务请求：**\n1. 事务询问。\n协调者向所有参与者发送事务内容，询问是否可以事务提交操作，并开始等待各参与者的响应。\n2. 执行事务。\n各参与者节点执行事务操作，并将 Undo 和 Redo 信息记入事务日志中。\n3. 各参与者向协调者反馈事务询问的响应。\n如果参与者成功地执行了事务操作，那么久反馈给协调者 Yes 响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者 No 响应，表示事务不可以执行。<br/>\n\n> 上面的内容形式上近似是协调者组织各参与者对一次事务操作的投票表态过程，因此二阶段提交协议的阶段一也被称为 \"投票阶段\" ，即各参与者投票表明是否要继续执行接下去的事务提交操作。\n\n**阶段二：执行事务提交**\n在阶段二中，协调者会根据各参与者的反馈情况来决定最终是否可以进行事务提交操作，正常情况下，包含以下两种可能：<br/>\n执行事务提交<br/>\n假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务提交。\n1. 发送提交请求。\n协调者向所有参与者节点发出 Commit 请求。\n2. 事务提交。\n参与者接收到协调者发送的 Commit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。\n3. 反馈事务提交结果。\n参与者在完成事务提交之后，向协调者发送 Ack 消息。\n3. 完成事务。\n协调者接收到所有参与者反馈的 Ack 消息后， 完成事务。<br/>\n\n中断事务<br/>\n假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。\n1. 发送回滚请求。\n协调者向所有参与者节点发送 Rollback 请求。\n2. 事务回滚。\n参与者接收到 Rollback 请求后，会利用其在阶段一中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。\n3. 反馈事务回滚结果。\n参与者在完成事务回滚之后，向协调者发送 Ack 消息。\n4. 中断事务。\n协调者接收到所有参与者反馈的 Ack 消息后，完成事务中断。\n\n## 2.2. 2PC的优缺点\n### 2.2.1 优点\n二阶段提交协议的优点：原理简单，实现方便。\n### 2.2.2 缺点\n二阶段提交协议的缺点：同步阻塞、单点问题、脑裂造成数据不一致、过于保守。<br/>\n同步阻塞<br/>\n二阶段提交协议存在的最明显也是最大的一个问题就是同步阻塞，这会极大地限制分布式系统的性能。在二阶段提交的执行过程中，所有参与该事务操作的逻辑都处于阻塞状态，也就是说，各个参与者在等待其他参与者响应的过程中，将无法进行其它任何操作。<br/>\n单点问题<br/>\n在上面的讲解中，协调者的角色在整个二阶段提交协议中起到了非常重要的作用。一旦协调者出现问题，那么整个二阶段提交流程将无法运转，更为严重的是，如果协调者是在二阶段中出现问题的话，那么其他参与者将会一直处于锁定事务资源的状态中，而无法继续完事务操作。<br/>\n脑裂造成数据不一致<br/>\n在二阶段提交协议的阶段二，即执行事务提交的时候，当协调者向所有的参与者发送 Commit 请求之后，发生了局部网络异常或者是协调者在尚未发送完 Commit 请求之前自身发送了崩溃，导致最终只有部分参与者收到了 Commit 请求。于是，这部分收到了 Commit 请求的参与者就会进行事务的提交，而其他没没有收到 Commit 请求的参与者则无法进行事务提交，于是整个分布式系统便出现了数据不一致的现象。<br/>\n过于保守<br/>\n如果协调者指示参与者进行事务提交询问的过程中，参与者出现故障而导致协调者始终无法获取到所有参与者的响应信息的话，这时协调者只能依靠其自身的超时机制来判断是否需要中断事务，这样的策略显得比较保守。换句话说，二阶段提交协议没有设计较为完善的容错机制，任意一个节点的失败都会导致整个事务的失败。\n\n# 3. 3PC\n上面我们讲解了二阶段提交协议的设计和实现原理，并明确指出了其在实际运行过程中可能存在的诸如同步阻塞、协调者的单点问题、脑裂造成的数据不一致和过于保守的容错机制等缺陷，因此研究者在二阶段提交协议的基础上进行了改进，提出了三阶段提交协议。\n\n## 3.1 协议说明\n3PC，是 Three-Phase Commit 的缩写，即三阶段提交，是 2PC 的改进版本，它将二阶段提交协议的\"提交事务请求\"过程一分为二，新城了由 CanCommit、PreCommit和do Commit三个阶段组成的事务处理协议，下面进行说明：\n\n**阶段一：CanCommit**\n1. 事务询问。\n协调者向所有参与者发送一个包含事务内容的 canCommit 请求，询问是否可以执行事务操作，并开始等待各参与者的响应。\n2. 各参与者向协调者反馈事务询问的响应。\n参与者在接收到来自协调者的 canCommit 请求后，正常情况下，如果其自身认为可以顺利执行事务，那么会反馈 Yes 响应，并进入预备状态，否则反馈 No 响应。\n\n**阶段二：PreCommit**\n在阶段二中，协调者会根据各参与者的反馈情况来决定是否可以进行事务的 PreCommit 操作，正常情况下，包含两种可能。\n\n**执行事务提交**\n假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务预提交。\n\n1. 发送预提交请求。\n协调者向所有参与者阶段发出 preCommit 的请求，并进入 Prepared 阶段。\n2. 事务预提交。\n参与者接收到 PreCommit 请求后，会执行事务操作，并将 Undo 和 Redo 信息记录到事务日志中。\n3. 各参与者向协调者反馈事务执行的响应。\n如果参与者成功执行了事务操作，那么就会反馈给协调者 Ack 响应，同时等待最终的指令：提交（commit）或终止（abort）。\n\n**中断事务**\n假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。\n1. 发送中断请求。\n协调者向所有参与者阶段发愁abort请求。\n2. 中断事务。\n无论是收到来自协调者的 abort 请求，或者是在等待协调者请求过程中超时，参与者都会中断事务。\n\n**阶段三：doCommit**\n该阶段将进行真正的事务提交，会存在以下两种可能的情况。\n\n**执行请求**\n1. 发送提交请求。\n进入这一阶段，假设协调者处于正常工作状态，并且它接收到了来自所有参与者的 Ack 响应，那么它将从 \"预提交\" 状态换到 \"提交\" 状态，并向所有参与者发送 doCommit 请求。\n2. 事务提交。\n参与者接收到 doCommit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。\n3. 反馈事务提交结果。\n参与者在完成事务提交之后，向协调者发送 Ack 消息。\n4. 完成事务。\n协调者接收到所有参与者反馈的 Ack 消息后，完成事务。\n\n**中断事务**\n进入这一阶段，假设协调者处于正常工作状态，并且任意一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。\n1. 发送中断请求。\n协调者向所有的参与者节点发送 abort 请求。\n2. 事务回滚。\n参与者接收到 abort 请求后，会利用其在阶段二中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务期间占用的资源。\n3. 反馈事务回滚结果。\n参与者而在完成事务回滚之后，向协调者发送 Ack 消息。\n4. 中断事务。\n协调者接收到所有参与者反馈的 Ack 消息后，中断事务。\n\n### 3.1.1 可能遇到的问题\n- 协调者出现问题。\n- 协调者和参与者之间的网络出现故障。\n无论出现哪种情况，最终都会导致参与者无法及时接收到来自协调者的 doCommit 或是 abort 请求，针对这样的异常情况，参与者都会在等待超时之后，继续进行事务提交。\n\n### 3.1.2 优缺点\n**优点：**相较于二阶段提交协议，三阶段提交协议最大的优点就是降低了参与者的阻塞范围，并且能够在出现单点故障后继续达成一致。\n\n**缺点：**三阶段提交协议在去除阻塞的同时也引入了新的问题，那就是在参与者接收到 preCommit 消息后，如果网路出现分区，此时协调者所在的节点和参与者无法进行正常的网络通信，在这种情况下，该参与者依然会进行事务的提交，这必然出现数据的不一致。\n\n\n# 4. 参考\n1. 《从Paxos到Zookeeper  分布式一致性原理与实践》","source":"_posts/distributed/concept/2PC协议与3PC协议.md","raw":"---\ntitle: 2PC协议与3PC协议\ncategories: ['分布式基础']\ndate: 2022-04-02 14:26:10\ntags: 分布式协议\ndescription: 简单介绍 2PC 与 3PC \n---\n# 1. 2PC 与 3PC 的由来\n在分布式系统中，每一个机器节点虽然都能够明确地知道自己在进行事务操作过程中的结果是成功或失败，但却无法直接获取到其他分布式节点的操作结果。因此，当一个事务操作需要跨越多个分布式节点的时候，为了保持事务处理的 ACID 特性，就需要引入一个称为 \"协调者（Coordinator）\"的组件来统一调度所有分布式节点的执行逻辑，这些被调度的分布式节点则被称为 \"参与者（Participant）\"。协调者负责调度参与者的行为，并最终决定这些参与者是否要把事务真正进行提交。基于这个思想，衍生出了二阶段提交（2PC）和三阶段提交（3PC）两种协议。\n# 2. 2PC\n2PC, 是 Two-Phase Commit 的缩写，即二阶段提交，是计算机网络尤其是在数据库领域一致性二设计的一种算法。通常，二阶段提交协议也被认为是一种一致性协议，用来保证分布式系统的一致性。目前，绝大部分的关系型数据库都是采用二阶段提交协议来完成分布式事务处理的，利用该协议能够非常方便地完成所有分布式事务参与者的协调，统一决定事务的提交或回滚，从而能够有效地保证分布式数据一致性，因此二阶段提交协议被广泛地应用在许多分布式系统中。\n\n## 2.1 2PC协议执行过程\n2PC 提交协议是将事务的提交过程分成了两个阶段来进行处理，其执行流程如下：\n**阶段一：提交事务请求：**\n1. 事务询问。\n协调者向所有参与者发送事务内容，询问是否可以事务提交操作，并开始等待各参与者的响应。\n2. 执行事务。\n各参与者节点执行事务操作，并将 Undo 和 Redo 信息记入事务日志中。\n3. 各参与者向协调者反馈事务询问的响应。\n如果参与者成功地执行了事务操作，那么久反馈给协调者 Yes 响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者 No 响应，表示事务不可以执行。<br/>\n\n> 上面的内容形式上近似是协调者组织各参与者对一次事务操作的投票表态过程，因此二阶段提交协议的阶段一也被称为 \"投票阶段\" ，即各参与者投票表明是否要继续执行接下去的事务提交操作。\n\n**阶段二：执行事务提交**\n在阶段二中，协调者会根据各参与者的反馈情况来决定最终是否可以进行事务提交操作，正常情况下，包含以下两种可能：<br/>\n执行事务提交<br/>\n假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务提交。\n1. 发送提交请求。\n协调者向所有参与者节点发出 Commit 请求。\n2. 事务提交。\n参与者接收到协调者发送的 Commit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。\n3. 反馈事务提交结果。\n参与者在完成事务提交之后，向协调者发送 Ack 消息。\n3. 完成事务。\n协调者接收到所有参与者反馈的 Ack 消息后， 完成事务。<br/>\n\n中断事务<br/>\n假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。\n1. 发送回滚请求。\n协调者向所有参与者节点发送 Rollback 请求。\n2. 事务回滚。\n参与者接收到 Rollback 请求后，会利用其在阶段一中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。\n3. 反馈事务回滚结果。\n参与者在完成事务回滚之后，向协调者发送 Ack 消息。\n4. 中断事务。\n协调者接收到所有参与者反馈的 Ack 消息后，完成事务中断。\n\n## 2.2. 2PC的优缺点\n### 2.2.1 优点\n二阶段提交协议的优点：原理简单，实现方便。\n### 2.2.2 缺点\n二阶段提交协议的缺点：同步阻塞、单点问题、脑裂造成数据不一致、过于保守。<br/>\n同步阻塞<br/>\n二阶段提交协议存在的最明显也是最大的一个问题就是同步阻塞，这会极大地限制分布式系统的性能。在二阶段提交的执行过程中，所有参与该事务操作的逻辑都处于阻塞状态，也就是说，各个参与者在等待其他参与者响应的过程中，将无法进行其它任何操作。<br/>\n单点问题<br/>\n在上面的讲解中，协调者的角色在整个二阶段提交协议中起到了非常重要的作用。一旦协调者出现问题，那么整个二阶段提交流程将无法运转，更为严重的是，如果协调者是在二阶段中出现问题的话，那么其他参与者将会一直处于锁定事务资源的状态中，而无法继续完事务操作。<br/>\n脑裂造成数据不一致<br/>\n在二阶段提交协议的阶段二，即执行事务提交的时候，当协调者向所有的参与者发送 Commit 请求之后，发生了局部网络异常或者是协调者在尚未发送完 Commit 请求之前自身发送了崩溃，导致最终只有部分参与者收到了 Commit 请求。于是，这部分收到了 Commit 请求的参与者就会进行事务的提交，而其他没没有收到 Commit 请求的参与者则无法进行事务提交，于是整个分布式系统便出现了数据不一致的现象。<br/>\n过于保守<br/>\n如果协调者指示参与者进行事务提交询问的过程中，参与者出现故障而导致协调者始终无法获取到所有参与者的响应信息的话，这时协调者只能依靠其自身的超时机制来判断是否需要中断事务，这样的策略显得比较保守。换句话说，二阶段提交协议没有设计较为完善的容错机制，任意一个节点的失败都会导致整个事务的失败。\n\n# 3. 3PC\n上面我们讲解了二阶段提交协议的设计和实现原理，并明确指出了其在实际运行过程中可能存在的诸如同步阻塞、协调者的单点问题、脑裂造成的数据不一致和过于保守的容错机制等缺陷，因此研究者在二阶段提交协议的基础上进行了改进，提出了三阶段提交协议。\n\n## 3.1 协议说明\n3PC，是 Three-Phase Commit 的缩写，即三阶段提交，是 2PC 的改进版本，它将二阶段提交协议的\"提交事务请求\"过程一分为二，新城了由 CanCommit、PreCommit和do Commit三个阶段组成的事务处理协议，下面进行说明：\n\n**阶段一：CanCommit**\n1. 事务询问。\n协调者向所有参与者发送一个包含事务内容的 canCommit 请求，询问是否可以执行事务操作，并开始等待各参与者的响应。\n2. 各参与者向协调者反馈事务询问的响应。\n参与者在接收到来自协调者的 canCommit 请求后，正常情况下，如果其自身认为可以顺利执行事务，那么会反馈 Yes 响应，并进入预备状态，否则反馈 No 响应。\n\n**阶段二：PreCommit**\n在阶段二中，协调者会根据各参与者的反馈情况来决定是否可以进行事务的 PreCommit 操作，正常情况下，包含两种可能。\n\n**执行事务提交**\n假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务预提交。\n\n1. 发送预提交请求。\n协调者向所有参与者阶段发出 preCommit 的请求，并进入 Prepared 阶段。\n2. 事务预提交。\n参与者接收到 PreCommit 请求后，会执行事务操作，并将 Undo 和 Redo 信息记录到事务日志中。\n3. 各参与者向协调者反馈事务执行的响应。\n如果参与者成功执行了事务操作，那么就会反馈给协调者 Ack 响应，同时等待最终的指令：提交（commit）或终止（abort）。\n\n**中断事务**\n假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。\n1. 发送中断请求。\n协调者向所有参与者阶段发愁abort请求。\n2. 中断事务。\n无论是收到来自协调者的 abort 请求，或者是在等待协调者请求过程中超时，参与者都会中断事务。\n\n**阶段三：doCommit**\n该阶段将进行真正的事务提交，会存在以下两种可能的情况。\n\n**执行请求**\n1. 发送提交请求。\n进入这一阶段，假设协调者处于正常工作状态，并且它接收到了来自所有参与者的 Ack 响应，那么它将从 \"预提交\" 状态换到 \"提交\" 状态，并向所有参与者发送 doCommit 请求。\n2. 事务提交。\n参与者接收到 doCommit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。\n3. 反馈事务提交结果。\n参与者在完成事务提交之后，向协调者发送 Ack 消息。\n4. 完成事务。\n协调者接收到所有参与者反馈的 Ack 消息后，完成事务。\n\n**中断事务**\n进入这一阶段，假设协调者处于正常工作状态，并且任意一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。\n1. 发送中断请求。\n协调者向所有的参与者节点发送 abort 请求。\n2. 事务回滚。\n参与者接收到 abort 请求后，会利用其在阶段二中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务期间占用的资源。\n3. 反馈事务回滚结果。\n参与者而在完成事务回滚之后，向协调者发送 Ack 消息。\n4. 中断事务。\n协调者接收到所有参与者反馈的 Ack 消息后，中断事务。\n\n### 3.1.1 可能遇到的问题\n- 协调者出现问题。\n- 协调者和参与者之间的网络出现故障。\n无论出现哪种情况，最终都会导致参与者无法及时接收到来自协调者的 doCommit 或是 abort 请求，针对这样的异常情况，参与者都会在等待超时之后，继续进行事务提交。\n\n### 3.1.2 优缺点\n**优点：**相较于二阶段提交协议，三阶段提交协议最大的优点就是降低了参与者的阻塞范围，并且能够在出现单点故障后继续达成一致。\n\n**缺点：**三阶段提交协议在去除阻塞的同时也引入了新的问题，那就是在参与者接收到 preCommit 消息后，如果网路出现分区，此时协调者所在的节点和参与者无法进行正常的网络通信，在这种情况下，该参与者依然会进行事务的提交，这必然出现数据的不一致。\n\n\n# 4. 参考\n1. 《从Paxos到Zookeeper  分布式一致性原理与实践》","slug":"distributed/concept/2PC协议与3PC协议","published":1,"updated":"2022-06-21T06:39:12.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl53jo0iu0005i8vpa232ak8h","content":"<h1 id=\"1-2PC-与-3PC-的由来\"><a href=\"#1-2PC-与-3PC-的由来\" class=\"headerlink\" title=\"1. 2PC 与 3PC 的由来\"></a>1. 2PC 与 3PC 的由来</h1><p>在分布式系统中，每一个机器节点虽然都能够明确地知道自己在进行事务操作过程中的结果是成功或失败，但却无法直接获取到其他分布式节点的操作结果。因此，当一个事务操作需要跨越多个分布式节点的时候，为了保持事务处理的 ACID 特性，就需要引入一个称为 “协调者（Coordinator）”的组件来统一调度所有分布式节点的执行逻辑，这些被调度的分布式节点则被称为 “参与者（Participant）”。协调者负责调度参与者的行为，并最终决定这些参与者是否要把事务真正进行提交。基于这个思想，衍生出了二阶段提交（2PC）和三阶段提交（3PC）两种协议。</p>\n<h1 id=\"2-2PC\"><a href=\"#2-2PC\" class=\"headerlink\" title=\"2. 2PC\"></a>2. 2PC</h1><p>2PC, 是 Two-Phase Commit 的缩写，即二阶段提交，是计算机网络尤其是在数据库领域一致性二设计的一种算法。通常，二阶段提交协议也被认为是一种一致性协议，用来保证分布式系统的一致性。目前，绝大部分的关系型数据库都是采用二阶段提交协议来完成分布式事务处理的，利用该协议能够非常方便地完成所有分布式事务参与者的协调，统一决定事务的提交或回滚，从而能够有效地保证分布式数据一致性，因此二阶段提交协议被广泛地应用在许多分布式系统中。</p>\n<h2 id=\"2-1-2PC协议执行过程\"><a href=\"#2-1-2PC协议执行过程\" class=\"headerlink\" title=\"2.1 2PC协议执行过程\"></a>2.1 2PC协议执行过程</h2><p>2PC 提交协议是将事务的提交过程分成了两个阶段来进行处理，其执行流程如下：<br><strong>阶段一：提交事务请求：</strong></p>\n<ol>\n<li>事务询问。<br>协调者向所有参与者发送事务内容，询问是否可以事务提交操作，并开始等待各参与者的响应。</li>\n<li>执行事务。<br>各参与者节点执行事务操作，并将 Undo 和 Redo 信息记入事务日志中。</li>\n<li>各参与者向协调者反馈事务询问的响应。<br>如果参与者成功地执行了事务操作，那么久反馈给协调者 Yes 响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者 No 响应，表示事务不可以执行。<br/></li>\n</ol>\n<blockquote>\n<p>上面的内容形式上近似是协调者组织各参与者对一次事务操作的投票表态过程，因此二阶段提交协议的阶段一也被称为 “投票阶段” ，即各参与者投票表明是否要继续执行接下去的事务提交操作。</p>\n</blockquote>\n<p><strong>阶段二：执行事务提交</strong><br>在阶段二中，协调者会根据各参与者的反馈情况来决定最终是否可以进行事务提交操作，正常情况下，包含以下两种可能：<br/><br>执行事务提交<br/><br>假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务提交。</p>\n<ol>\n<li>发送提交请求。<br>协调者向所有参与者节点发出 Commit 请求。</li>\n<li>事务提交。<br>参与者接收到协调者发送的 Commit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。</li>\n<li>反馈事务提交结果。<br>参与者在完成事务提交之后，向协调者发送 Ack 消息。</li>\n<li>完成事务。<br>协调者接收到所有参与者反馈的 Ack 消息后， 完成事务。<br/></li>\n</ol>\n<p>中断事务<br/><br>假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。</p>\n<ol>\n<li>发送回滚请求。<br>协调者向所有参与者节点发送 Rollback 请求。</li>\n<li>事务回滚。<br>参与者接收到 Rollback 请求后，会利用其在阶段一中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。</li>\n<li>反馈事务回滚结果。<br>参与者在完成事务回滚之后，向协调者发送 Ack 消息。</li>\n<li>中断事务。<br>协调者接收到所有参与者反馈的 Ack 消息后，完成事务中断。</li>\n</ol>\n<h2 id=\"2-2-2PC的优缺点\"><a href=\"#2-2-2PC的优缺点\" class=\"headerlink\" title=\"2.2. 2PC的优缺点\"></a>2.2. 2PC的优缺点</h2><h3 id=\"2-2-1-优点\"><a href=\"#2-2-1-优点\" class=\"headerlink\" title=\"2.2.1 优点\"></a>2.2.1 优点</h3><p>二阶段提交协议的优点：原理简单，实现方便。</p>\n<h3 id=\"2-2-2-缺点\"><a href=\"#2-2-2-缺点\" class=\"headerlink\" title=\"2.2.2 缺点\"></a>2.2.2 缺点</h3><p>二阶段提交协议的缺点：同步阻塞、单点问题、脑裂造成数据不一致、过于保守。<br/><br>同步阻塞<br/><br>二阶段提交协议存在的最明显也是最大的一个问题就是同步阻塞，这会极大地限制分布式系统的性能。在二阶段提交的执行过程中，所有参与该事务操作的逻辑都处于阻塞状态，也就是说，各个参与者在等待其他参与者响应的过程中，将无法进行其它任何操作。<br/><br>单点问题<br/><br>在上面的讲解中，协调者的角色在整个二阶段提交协议中起到了非常重要的作用。一旦协调者出现问题，那么整个二阶段提交流程将无法运转，更为严重的是，如果协调者是在二阶段中出现问题的话，那么其他参与者将会一直处于锁定事务资源的状态中，而无法继续完事务操作。<br/><br>脑裂造成数据不一致<br/><br>在二阶段提交协议的阶段二，即执行事务提交的时候，当协调者向所有的参与者发送 Commit 请求之后，发生了局部网络异常或者是协调者在尚未发送完 Commit 请求之前自身发送了崩溃，导致最终只有部分参与者收到了 Commit 请求。于是，这部分收到了 Commit 请求的参与者就会进行事务的提交，而其他没没有收到 Commit 请求的参与者则无法进行事务提交，于是整个分布式系统便出现了数据不一致的现象。<br/><br>过于保守<br/><br>如果协调者指示参与者进行事务提交询问的过程中，参与者出现故障而导致协调者始终无法获取到所有参与者的响应信息的话，这时协调者只能依靠其自身的超时机制来判断是否需要中断事务，这样的策略显得比较保守。换句话说，二阶段提交协议没有设计较为完善的容错机制，任意一个节点的失败都会导致整个事务的失败。</p>\n<h1 id=\"3-3PC\"><a href=\"#3-3PC\" class=\"headerlink\" title=\"3. 3PC\"></a>3. 3PC</h1><p>上面我们讲解了二阶段提交协议的设计和实现原理，并明确指出了其在实际运行过程中可能存在的诸如同步阻塞、协调者的单点问题、脑裂造成的数据不一致和过于保守的容错机制等缺陷，因此研究者在二阶段提交协议的基础上进行了改进，提出了三阶段提交协议。</p>\n<h2 id=\"3-1-协议说明\"><a href=\"#3-1-协议说明\" class=\"headerlink\" title=\"3.1 协议说明\"></a>3.1 协议说明</h2><p>3PC，是 Three-Phase Commit 的缩写，即三阶段提交，是 2PC 的改进版本，它将二阶段提交协议的”提交事务请求”过程一分为二，新城了由 CanCommit、PreCommit和do Commit三个阶段组成的事务处理协议，下面进行说明：</p>\n<p><strong>阶段一：CanCommit</strong></p>\n<ol>\n<li>事务询问。<br>协调者向所有参与者发送一个包含事务内容的 canCommit 请求，询问是否可以执行事务操作，并开始等待各参与者的响应。</li>\n<li>各参与者向协调者反馈事务询问的响应。<br>参与者在接收到来自协调者的 canCommit 请求后，正常情况下，如果其自身认为可以顺利执行事务，那么会反馈 Yes 响应，并进入预备状态，否则反馈 No 响应。</li>\n</ol>\n<p><strong>阶段二：PreCommit</strong><br>在阶段二中，协调者会根据各参与者的反馈情况来决定是否可以进行事务的 PreCommit 操作，正常情况下，包含两种可能。</p>\n<p><strong>执行事务提交</strong><br>假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务预提交。</p>\n<ol>\n<li>发送预提交请求。<br>协调者向所有参与者阶段发出 preCommit 的请求，并进入 Prepared 阶段。</li>\n<li>事务预提交。<br>参与者接收到 PreCommit 请求后，会执行事务操作，并将 Undo 和 Redo 信息记录到事务日志中。</li>\n<li>各参与者向协调者反馈事务执行的响应。<br>如果参与者成功执行了事务操作，那么就会反馈给协调者 Ack 响应，同时等待最终的指令：提交（commit）或终止（abort）。</li>\n</ol>\n<p><strong>中断事务</strong><br>假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。</p>\n<ol>\n<li>发送中断请求。<br>协调者向所有参与者阶段发愁abort请求。</li>\n<li>中断事务。<br>无论是收到来自协调者的 abort 请求，或者是在等待协调者请求过程中超时，参与者都会中断事务。</li>\n</ol>\n<p><strong>阶段三：doCommit</strong><br>该阶段将进行真正的事务提交，会存在以下两种可能的情况。</p>\n<p><strong>执行请求</strong></p>\n<ol>\n<li>发送提交请求。<br>进入这一阶段，假设协调者处于正常工作状态，并且它接收到了来自所有参与者的 Ack 响应，那么它将从 “预提交” 状态换到 “提交” 状态，并向所有参与者发送 doCommit 请求。</li>\n<li>事务提交。<br>参与者接收到 doCommit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。</li>\n<li>反馈事务提交结果。<br>参与者在完成事务提交之后，向协调者发送 Ack 消息。</li>\n<li>完成事务。<br>协调者接收到所有参与者反馈的 Ack 消息后，完成事务。</li>\n</ol>\n<p><strong>中断事务</strong><br>进入这一阶段，假设协调者处于正常工作状态，并且任意一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。</p>\n<ol>\n<li>发送中断请求。<br>协调者向所有的参与者节点发送 abort 请求。</li>\n<li>事务回滚。<br>参与者接收到 abort 请求后，会利用其在阶段二中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务期间占用的资源。</li>\n<li>反馈事务回滚结果。<br>参与者而在完成事务回滚之后，向协调者发送 Ack 消息。</li>\n<li>中断事务。<br>协调者接收到所有参与者反馈的 Ack 消息后，中断事务。</li>\n</ol>\n<h3 id=\"3-1-1-可能遇到的问题\"><a href=\"#3-1-1-可能遇到的问题\" class=\"headerlink\" title=\"3.1.1 可能遇到的问题\"></a>3.1.1 可能遇到的问题</h3><ul>\n<li>协调者出现问题。</li>\n<li>协调者和参与者之间的网络出现故障。<br>无论出现哪种情况，最终都会导致参与者无法及时接收到来自协调者的 doCommit 或是 abort 请求，针对这样的异常情况，参与者都会在等待超时之后，继续进行事务提交。</li>\n</ul>\n<h3 id=\"3-1-2-优缺点\"><a href=\"#3-1-2-优缺点\" class=\"headerlink\" title=\"3.1.2 优缺点\"></a>3.1.2 优缺点</h3><p><strong>优点：</strong>相较于二阶段提交协议，三阶段提交协议最大的优点就是降低了参与者的阻塞范围，并且能够在出现单点故障后继续达成一致。</p>\n<p><strong>缺点：</strong>三阶段提交协议在去除阻塞的同时也引入了新的问题，那就是在参与者接收到 preCommit 消息后，如果网路出现分区，此时协调者所在的节点和参与者无法进行正常的网络通信，在这种情况下，该参与者依然会进行事务的提交，这必然出现数据的不一致。</p>\n<h1 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h1><ol>\n<li>《从Paxos到Zookeeper  分布式一致性原理与实践》</li>\n</ol>\n","site":{"data":{}},"wordcount":3717,"excerpt":"","more":"<h1 id=\"1-2PC-与-3PC-的由来\"><a href=\"#1-2PC-与-3PC-的由来\" class=\"headerlink\" title=\"1. 2PC 与 3PC 的由来\"></a>1. 2PC 与 3PC 的由来</h1><p>在分布式系统中，每一个机器节点虽然都能够明确地知道自己在进行事务操作过程中的结果是成功或失败，但却无法直接获取到其他分布式节点的操作结果。因此，当一个事务操作需要跨越多个分布式节点的时候，为了保持事务处理的 ACID 特性，就需要引入一个称为 “协调者（Coordinator）”的组件来统一调度所有分布式节点的执行逻辑，这些被调度的分布式节点则被称为 “参与者（Participant）”。协调者负责调度参与者的行为，并最终决定这些参与者是否要把事务真正进行提交。基于这个思想，衍生出了二阶段提交（2PC）和三阶段提交（3PC）两种协议。</p>\n<h1 id=\"2-2PC\"><a href=\"#2-2PC\" class=\"headerlink\" title=\"2. 2PC\"></a>2. 2PC</h1><p>2PC, 是 Two-Phase Commit 的缩写，即二阶段提交，是计算机网络尤其是在数据库领域一致性二设计的一种算法。通常，二阶段提交协议也被认为是一种一致性协议，用来保证分布式系统的一致性。目前，绝大部分的关系型数据库都是采用二阶段提交协议来完成分布式事务处理的，利用该协议能够非常方便地完成所有分布式事务参与者的协调，统一决定事务的提交或回滚，从而能够有效地保证分布式数据一致性，因此二阶段提交协议被广泛地应用在许多分布式系统中。</p>\n<h2 id=\"2-1-2PC协议执行过程\"><a href=\"#2-1-2PC协议执行过程\" class=\"headerlink\" title=\"2.1 2PC协议执行过程\"></a>2.1 2PC协议执行过程</h2><p>2PC 提交协议是将事务的提交过程分成了两个阶段来进行处理，其执行流程如下：<br><strong>阶段一：提交事务请求：</strong></p>\n<ol>\n<li>事务询问。<br>协调者向所有参与者发送事务内容，询问是否可以事务提交操作，并开始等待各参与者的响应。</li>\n<li>执行事务。<br>各参与者节点执行事务操作，并将 Undo 和 Redo 信息记入事务日志中。</li>\n<li>各参与者向协调者反馈事务询问的响应。<br>如果参与者成功地执行了事务操作，那么久反馈给协调者 Yes 响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者 No 响应，表示事务不可以执行。<br/></li>\n</ol>\n<blockquote>\n<p>上面的内容形式上近似是协调者组织各参与者对一次事务操作的投票表态过程，因此二阶段提交协议的阶段一也被称为 “投票阶段” ，即各参与者投票表明是否要继续执行接下去的事务提交操作。</p>\n</blockquote>\n<p><strong>阶段二：执行事务提交</strong><br>在阶段二中，协调者会根据各参与者的反馈情况来决定最终是否可以进行事务提交操作，正常情况下，包含以下两种可能：<br/><br>执行事务提交<br/><br>假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务提交。</p>\n<ol>\n<li>发送提交请求。<br>协调者向所有参与者节点发出 Commit 请求。</li>\n<li>事务提交。<br>参与者接收到协调者发送的 Commit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。</li>\n<li>反馈事务提交结果。<br>参与者在完成事务提交之后，向协调者发送 Ack 消息。</li>\n<li>完成事务。<br>协调者接收到所有参与者反馈的 Ack 消息后， 完成事务。<br/></li>\n</ol>\n<p>中断事务<br/><br>假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。</p>\n<ol>\n<li>发送回滚请求。<br>协调者向所有参与者节点发送 Rollback 请求。</li>\n<li>事务回滚。<br>参与者接收到 Rollback 请求后，会利用其在阶段一中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。</li>\n<li>反馈事务回滚结果。<br>参与者在完成事务回滚之后，向协调者发送 Ack 消息。</li>\n<li>中断事务。<br>协调者接收到所有参与者反馈的 Ack 消息后，完成事务中断。</li>\n</ol>\n<h2 id=\"2-2-2PC的优缺点\"><a href=\"#2-2-2PC的优缺点\" class=\"headerlink\" title=\"2.2. 2PC的优缺点\"></a>2.2. 2PC的优缺点</h2><h3 id=\"2-2-1-优点\"><a href=\"#2-2-1-优点\" class=\"headerlink\" title=\"2.2.1 优点\"></a>2.2.1 优点</h3><p>二阶段提交协议的优点：原理简单，实现方便。</p>\n<h3 id=\"2-2-2-缺点\"><a href=\"#2-2-2-缺点\" class=\"headerlink\" title=\"2.2.2 缺点\"></a>2.2.2 缺点</h3><p>二阶段提交协议的缺点：同步阻塞、单点问题、脑裂造成数据不一致、过于保守。<br/><br>同步阻塞<br/><br>二阶段提交协议存在的最明显也是最大的一个问题就是同步阻塞，这会极大地限制分布式系统的性能。在二阶段提交的执行过程中，所有参与该事务操作的逻辑都处于阻塞状态，也就是说，各个参与者在等待其他参与者响应的过程中，将无法进行其它任何操作。<br/><br>单点问题<br/><br>在上面的讲解中，协调者的角色在整个二阶段提交协议中起到了非常重要的作用。一旦协调者出现问题，那么整个二阶段提交流程将无法运转，更为严重的是，如果协调者是在二阶段中出现问题的话，那么其他参与者将会一直处于锁定事务资源的状态中，而无法继续完事务操作。<br/><br>脑裂造成数据不一致<br/><br>在二阶段提交协议的阶段二，即执行事务提交的时候，当协调者向所有的参与者发送 Commit 请求之后，发生了局部网络异常或者是协调者在尚未发送完 Commit 请求之前自身发送了崩溃，导致最终只有部分参与者收到了 Commit 请求。于是，这部分收到了 Commit 请求的参与者就会进行事务的提交，而其他没没有收到 Commit 请求的参与者则无法进行事务提交，于是整个分布式系统便出现了数据不一致的现象。<br/><br>过于保守<br/><br>如果协调者指示参与者进行事务提交询问的过程中，参与者出现故障而导致协调者始终无法获取到所有参与者的响应信息的话，这时协调者只能依靠其自身的超时机制来判断是否需要中断事务，这样的策略显得比较保守。换句话说，二阶段提交协议没有设计较为完善的容错机制，任意一个节点的失败都会导致整个事务的失败。</p>\n<h1 id=\"3-3PC\"><a href=\"#3-3PC\" class=\"headerlink\" title=\"3. 3PC\"></a>3. 3PC</h1><p>上面我们讲解了二阶段提交协议的设计和实现原理，并明确指出了其在实际运行过程中可能存在的诸如同步阻塞、协调者的单点问题、脑裂造成的数据不一致和过于保守的容错机制等缺陷，因此研究者在二阶段提交协议的基础上进行了改进，提出了三阶段提交协议。</p>\n<h2 id=\"3-1-协议说明\"><a href=\"#3-1-协议说明\" class=\"headerlink\" title=\"3.1 协议说明\"></a>3.1 协议说明</h2><p>3PC，是 Three-Phase Commit 的缩写，即三阶段提交，是 2PC 的改进版本，它将二阶段提交协议的”提交事务请求”过程一分为二，新城了由 CanCommit、PreCommit和do Commit三个阶段组成的事务处理协议，下面进行说明：</p>\n<p><strong>阶段一：CanCommit</strong></p>\n<ol>\n<li>事务询问。<br>协调者向所有参与者发送一个包含事务内容的 canCommit 请求，询问是否可以执行事务操作，并开始等待各参与者的响应。</li>\n<li>各参与者向协调者反馈事务询问的响应。<br>参与者在接收到来自协调者的 canCommit 请求后，正常情况下，如果其自身认为可以顺利执行事务，那么会反馈 Yes 响应，并进入预备状态，否则反馈 No 响应。</li>\n</ol>\n<p><strong>阶段二：PreCommit</strong><br>在阶段二中，协调者会根据各参与者的反馈情况来决定是否可以进行事务的 PreCommit 操作，正常情况下，包含两种可能。</p>\n<p><strong>执行事务提交</strong><br>假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务预提交。</p>\n<ol>\n<li>发送预提交请求。<br>协调者向所有参与者阶段发出 preCommit 的请求，并进入 Prepared 阶段。</li>\n<li>事务预提交。<br>参与者接收到 PreCommit 请求后，会执行事务操作，并将 Undo 和 Redo 信息记录到事务日志中。</li>\n<li>各参与者向协调者反馈事务执行的响应。<br>如果参与者成功执行了事务操作，那么就会反馈给协调者 Ack 响应，同时等待最终的指令：提交（commit）或终止（abort）。</li>\n</ol>\n<p><strong>中断事务</strong><br>假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。</p>\n<ol>\n<li>发送中断请求。<br>协调者向所有参与者阶段发愁abort请求。</li>\n<li>中断事务。<br>无论是收到来自协调者的 abort 请求，或者是在等待协调者请求过程中超时，参与者都会中断事务。</li>\n</ol>\n<p><strong>阶段三：doCommit</strong><br>该阶段将进行真正的事务提交，会存在以下两种可能的情况。</p>\n<p><strong>执行请求</strong></p>\n<ol>\n<li>发送提交请求。<br>进入这一阶段，假设协调者处于正常工作状态，并且它接收到了来自所有参与者的 Ack 响应，那么它将从 “预提交” 状态换到 “提交” 状态，并向所有参与者发送 doCommit 请求。</li>\n<li>事务提交。<br>参与者接收到 doCommit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。</li>\n<li>反馈事务提交结果。<br>参与者在完成事务提交之后，向协调者发送 Ack 消息。</li>\n<li>完成事务。<br>协调者接收到所有参与者反馈的 Ack 消息后，完成事务。</li>\n</ol>\n<p><strong>中断事务</strong><br>进入这一阶段，假设协调者处于正常工作状态，并且任意一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。</p>\n<ol>\n<li>发送中断请求。<br>协调者向所有的参与者节点发送 abort 请求。</li>\n<li>事务回滚。<br>参与者接收到 abort 请求后，会利用其在阶段二中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务期间占用的资源。</li>\n<li>反馈事务回滚结果。<br>参与者而在完成事务回滚之后，向协调者发送 Ack 消息。</li>\n<li>中断事务。<br>协调者接收到所有参与者反馈的 Ack 消息后，中断事务。</li>\n</ol>\n<h3 id=\"3-1-1-可能遇到的问题\"><a href=\"#3-1-1-可能遇到的问题\" class=\"headerlink\" title=\"3.1.1 可能遇到的问题\"></a>3.1.1 可能遇到的问题</h3><ul>\n<li>协调者出现问题。</li>\n<li>协调者和参与者之间的网络出现故障。<br>无论出现哪种情况，最终都会导致参与者无法及时接收到来自协调者的 doCommit 或是 abort 请求，针对这样的异常情况，参与者都会在等待超时之后，继续进行事务提交。</li>\n</ul>\n<h3 id=\"3-1-2-优缺点\"><a href=\"#3-1-2-优缺点\" class=\"headerlink\" title=\"3.1.2 优缺点\"></a>3.1.2 优缺点</h3><p><strong>优点：</strong>相较于二阶段提交协议，三阶段提交协议最大的优点就是降低了参与者的阻塞范围，并且能够在出现单点故障后继续达成一致。</p>\n<p><strong>缺点：</strong>三阶段提交协议在去除阻塞的同时也引入了新的问题，那就是在参与者接收到 preCommit 消息后，如果网路出现分区，此时协调者所在的节点和参与者无法进行正常的网络通信，在这种情况下，该参与者依然会进行事务的提交，这必然出现数据的不一致。</p>\n<h1 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h1><ol>\n<li>《从Paxos到Zookeeper  分布式一致性原理与实践》</li>\n</ol>\n"},{"title":"ACID的理解","date":"2022-04-02T02:58:45.000Z","description":"简单地讲述ACID。","_content":"# 1. 什么是ACID\n在说ACID之前我们先了解一个概念，也就是**事务**。<br/>\n事务（Transaction）是由一系列对系统中数据进行访问与更新的操作组成的一个程序执行单元（Unit),狭义上的事务特指数据库事务。一方面，当多个应用程序并发访问数据库时，事务可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。另一方面，事务为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持数据一致性的方法。<br/>\n\n数据库事务的四个特征也就是ACID，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），所以说，ACID是事务的四大特性。<br/>\n\n下面我们来详细讲解一下ACID：\n**原子性（Atomicity）：**事务的原子性是指事务必须是一个原子的操作序列单元。事务中包含的各项操作在一次执行过程中，只允许出现以下两种状态之一。\n- 全部成功执行。\n- 全部不执行。\n任何一项操作失败都将导致整个事务失败，同时其他已经被执行的操作都将被撤销并回滚，只有所有的操作全部成功，整个事务才算是成功完成。<br/>\n**一致性（Consistency）：**事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。也就是说，事务执行的结果必须是使数据库从一个一致性状态转变到另一个一致性状态，因此，当数据库只包含成功事务提交的结果时，就能说数据库处于一致性状态。而如果数据库系统在运行过程中发生故障，有些事务尚未完成就被迫中断，这些未完成的事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是不一致的状态。<br/>\n**隔离性：**事务的隔离性是指在并发环境中，并发的事务是相互隔离的，一个事务的执行不能被其它事务干扰。也就是说，不同的事务并发操作相同的数据时，每个事务都有各自完整的数据空间，即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。在标准SQL规范中，定义了 4 个事务隔离级别，不同的隔离级别对事务的处理不同，如未授权读、授权读取、可重复读、串行化<br/>\n**持久性：**事务的持久性也被称为永久性，是指一个事务一旦提交，它对数据库中对应数据的状态变更就应该是永久的。换句话说，一旦某个事务成功结束，那么它对数据库所做的更新就必须是被永久保存下来——即使发生系统崩溃或机器宕机等故障，只要数据库能够重新启动，那么一定能够将其恢复到事务成功结束时的状态。<br/>\n\n","source":"_posts/distributed/concept/ACID.md","raw":"---\ntitle: ACID的理解\ncategories: ['分布式基础']\ndate: 2022-04-02 10:58:45\ntags: ACID\ndescription: 简单地讲述ACID。\n---\n# 1. 什么是ACID\n在说ACID之前我们先了解一个概念，也就是**事务**。<br/>\n事务（Transaction）是由一系列对系统中数据进行访问与更新的操作组成的一个程序执行单元（Unit),狭义上的事务特指数据库事务。一方面，当多个应用程序并发访问数据库时，事务可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。另一方面，事务为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持数据一致性的方法。<br/>\n\n数据库事务的四个特征也就是ACID，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），所以说，ACID是事务的四大特性。<br/>\n\n下面我们来详细讲解一下ACID：\n**原子性（Atomicity）：**事务的原子性是指事务必须是一个原子的操作序列单元。事务中包含的各项操作在一次执行过程中，只允许出现以下两种状态之一。\n- 全部成功执行。\n- 全部不执行。\n任何一项操作失败都将导致整个事务失败，同时其他已经被执行的操作都将被撤销并回滚，只有所有的操作全部成功，整个事务才算是成功完成。<br/>\n**一致性（Consistency）：**事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。也就是说，事务执行的结果必须是使数据库从一个一致性状态转变到另一个一致性状态，因此，当数据库只包含成功事务提交的结果时，就能说数据库处于一致性状态。而如果数据库系统在运行过程中发生故障，有些事务尚未完成就被迫中断，这些未完成的事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是不一致的状态。<br/>\n**隔离性：**事务的隔离性是指在并发环境中，并发的事务是相互隔离的，一个事务的执行不能被其它事务干扰。也就是说，不同的事务并发操作相同的数据时，每个事务都有各自完整的数据空间，即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。在标准SQL规范中，定义了 4 个事务隔离级别，不同的隔离级别对事务的处理不同，如未授权读、授权读取、可重复读、串行化<br/>\n**持久性：**事务的持久性也被称为永久性，是指一个事务一旦提交，它对数据库中对应数据的状态变更就应该是永久的。换句话说，一旦某个事务成功结束，那么它对数据库所做的更新就必须是被永久保存下来——即使发生系统崩溃或机器宕机等故障，只要数据库能够重新启动，那么一定能够将其恢复到事务成功结束时的状态。<br/>\n\n","slug":"distributed/concept/ACID","published":1,"updated":"2022-06-21T06:39:12.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl53jo0iv0006i8vp23mndrkk","content":"<h1 id=\"1-什么是ACID\"><a href=\"#1-什么是ACID\" class=\"headerlink\" title=\"1. 什么是ACID\"></a>1. 什么是ACID</h1><p>在说ACID之前我们先了解一个概念，也就是<strong>事务</strong>。<br/><br>事务（Transaction）是由一系列对系统中数据进行访问与更新的操作组成的一个程序执行单元（Unit),狭义上的事务特指数据库事务。一方面，当多个应用程序并发访问数据库时，事务可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。另一方面，事务为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持数据一致性的方法。<br/></p>\n<p>数据库事务的四个特征也就是ACID，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），所以说，ACID是事务的四大特性。<br/></p>\n<p>下面我们来详细讲解一下ACID：<br><strong>原子性（Atomicity）：</strong>事务的原子性是指事务必须是一个原子的操作序列单元。事务中包含的各项操作在一次执行过程中，只允许出现以下两种状态之一。</p>\n<ul>\n<li>全部成功执行。</li>\n<li>全部不执行。<br>任何一项操作失败都将导致整个事务失败，同时其他已经被执行的操作都将被撤销并回滚，只有所有的操作全部成功，整个事务才算是成功完成。<br/></li>\n</ul>\n<p><strong>一致性（Consistency）：</strong>事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。也就是说，事务执行的结果必须是使数据库从一个一致性状态转变到另一个一致性状态，因此，当数据库只包含成功事务提交的结果时，就能说数据库处于一致性状态。而如果数据库系统在运行过程中发生故障，有些事务尚未完成就被迫中断，这些未完成的事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是不一致的状态。<br/><br><strong>隔离性：</strong>事务的隔离性是指在并发环境中，并发的事务是相互隔离的，一个事务的执行不能被其它事务干扰。也就是说，不同的事务并发操作相同的数据时，每个事务都有各自完整的数据空间，即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。在标准SQL规范中，定义了 4 个事务隔离级别，不同的隔离级别对事务的处理不同，如未授权读、授权读取、可重复读、串行化<br/><br><strong>持久性：</strong>事务的持久性也被称为永久性，是指一个事务一旦提交，它对数据库中对应数据的状态变更就应该是永久的。换句话说，一旦某个事务成功结束，那么它对数据库所做的更新就必须是被永久保存下来——即使发生系统崩溃或机器宕机等故障，只要数据库能够重新启动，那么一定能够将其恢复到事务成功结束时的状态。<br/></p>\n","site":{"data":{}},"wordcount":1061,"excerpt":"","more":"<h1 id=\"1-什么是ACID\"><a href=\"#1-什么是ACID\" class=\"headerlink\" title=\"1. 什么是ACID\"></a>1. 什么是ACID</h1><p>在说ACID之前我们先了解一个概念，也就是<strong>事务</strong>。<br/><br>事务（Transaction）是由一系列对系统中数据进行访问与更新的操作组成的一个程序执行单元（Unit),狭义上的事务特指数据库事务。一方面，当多个应用程序并发访问数据库时，事务可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。另一方面，事务为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持数据一致性的方法。<br/></p>\n<p>数据库事务的四个特征也就是ACID，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），所以说，ACID是事务的四大特性。<br/></p>\n<p>下面我们来详细讲解一下ACID：<br><strong>原子性（Atomicity）：</strong>事务的原子性是指事务必须是一个原子的操作序列单元。事务中包含的各项操作在一次执行过程中，只允许出现以下两种状态之一。</p>\n<ul>\n<li>全部成功执行。</li>\n<li>全部不执行。<br>任何一项操作失败都将导致整个事务失败，同时其他已经被执行的操作都将被撤销并回滚，只有所有的操作全部成功，整个事务才算是成功完成。<br/></li>\n</ul>\n<p><strong>一致性（Consistency）：</strong>事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。也就是说，事务执行的结果必须是使数据库从一个一致性状态转变到另一个一致性状态，因此，当数据库只包含成功事务提交的结果时，就能说数据库处于一致性状态。而如果数据库系统在运行过程中发生故障，有些事务尚未完成就被迫中断，这些未完成的事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是不一致的状态。<br/><br><strong>隔离性：</strong>事务的隔离性是指在并发环境中，并发的事务是相互隔离的，一个事务的执行不能被其它事务干扰。也就是说，不同的事务并发操作相同的数据时，每个事务都有各自完整的数据空间，即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。在标准SQL规范中，定义了 4 个事务隔离级别，不同的隔离级别对事务的处理不同，如未授权读、授权读取、可重复读、串行化<br/><br><strong>持久性：</strong>事务的持久性也被称为永久性，是指一个事务一旦提交，它对数据库中对应数据的状态变更就应该是永久的。换句话说，一旦某个事务成功结束，那么它对数据库所做的更新就必须是被永久保存下来——即使发生系统崩溃或机器宕机等故障，只要数据库能够重新启动，那么一定能够将其恢复到事务成功结束时的状态。<br/></p>\n"},{"title":"分布式的理解","date":"2022-04-02T02:04:35.000Z","description":null,"_content":"# 1. 什么是分布式\n分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。\n> 上面这个简单的定义涵盖了几乎所有有效地部署了网络化计算机的系统。严格地讲，同一个分布式系统中的计算机在空间部署上是可以随意分布的，这些计算机可能被放在不同的机柜上，也可能在不同的机房中，甚至分布在不同的城市。无论如何，一个标准的分布式系统在没有任何特定业务逻辑约束的情况下，都会有如下的几个特征。\n## 1.1 分布式系统的特征\n**分布性：**分布式系统中的多台计算机都会在空间上随意分布，同时，机器的分布情况也会随时变动。<br/>\n**对等性：**分布式系统中的计算机没有主/从之分，没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是对等的。<br/>\n**并发性：**同一个分布式系统中的多个节点，可能会并发地操作一些共享的资源，诸如数据库或分布式存储等。<br/>\n**缺乏全局时钟：**在分布式系统中，很难定义两个时间究竟谁先谁后，原因就是因为分布式系统缺乏一个全局的时钟序列控制。<br/>\n**故障总是发生：**组成分布式系统的所有计算机，都有可能发生任何形式的故障。\n## 1.2分布式环境的各种问题\n**通信异常：**分布式系统需要在各个环节之间进行网络通信，因此每次网络通信都会伴随网络不可用的风险，网络光纤、路由器或是DNS等硬件设备或是系统不可用都会导致最终分布式系统无法顺利完成一次网络通信。<br/>\n**网络分区：**当分布式节点由于网络异常发生造成只有部分节点能够正常通信——网络分区现象，俗称脑裂。当网络分区出现时，分布式系统会出现局部小集群，在极端情况下，这些局部小集群会独立完成原本需要整个分布式系统才能完成的功能，包括数据的事务处理，这就对了分布式一致性提出了非常大的挑战。<br/>\n**三态：**即成功、失败、超时。发生超时原因有两个：\n- 由于网络原因，该请求（消息）并没有被成功地发送到接收方，而是在发送过程中就发生了消息丢失现象。\n- 该请求（消息）成功的被接收方接收后，并进行了处理，但是在将响应反馈给发送方的过程中，发生了消息丢失现象。\n**节点故障：**宕机或僵死等。\n<br/>\n《未完待续》\n# 2. 参考\n1.《从Paxos到Zookeeper  分布式一致性原理与实践》","source":"_posts/distributed/concept/分布式的理解.md","raw":"---\ntitle: 分布式的理解\ncategories: ['分布式基础']\ndate: 2022-04-02 10:04:35\ntags:\ndescription:\n---\n# 1. 什么是分布式\n分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。\n> 上面这个简单的定义涵盖了几乎所有有效地部署了网络化计算机的系统。严格地讲，同一个分布式系统中的计算机在空间部署上是可以随意分布的，这些计算机可能被放在不同的机柜上，也可能在不同的机房中，甚至分布在不同的城市。无论如何，一个标准的分布式系统在没有任何特定业务逻辑约束的情况下，都会有如下的几个特征。\n## 1.1 分布式系统的特征\n**分布性：**分布式系统中的多台计算机都会在空间上随意分布，同时，机器的分布情况也会随时变动。<br/>\n**对等性：**分布式系统中的计算机没有主/从之分，没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是对等的。<br/>\n**并发性：**同一个分布式系统中的多个节点，可能会并发地操作一些共享的资源，诸如数据库或分布式存储等。<br/>\n**缺乏全局时钟：**在分布式系统中，很难定义两个时间究竟谁先谁后，原因就是因为分布式系统缺乏一个全局的时钟序列控制。<br/>\n**故障总是发生：**组成分布式系统的所有计算机，都有可能发生任何形式的故障。\n## 1.2分布式环境的各种问题\n**通信异常：**分布式系统需要在各个环节之间进行网络通信，因此每次网络通信都会伴随网络不可用的风险，网络光纤、路由器或是DNS等硬件设备或是系统不可用都会导致最终分布式系统无法顺利完成一次网络通信。<br/>\n**网络分区：**当分布式节点由于网络异常发生造成只有部分节点能够正常通信——网络分区现象，俗称脑裂。当网络分区出现时，分布式系统会出现局部小集群，在极端情况下，这些局部小集群会独立完成原本需要整个分布式系统才能完成的功能，包括数据的事务处理，这就对了分布式一致性提出了非常大的挑战。<br/>\n**三态：**即成功、失败、超时。发生超时原因有两个：\n- 由于网络原因，该请求（消息）并没有被成功地发送到接收方，而是在发送过程中就发生了消息丢失现象。\n- 该请求（消息）成功的被接收方接收后，并进行了处理，但是在将响应反馈给发送方的过程中，发生了消息丢失现象。\n**节点故障：**宕机或僵死等。\n<br/>\n《未完待续》\n# 2. 参考\n1.《从Paxos到Zookeeper  分布式一致性原理与实践》","slug":"distributed/concept/分布式的理解","published":1,"updated":"2022-06-21T06:39:12.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl53jo0ix000ai8vp3pe37vl0","content":"<h1 id=\"1-什么是分布式\"><a href=\"#1-什么是分布式\" class=\"headerlink\" title=\"1. 什么是分布式\"></a>1. 什么是分布式</h1><p>分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。</p>\n<blockquote>\n<p>上面这个简单的定义涵盖了几乎所有有效地部署了网络化计算机的系统。严格地讲，同一个分布式系统中的计算机在空间部署上是可以随意分布的，这些计算机可能被放在不同的机柜上，也可能在不同的机房中，甚至分布在不同的城市。无论如何，一个标准的分布式系统在没有任何特定业务逻辑约束的情况下，都会有如下的几个特征。</p>\n</blockquote>\n<h2 id=\"1-1-分布式系统的特征\"><a href=\"#1-1-分布式系统的特征\" class=\"headerlink\" title=\"1.1 分布式系统的特征\"></a>1.1 分布式系统的特征</h2><p><strong>分布性：</strong>分布式系统中的多台计算机都会在空间上随意分布，同时，机器的分布情况也会随时变动。<br/><br><strong>对等性：</strong>分布式系统中的计算机没有主/从之分，没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是对等的。<br/><br><strong>并发性：</strong>同一个分布式系统中的多个节点，可能会并发地操作一些共享的资源，诸如数据库或分布式存储等。<br/><br><strong>缺乏全局时钟：</strong>在分布式系统中，很难定义两个时间究竟谁先谁后，原因就是因为分布式系统缺乏一个全局的时钟序列控制。<br/><br><strong>故障总是发生：</strong>组成分布式系统的所有计算机，都有可能发生任何形式的故障。</p>\n<h2 id=\"1-2分布式环境的各种问题\"><a href=\"#1-2分布式环境的各种问题\" class=\"headerlink\" title=\"1.2分布式环境的各种问题\"></a>1.2分布式环境的各种问题</h2><p><strong>通信异常：</strong>分布式系统需要在各个环节之间进行网络通信，因此每次网络通信都会伴随网络不可用的风险，网络光纤、路由器或是DNS等硬件设备或是系统不可用都会导致最终分布式系统无法顺利完成一次网络通信。<br/><br><strong>网络分区：</strong>当分布式节点由于网络异常发生造成只有部分节点能够正常通信——网络分区现象，俗称脑裂。当网络分区出现时，分布式系统会出现局部小集群，在极端情况下，这些局部小集群会独立完成原本需要整个分布式系统才能完成的功能，包括数据的事务处理，这就对了分布式一致性提出了非常大的挑战。<br/><br><strong>三态：</strong>即成功、失败、超时。发生超时原因有两个：</p>\n<ul>\n<li>由于网络原因，该请求（消息）并没有被成功地发送到接收方，而是在发送过程中就发生了消息丢失现象。</li>\n<li>该请求（消息）成功的被接收方接收后，并进行了处理，但是在将响应反馈给发送方的过程中，发生了消息丢失现象。</li>\n</ul>\n<p><strong>节点故障：</strong>宕机或僵死等。<br><br/><br>《未完待续》</p>\n<h1 id=\"2-参考\"><a href=\"#2-参考\" class=\"headerlink\" title=\"2. 参考\"></a>2. 参考</h1><p>1.《从Paxos到Zookeeper  分布式一致性原理与实践》</p>\n","site":{"data":{}},"wordcount":887,"excerpt":"","more":"<h1 id=\"1-什么是分布式\"><a href=\"#1-什么是分布式\" class=\"headerlink\" title=\"1. 什么是分布式\"></a>1. 什么是分布式</h1><p>分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。</p>\n<blockquote>\n<p>上面这个简单的定义涵盖了几乎所有有效地部署了网络化计算机的系统。严格地讲，同一个分布式系统中的计算机在空间部署上是可以随意分布的，这些计算机可能被放在不同的机柜上，也可能在不同的机房中，甚至分布在不同的城市。无论如何，一个标准的分布式系统在没有任何特定业务逻辑约束的情况下，都会有如下的几个特征。</p>\n</blockquote>\n<h2 id=\"1-1-分布式系统的特征\"><a href=\"#1-1-分布式系统的特征\" class=\"headerlink\" title=\"1.1 分布式系统的特征\"></a>1.1 分布式系统的特征</h2><p><strong>分布性：</strong>分布式系统中的多台计算机都会在空间上随意分布，同时，机器的分布情况也会随时变动。<br/><br><strong>对等性：</strong>分布式系统中的计算机没有主/从之分，没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是对等的。<br/><br><strong>并发性：</strong>同一个分布式系统中的多个节点，可能会并发地操作一些共享的资源，诸如数据库或分布式存储等。<br/><br><strong>缺乏全局时钟：</strong>在分布式系统中，很难定义两个时间究竟谁先谁后，原因就是因为分布式系统缺乏一个全局的时钟序列控制。<br/><br><strong>故障总是发生：</strong>组成分布式系统的所有计算机，都有可能发生任何形式的故障。</p>\n<h2 id=\"1-2分布式环境的各种问题\"><a href=\"#1-2分布式环境的各种问题\" class=\"headerlink\" title=\"1.2分布式环境的各种问题\"></a>1.2分布式环境的各种问题</h2><p><strong>通信异常：</strong>分布式系统需要在各个环节之间进行网络通信，因此每次网络通信都会伴随网络不可用的风险，网络光纤、路由器或是DNS等硬件设备或是系统不可用都会导致最终分布式系统无法顺利完成一次网络通信。<br/><br><strong>网络分区：</strong>当分布式节点由于网络异常发生造成只有部分节点能够正常通信——网络分区现象，俗称脑裂。当网络分区出现时，分布式系统会出现局部小集群，在极端情况下，这些局部小集群会独立完成原本需要整个分布式系统才能完成的功能，包括数据的事务处理，这就对了分布式一致性提出了非常大的挑战。<br/><br><strong>三态：</strong>即成功、失败、超时。发生超时原因有两个：</p>\n<ul>\n<li>由于网络原因，该请求（消息）并没有被成功地发送到接收方，而是在发送过程中就发生了消息丢失现象。</li>\n<li>该请求（消息）成功的被接收方接收后，并进行了处理，但是在将响应反馈给发送方的过程中，发生了消息丢失现象。</li>\n</ul>\n<p><strong>节点故障：</strong>宕机或僵死等。<br><br/><br>《未完待续》</p>\n<h1 id=\"2-参考\"><a href=\"#2-参考\" class=\"headerlink\" title=\"2. 参考\"></a>2. 参考</h1><p>1.《从Paxos到Zookeeper  分布式一致性原理与实践》</p>\n"},{"title":"创建型模式-工厂模式","date":"2022-07-01T09:08:33.000Z","description":"介绍创建型模式中的工厂模式。","_content":"# 工厂模式\n工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。\n\n## 介绍\n**意图：**定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。\n**主要解决：**主要解决接口选择的问题。\n**何时使用：**我们明确地计划不同条件下创建不同实例时。\n**如何解决：**让其子类实现工厂接口，返回的也是一个抽象的产品。\n**关键代码：**创建过程在其子类执行。\n**应用实例：**\n1. 您需要一辆汽车的时候，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。\n2. Hibernate 换数据库只需要换方言和驱动就可以。\n**优点：**\n1. 一个调用者想创建一个对象，只要知道其名称就可以了。\n2. 扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以了。\n3. 屏蔽产品的具体实现，调用者只关心产品的接口。\n\n**缺点：**每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。\n\n**使用场景：**\n1. 日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。\n2. 数据库访问：当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。\n3. 设计一个连接服务器的框架，需要三个协议，\"POP3\"、\"IMAP\"、\"HTTP\"，可以把这三个作为产品类，共同实现一个接口。\n\n**注意事项：**作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。\n\n## 实现\n我们将创建一个 Shape 接口和实现 Shape 接口的实体类。下一步是定义工厂类 ShapeFactory。FactoryPatternDemo，我们的演示类使用 ShapeFactory 来获取 Shape 对象。它将向 ShapeFactory 传递信息（CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。\n![](https://atts.w3cschool.cn/attachments/uploads/2014/08/factory_pattern_uml_diagram.jpg)\n### 步骤 1\n创建一个接口。\nShape.java\n```Java\npublic interface Shape {\n    void draw();\n}\n```\n### 步骤 2 \n创建实现接口的实体类。\nRectangle.java\n```Java\npublic class Rectangle implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Inside Rectangle::draw() method.\");\n    }\n}\n```\nSquare.java\n```Java\npublic class Square implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Inside Square::draw() method.\");\n    }\n}\n```\nCircle.java\n```Java\npublic class Circle implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Inside Circle::draw() method.\");\n    }\n}\n```\n### 步骤 3\n创建一个工厂，生成基于给定信息的实体类的对象。\nShapeFactory.java\n```Java\npublic class ShapeFactory {\n    // 使用 getShape 方法获取形状类型的对象\n    public static Shape getShape(String shapeType) {\n        if (shapeType == null) {\n            return null;\n        }\n        if (shapeType.equalsIgnoreCase(\"CIRCLE\")) {\n            return new Circle();\n        } else if (shapeType.equalsIgnoreCase(\"RECTANGLE\")) {\n            return new Rectangle();\n        } else if (shapeType.equalsIgnoreCase(\"SQUARE\")) {\n            return new Square();\n        }\n        return null;\n    }\n}\n```\n### 步骤 4\n使用该工厂，通过传递类型信息来获取实体类的对象。\nFactoryPatternDemo.java\n```Java\npublic class FactoryPatternDemo {\n\n    public static void main(String[] args) {\n        // 获取 Circle 的对象，并调用它的 draw 方法\n        Shape shape1 = ShapeFactory.getShape(\"CIRCLE\");\n\n        // 调用 Circle 的 draw 方法\n        shape1.draw();\n\n        // 获取 Rectangle 的对象，并调用它的 draw 方法\n        Shape shape2 = ShapeFactory.getShape(\"RECTANGLE\");\n\n        // 调用 Rectangle 的 draw 方法\n        shape2.draw();\n\n        // 获取 Square 的对象，并调用它的 draw 方法\n        Shape shape3 = ShapeFactory.getShape(\"SQUARE\");\n\n        // 调用 Square 的 draw 方法\n        shape3.draw();\n    }\n}\n```\n### 步骤 5\n验证输出。\n```Java\nInside Circle::draw() method.\nInside Rectangle::draw() method.\nInside Square::draw() method.\n```\n\n## 参考\n* [W3Cschool](https://www.w3cschool.cn)\n* 《设计模式 - 可复用的面向对象软件元素》","source":"_posts/design-pattern/CreationalPatterns/创建型模式-工厂模式.md","raw":"---\ntitle: 创建型模式-工厂模式\ncategories: ['设计模式', '创建型模式']\ndate: 2022-07-01 17:08:33\ntags: 设计模式\ndescription: 介绍创建型模式中的工厂模式。\n---\n# 工厂模式\n工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。\n\n## 介绍\n**意图：**定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。\n**主要解决：**主要解决接口选择的问题。\n**何时使用：**我们明确地计划不同条件下创建不同实例时。\n**如何解决：**让其子类实现工厂接口，返回的也是一个抽象的产品。\n**关键代码：**创建过程在其子类执行。\n**应用实例：**\n1. 您需要一辆汽车的时候，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。\n2. Hibernate 换数据库只需要换方言和驱动就可以。\n**优点：**\n1. 一个调用者想创建一个对象，只要知道其名称就可以了。\n2. 扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以了。\n3. 屏蔽产品的具体实现，调用者只关心产品的接口。\n\n**缺点：**每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。\n\n**使用场景：**\n1. 日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。\n2. 数据库访问：当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。\n3. 设计一个连接服务器的框架，需要三个协议，\"POP3\"、\"IMAP\"、\"HTTP\"，可以把这三个作为产品类，共同实现一个接口。\n\n**注意事项：**作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。\n\n## 实现\n我们将创建一个 Shape 接口和实现 Shape 接口的实体类。下一步是定义工厂类 ShapeFactory。FactoryPatternDemo，我们的演示类使用 ShapeFactory 来获取 Shape 对象。它将向 ShapeFactory 传递信息（CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。\n![](https://atts.w3cschool.cn/attachments/uploads/2014/08/factory_pattern_uml_diagram.jpg)\n### 步骤 1\n创建一个接口。\nShape.java\n```Java\npublic interface Shape {\n    void draw();\n}\n```\n### 步骤 2 \n创建实现接口的实体类。\nRectangle.java\n```Java\npublic class Rectangle implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Inside Rectangle::draw() method.\");\n    }\n}\n```\nSquare.java\n```Java\npublic class Square implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Inside Square::draw() method.\");\n    }\n}\n```\nCircle.java\n```Java\npublic class Circle implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Inside Circle::draw() method.\");\n    }\n}\n```\n### 步骤 3\n创建一个工厂，生成基于给定信息的实体类的对象。\nShapeFactory.java\n```Java\npublic class ShapeFactory {\n    // 使用 getShape 方法获取形状类型的对象\n    public static Shape getShape(String shapeType) {\n        if (shapeType == null) {\n            return null;\n        }\n        if (shapeType.equalsIgnoreCase(\"CIRCLE\")) {\n            return new Circle();\n        } else if (shapeType.equalsIgnoreCase(\"RECTANGLE\")) {\n            return new Rectangle();\n        } else if (shapeType.equalsIgnoreCase(\"SQUARE\")) {\n            return new Square();\n        }\n        return null;\n    }\n}\n```\n### 步骤 4\n使用该工厂，通过传递类型信息来获取实体类的对象。\nFactoryPatternDemo.java\n```Java\npublic class FactoryPatternDemo {\n\n    public static void main(String[] args) {\n        // 获取 Circle 的对象，并调用它的 draw 方法\n        Shape shape1 = ShapeFactory.getShape(\"CIRCLE\");\n\n        // 调用 Circle 的 draw 方法\n        shape1.draw();\n\n        // 获取 Rectangle 的对象，并调用它的 draw 方法\n        Shape shape2 = ShapeFactory.getShape(\"RECTANGLE\");\n\n        // 调用 Rectangle 的 draw 方法\n        shape2.draw();\n\n        // 获取 Square 的对象，并调用它的 draw 方法\n        Shape shape3 = ShapeFactory.getShape(\"SQUARE\");\n\n        // 调用 Square 的 draw 方法\n        shape3.draw();\n    }\n}\n```\n### 步骤 5\n验证输出。\n```Java\nInside Circle::draw() method.\nInside Rectangle::draw() method.\nInside Square::draw() method.\n```\n\n## 参考\n* [W3Cschool](https://www.w3cschool.cn)\n* 《设计模式 - 可复用的面向对象软件元素》","slug":"design-pattern/CreationalPatterns/创建型模式-工厂模式","published":1,"updated":"2022-07-01T09:39:02.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl53jo0iy000bi8vp0k47edm9","content":"<h1 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h1><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><strong>意图：</strong>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。<br><strong>主要解决：</strong>主要解决接口选择的问题。<br><strong>何时使用：</strong>我们明确地计划不同条件下创建不同实例时。<br><strong>如何解决：</strong>让其子类实现工厂接口，返回的也是一个抽象的产品。<br><strong>关键代码：</strong>创建过程在其子类执行。<br><strong>应用实例：</strong></p>\n<ol>\n<li>您需要一辆汽车的时候，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。</li>\n<li>Hibernate 换数据库只需要换方言和驱动就可以。</li>\n</ol>\n<p><strong>优点：</strong></p>\n<ol>\n<li>一个调用者想创建一个对象，只要知道其名称就可以了。</li>\n<li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以了。</li>\n<li>屏蔽产品的具体实现，调用者只关心产品的接口。</li>\n</ol>\n<p><strong>缺点：</strong>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</p>\n<p><strong>使用场景：</strong></p>\n<ol>\n<li>日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。</li>\n<li>数据库访问：当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。</li>\n<li>设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</li>\n</ol>\n<p><strong>注意事项：</strong>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>我们将创建一个 Shape 接口和实现 Shape 接口的实体类。下一步是定义工厂类 ShapeFactory。FactoryPatternDemo，我们的演示类使用 ShapeFactory 来获取 Shape 对象。它将向 ShapeFactory 传递信息（CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。<br><img src=\"https://atts.w3cschool.cn/attachments/uploads/2014/08/factory_pattern_uml_diagram.jpg\"></p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤 1\"></a>步骤 1</h3><p>创建一个接口。<br>Shape.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤 2\"></a>步骤 2</h3><p>创建实现接口的实体类。<br>Rectangle.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Rectangle</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Rectangle::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>Square.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Square</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Square::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>Circle.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Circle::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤 3\"></a>步骤 3</h3><p>创建一个工厂，生成基于给定信息的实体类的对象。<br>ShapeFactory.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ShapeFactory</span> &#123;<br>    <span class=\"hljs-comment\">// 使用 getShape 方法获取形状类型的对象</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Shape <span class=\"hljs-title function_\">getShape</span><span class=\"hljs-params\">(String shapeType)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (shapeType == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (shapeType.equalsIgnoreCase(<span class=\"hljs-string\">&quot;CIRCLE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Circle</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeType.equalsIgnoreCase(<span class=\"hljs-string\">&quot;RECTANGLE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Rectangle</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeType.equalsIgnoreCase(<span class=\"hljs-string\">&quot;SQUARE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Square</span>();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤 4\"></a>步骤 4</h3><p>使用该工厂，通过传递类型信息来获取实体类的对象。<br>FactoryPatternDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FactoryPatternDemo</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">// 获取 Circle 的对象，并调用它的 draw 方法</span><br>        <span class=\"hljs-type\">Shape</span> <span class=\"hljs-variable\">shape1</span> <span class=\"hljs-operator\">=</span> ShapeFactory.getShape(<span class=\"hljs-string\">&quot;CIRCLE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Circle 的 draw 方法</span><br>        shape1.draw();<br><br>        <span class=\"hljs-comment\">// 获取 Rectangle 的对象，并调用它的 draw 方法</span><br>        <span class=\"hljs-type\">Shape</span> <span class=\"hljs-variable\">shape2</span> <span class=\"hljs-operator\">=</span> ShapeFactory.getShape(<span class=\"hljs-string\">&quot;RECTANGLE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Rectangle 的 draw 方法</span><br>        shape2.draw();<br><br>        <span class=\"hljs-comment\">// 获取 Square 的对象，并调用它的 draw 方法</span><br>        <span class=\"hljs-type\">Shape</span> <span class=\"hljs-variable\">shape3</span> <span class=\"hljs-operator\">=</span> ShapeFactory.getShape(<span class=\"hljs-string\">&quot;SQUARE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Square 的 draw 方法</span><br>        shape3.draw();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"步骤-5\"><a href=\"#步骤-5\" class=\"headerlink\" title=\"步骤 5\"></a>步骤 5</h3><p>验证输出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs Java\">Inside Circle::draw() method.<br>Inside Rectangle::draw() method.<br>Inside Square::draw() method.<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.w3cschool.cn/\">W3Cschool</a></li>\n<li>《设计模式 - 可复用的面向对象软件元素》</li>\n</ul>\n","site":{"data":{}},"wordcount":2636,"excerpt":"","more":"<h1 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h1><p>工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><strong>意图：</strong>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。<br><strong>主要解决：</strong>主要解决接口选择的问题。<br><strong>何时使用：</strong>我们明确地计划不同条件下创建不同实例时。<br><strong>如何解决：</strong>让其子类实现工厂接口，返回的也是一个抽象的产品。<br><strong>关键代码：</strong>创建过程在其子类执行。<br><strong>应用实例：</strong></p>\n<ol>\n<li>您需要一辆汽车的时候，可以直接从工厂里面提货，而不用去管这辆汽车是怎么做出来的，以及这个汽车里面的具体实现。</li>\n<li>Hibernate 换数据库只需要换方言和驱动就可以。</li>\n</ol>\n<p><strong>优点：</strong></p>\n<ol>\n<li>一个调用者想创建一个对象，只要知道其名称就可以了。</li>\n<li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以了。</li>\n<li>屏蔽产品的具体实现，调用者只关心产品的接口。</li>\n</ol>\n<p><strong>缺点：</strong>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</p>\n<p><strong>使用场景：</strong></p>\n<ol>\n<li>日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。</li>\n<li>数据库访问：当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。</li>\n<li>设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</li>\n</ol>\n<p><strong>注意事项：</strong>作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>我们将创建一个 Shape 接口和实现 Shape 接口的实体类。下一步是定义工厂类 ShapeFactory。FactoryPatternDemo，我们的演示类使用 ShapeFactory 来获取 Shape 对象。它将向 ShapeFactory 传递信息（CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。<br><img src=\"https://atts.w3cschool.cn/attachments/uploads/2014/08/factory_pattern_uml_diagram.jpg\"></p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤 1\"></a>步骤 1</h3><p>创建一个接口。<br>Shape.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤 2\"></a>步骤 2</h3><p>创建实现接口的实体类。<br>Rectangle.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Rectangle</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Rectangle::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Square.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Square</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Square::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Circle.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Circle::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤 3\"></a>步骤 3</h3><p>创建一个工厂，生成基于给定信息的实体类的对象。<br>ShapeFactory.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ShapeFactory</span> &#123;<br>    <span class=\"hljs-comment\">// 使用 getShape 方法获取形状类型的对象</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Shape <span class=\"hljs-title function_\">getShape</span><span class=\"hljs-params\">(String shapeType)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (shapeType == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (shapeType.equalsIgnoreCase(<span class=\"hljs-string\">&quot;CIRCLE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Circle</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeType.equalsIgnoreCase(<span class=\"hljs-string\">&quot;RECTANGLE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Rectangle</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeType.equalsIgnoreCase(<span class=\"hljs-string\">&quot;SQUARE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Square</span>();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤 4\"></a>步骤 4</h3><p>使用该工厂，通过传递类型信息来获取实体类的对象。<br>FactoryPatternDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FactoryPatternDemo</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">// 获取 Circle 的对象，并调用它的 draw 方法</span><br>        <span class=\"hljs-type\">Shape</span> <span class=\"hljs-variable\">shape1</span> <span class=\"hljs-operator\">=</span> ShapeFactory.getShape(<span class=\"hljs-string\">&quot;CIRCLE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Circle 的 draw 方法</span><br>        shape1.draw();<br><br>        <span class=\"hljs-comment\">// 获取 Rectangle 的对象，并调用它的 draw 方法</span><br>        <span class=\"hljs-type\">Shape</span> <span class=\"hljs-variable\">shape2</span> <span class=\"hljs-operator\">=</span> ShapeFactory.getShape(<span class=\"hljs-string\">&quot;RECTANGLE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Rectangle 的 draw 方法</span><br>        shape2.draw();<br><br>        <span class=\"hljs-comment\">// 获取 Square 的对象，并调用它的 draw 方法</span><br>        <span class=\"hljs-type\">Shape</span> <span class=\"hljs-variable\">shape3</span> <span class=\"hljs-operator\">=</span> ShapeFactory.getShape(<span class=\"hljs-string\">&quot;SQUARE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Square 的 draw 方法</span><br>        shape3.draw();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"步骤-5\"><a href=\"#步骤-5\" class=\"headerlink\" title=\"步骤 5\"></a>步骤 5</h3><p>验证输出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\">Inside Circle::draw() method.<br>Inside Rectangle::draw() method.<br>Inside Square::draw() method.<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.w3cschool.cn/\">W3Cschool</a></li>\n<li>《设计模式 - 可复用的面向对象软件元素》</li>\n</ul>\n"},{"title":"创建型模式-抽象工厂模式","date":"2022-07-02T06:14:35.000Z","description":"介绍创建型模式中的抽象工厂模式。","_content":"# 抽象工厂模式\n抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n<br>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显示指定它们的类。每个生成的工厂都能按照工厂模式提供对象。\n\n## 介绍\n**意图：**提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n**主要解决：**主要解决接口选择的问题。\n**何时使用：**系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。\n**如何解决：**在一个产品族里面，定义多个产品。\n**关键代码：**在一个工厂里聚合多类同类产品。\n**应用实例：**工作了，为了参加一些聚会，肯定有两套或多套衣服，不如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一些列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OO 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。\n**优点：**当一个产品族中的多个对象被设计成一起工作时，他能保证客户端始终只使用同一个产品族中的对象。\n**缺点：**产品族扩展非常困难，要增加一系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。\n\n**使用场景：**\n1. QQ换皮肤，一整套一起换。\n2. 生成不同操作系统的程序。\n**注意事项：**产品族难扩展，产品等级易扩展。\n\n## 实现\n我们将创建 Shape 和 Color 接口和实现这些接口的实体类。下一步是创建抽象工厂类 AbstractFactory。接着定义工厂类 ShapeFactory 和 ColorFactory，这两个工厂都是扩展了AbstractFactory。然后创建一个工厂创造器 / 生成器类 FactoryProducer。\n\nAbstractFactoryPatternDemo， 我们演示类使用 FactoryPrducer 来获取 AbstractFactory 对象。它将向 AbstractFactory 传递形状信息 Shape （CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。同时它还向 AbstractFactory 传递颜色信息 Color （RED / GREEN / BLUE），以便获取它所需对象的类型。\n![](https://atts.w3cschool.cn/attachments/uploads/2014/08/abstractfactory_pattern_uml_diagram.jpg)\n\n### 步骤 1\n为形状创建一个接口。\nShape.java\n```java\npublic interface Shape {\n    void draw();\n}\n```\n\n### 步骤 2\n创建 Shape 接口的实现类\nRectangle.java\n```java\npublic class Rectangle implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Inside Rectangle::draw() method.\");\n    }\n}\n```\nSquare.java\n```java\npublic class Square implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Inside Square::draw() method.\");\n    }\n}\n```\nCircle.java\n```java\npublic class Circle implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Inside Circle::draw() method.\");\n    }\n}\n```\n\n### 步骤 3\n为颜色创建一个接口\nColor.java\n```java\npublic interface Color {\n    void fill();\n}\n```\n\n### 步骤 4\n创建实现 Color 接口的实现类\nRed.java\n```java\npublic class Red implements Color {\n\n    @Override\n    public void fill() {\n        System.out.println(\"Inside Red::fill() method.\");\n    }\n}\n```\nGreen.java\n```java\npublic class Green implements Color {\n\n    @Override\n    public void fill() {\n        System.out.println(\"Inside Green::fill() method.\");\n    }\n}\n```\nBlue.java\n```java\npublic class Blue implements Color {\n\n    @Override\n    public void fill() {\n        System.out.println(\"Inside Blue::fill() method.\");\n    }\n}\n```\n\n### 步骤 5\n为 Color 和 Shape 对象创建抽象类来获取对应工厂。\nAbstractFactory.java\n```java\npublic abstract class AbstractFactory {\n    abstract Color getColor(String color);\n    abstract Shape getShape(String shape) ;\n}\n```\n\n### 步骤 6\n创建扩展了AbstractFactory 的工厂类，基于给定的信息生成实体类的对象。\nShapeFactory.java\n```java\npublic class ShapeFactory extends AbstractFactory {\n\n    @Override\n    public Shape getShape(String shapeType) {\n        if (shapeType == null) {\n            return null;\n        }\n        if (shapeType.equalsIgnoreCase(\"CIRCLE\")) {\n            return new Circle();\n        } else if (shapeType.equalsIgnoreCase(\"RECTANGLE\")) {\n            return new Rectangle();\n        } else if (shapeType.equalsIgnoreCase(\"SQUARE\")) {\n            return new Square();\n        }\n        return null;\n    }\n\n    @Override\n    Color getColor(String color) {\n        return null;\n    }\n}\n```\nColorFactory.java\n```java\npublic class ColorFactory extends AbstractFactory {\n\n    @Override\n    public Shape getShape(String shapeType) {\n        return null;\n    }\n\n    @Override\n    Color getColor(String color) {\n        if (color == null) {\n            return null;\n        }\n        if (color.equalsIgnoreCase(\"RED\")) {\n            return new Red();\n        } else if (color.equalsIgnoreCase(\"GREEN\")) {\n            return new Green();\n        } else if (color.equalsIgnoreCase(\"BLUE\")) {\n            return new Blue();\n        }\n        return null;\n    }\n}\n```\n### 步骤 7\n创建一个工厂创造器 / 生成器类，通过传递形状或颜色信息来获取工厂。\nFactoryProducer.java\n```java\npublic class FactoryProducer {\n    public static AbstractFactory getFactory(String choice) {\n        if (choice.equalsIgnoreCase(\"SHAPE\")) {\n            return new ShapeFactory();\n        } else if (choice.equalsIgnoreCase(\"COLOR\")) {\n            return new ColorFactory();\n        }\n        return null;\n    }\n}\n```\n### 步骤 8\n使用 FactoryProducer 来获取 AbstractFactory，通过传递类型信息来获取实体类的对象。\nAbstractFactoryPatternDemo.java\n```java\npublic class AbstractFactoryPatternDemo {\n    public static void main(String[] args) {\n\n        // 获取形状工厂\n        AbstractFactory shapeFactory = FactoryProducer.getFactory(\"SHAPE\");\n\n        // 获取形状为 Circle 的对象\n        Shape shape1 = shapeFactory.getShape(\"CIRCLE\");\n\n        // 调用 Circle 的 draw 方法\n        shape1.draw();\n\n        // 获取形状为 Rectangle 的对象\n        Shape shape2 = shapeFactory.getShape(\"RECTANGLE\");\n\n        // 调用 Rectangle 的 draw 方法\n        shape2.draw();\n\n        // 获取形状为 Square 的对象\n        Shape shape3 = shapeFactory.getShape(\"SQUARE\");\n\n        // 调用 Square 的 draw 方法\n        shape3.draw();\n\n        // 获取颜色工厂\n        AbstractFactory colorFactory = FactoryProducer.getFactory(\"COLOR\");\n\n        // 获取颜色为 Red 的对象\n        Color color1 = colorFactory.getColor(\"RED\");\n\n        // 调用 Red 的 fill 方法\n        color1.fill();\n\n        // 获取颜色为 Green 的对象\n        Color color2 = colorFactory.getColor(\"Green\");\n\n        // 调用 Green 的 fill 方法\n        color2.fill();\n\n        // 获取颜色为 Blue 的对象\n        Color color3 = colorFactory.getColor(\"BLUE\");\n\n        // 调用 Blue 的 fill 方法\n        color3.fill();\n    }\n}\n```\n### 步骤 9\n验证输出\n```java\nInside Circle::draw() method.\nInside Rectangle::draw() method.\nInside Square::draw() method.\nInside Red::fill() method.\nInside Green::fill() method.\nInside Blue::fill() method.\n```\n\n## 参考\n* [W3Cschool](https://www.w3cschool.cn)\n* 《设计模式 - 可复用的面向对象软件元素》","source":"_posts/design-pattern/CreationalPatterns/创建型模式-抽象工厂模式.md","raw":"---\ntitle: 创建型模式-抽象工厂模式\ncategories: ['设计模式', '创建型模式']\ndate: 2022-07-02 14:14:35\ntags: 设计模式\ndescription: 介绍创建型模式中的抽象工厂模式。\n---\n# 抽象工厂模式\n抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。\n<br>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显示指定它们的类。每个生成的工厂都能按照工厂模式提供对象。\n\n## 介绍\n**意图：**提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。\n**主要解决：**主要解决接口选择的问题。\n**何时使用：**系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。\n**如何解决：**在一个产品族里面，定义多个产品。\n**关键代码：**在一个工厂里聚合多类同类产品。\n**应用实例：**工作了，为了参加一些聚会，肯定有两套或多套衣服，不如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一些列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OO 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。\n**优点：**当一个产品族中的多个对象被设计成一起工作时，他能保证客户端始终只使用同一个产品族中的对象。\n**缺点：**产品族扩展非常困难，要增加一系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。\n\n**使用场景：**\n1. QQ换皮肤，一整套一起换。\n2. 生成不同操作系统的程序。\n**注意事项：**产品族难扩展，产品等级易扩展。\n\n## 实现\n我们将创建 Shape 和 Color 接口和实现这些接口的实体类。下一步是创建抽象工厂类 AbstractFactory。接着定义工厂类 ShapeFactory 和 ColorFactory，这两个工厂都是扩展了AbstractFactory。然后创建一个工厂创造器 / 生成器类 FactoryProducer。\n\nAbstractFactoryPatternDemo， 我们演示类使用 FactoryPrducer 来获取 AbstractFactory 对象。它将向 AbstractFactory 传递形状信息 Shape （CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。同时它还向 AbstractFactory 传递颜色信息 Color （RED / GREEN / BLUE），以便获取它所需对象的类型。\n![](https://atts.w3cschool.cn/attachments/uploads/2014/08/abstractfactory_pattern_uml_diagram.jpg)\n\n### 步骤 1\n为形状创建一个接口。\nShape.java\n```java\npublic interface Shape {\n    void draw();\n}\n```\n\n### 步骤 2\n创建 Shape 接口的实现类\nRectangle.java\n```java\npublic class Rectangle implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Inside Rectangle::draw() method.\");\n    }\n}\n```\nSquare.java\n```java\npublic class Square implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Inside Square::draw() method.\");\n    }\n}\n```\nCircle.java\n```java\npublic class Circle implements Shape {\n\n    @Override\n    public void draw() {\n        System.out.println(\"Inside Circle::draw() method.\");\n    }\n}\n```\n\n### 步骤 3\n为颜色创建一个接口\nColor.java\n```java\npublic interface Color {\n    void fill();\n}\n```\n\n### 步骤 4\n创建实现 Color 接口的实现类\nRed.java\n```java\npublic class Red implements Color {\n\n    @Override\n    public void fill() {\n        System.out.println(\"Inside Red::fill() method.\");\n    }\n}\n```\nGreen.java\n```java\npublic class Green implements Color {\n\n    @Override\n    public void fill() {\n        System.out.println(\"Inside Green::fill() method.\");\n    }\n}\n```\nBlue.java\n```java\npublic class Blue implements Color {\n\n    @Override\n    public void fill() {\n        System.out.println(\"Inside Blue::fill() method.\");\n    }\n}\n```\n\n### 步骤 5\n为 Color 和 Shape 对象创建抽象类来获取对应工厂。\nAbstractFactory.java\n```java\npublic abstract class AbstractFactory {\n    abstract Color getColor(String color);\n    abstract Shape getShape(String shape) ;\n}\n```\n\n### 步骤 6\n创建扩展了AbstractFactory 的工厂类，基于给定的信息生成实体类的对象。\nShapeFactory.java\n```java\npublic class ShapeFactory extends AbstractFactory {\n\n    @Override\n    public Shape getShape(String shapeType) {\n        if (shapeType == null) {\n            return null;\n        }\n        if (shapeType.equalsIgnoreCase(\"CIRCLE\")) {\n            return new Circle();\n        } else if (shapeType.equalsIgnoreCase(\"RECTANGLE\")) {\n            return new Rectangle();\n        } else if (shapeType.equalsIgnoreCase(\"SQUARE\")) {\n            return new Square();\n        }\n        return null;\n    }\n\n    @Override\n    Color getColor(String color) {\n        return null;\n    }\n}\n```\nColorFactory.java\n```java\npublic class ColorFactory extends AbstractFactory {\n\n    @Override\n    public Shape getShape(String shapeType) {\n        return null;\n    }\n\n    @Override\n    Color getColor(String color) {\n        if (color == null) {\n            return null;\n        }\n        if (color.equalsIgnoreCase(\"RED\")) {\n            return new Red();\n        } else if (color.equalsIgnoreCase(\"GREEN\")) {\n            return new Green();\n        } else if (color.equalsIgnoreCase(\"BLUE\")) {\n            return new Blue();\n        }\n        return null;\n    }\n}\n```\n### 步骤 7\n创建一个工厂创造器 / 生成器类，通过传递形状或颜色信息来获取工厂。\nFactoryProducer.java\n```java\npublic class FactoryProducer {\n    public static AbstractFactory getFactory(String choice) {\n        if (choice.equalsIgnoreCase(\"SHAPE\")) {\n            return new ShapeFactory();\n        } else if (choice.equalsIgnoreCase(\"COLOR\")) {\n            return new ColorFactory();\n        }\n        return null;\n    }\n}\n```\n### 步骤 8\n使用 FactoryProducer 来获取 AbstractFactory，通过传递类型信息来获取实体类的对象。\nAbstractFactoryPatternDemo.java\n```java\npublic class AbstractFactoryPatternDemo {\n    public static void main(String[] args) {\n\n        // 获取形状工厂\n        AbstractFactory shapeFactory = FactoryProducer.getFactory(\"SHAPE\");\n\n        // 获取形状为 Circle 的对象\n        Shape shape1 = shapeFactory.getShape(\"CIRCLE\");\n\n        // 调用 Circle 的 draw 方法\n        shape1.draw();\n\n        // 获取形状为 Rectangle 的对象\n        Shape shape2 = shapeFactory.getShape(\"RECTANGLE\");\n\n        // 调用 Rectangle 的 draw 方法\n        shape2.draw();\n\n        // 获取形状为 Square 的对象\n        Shape shape3 = shapeFactory.getShape(\"SQUARE\");\n\n        // 调用 Square 的 draw 方法\n        shape3.draw();\n\n        // 获取颜色工厂\n        AbstractFactory colorFactory = FactoryProducer.getFactory(\"COLOR\");\n\n        // 获取颜色为 Red 的对象\n        Color color1 = colorFactory.getColor(\"RED\");\n\n        // 调用 Red 的 fill 方法\n        color1.fill();\n\n        // 获取颜色为 Green 的对象\n        Color color2 = colorFactory.getColor(\"Green\");\n\n        // 调用 Green 的 fill 方法\n        color2.fill();\n\n        // 获取颜色为 Blue 的对象\n        Color color3 = colorFactory.getColor(\"BLUE\");\n\n        // 调用 Blue 的 fill 方法\n        color3.fill();\n    }\n}\n```\n### 步骤 9\n验证输出\n```java\nInside Circle::draw() method.\nInside Rectangle::draw() method.\nInside Square::draw() method.\nInside Red::fill() method.\nInside Green::fill() method.\nInside Blue::fill() method.\n```\n\n## 参考\n* [W3Cschool](https://www.w3cschool.cn)\n* 《设计模式 - 可复用的面向对象软件元素》","slug":"design-pattern/CreationalPatterns/创建型模式-抽象工厂模式","published":1,"updated":"2022-07-02T06:51:11.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl53jo0iz000gi8vp9ph8e3il","content":"<h1 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h1><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br><br>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显示指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><strong>意图：</strong>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。<br><strong>主要解决：</strong>主要解决接口选择的问题。<br><strong>何时使用：</strong>系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。<br><strong>如何解决：</strong>在一个产品族里面，定义多个产品。<br><strong>关键代码：</strong>在一个工厂里聚合多类同类产品。<br><strong>应用实例：</strong>工作了，为了参加一些聚会，肯定有两套或多套衣服，不如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一些列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OO 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。<br><strong>优点：</strong>当一个产品族中的多个对象被设计成一起工作时，他能保证客户端始终只使用同一个产品族中的对象。<br><strong>缺点：</strong>产品族扩展非常困难，要增加一系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p>\n<p><strong>使用场景：</strong></p>\n<ol>\n<li>QQ换皮肤，一整套一起换。</li>\n<li>生成不同操作系统的程序。</li>\n</ol>\n<p><strong>注意事项：</strong>产品族难扩展，产品等级易扩展。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>我们将创建 Shape 和 Color 接口和实现这些接口的实体类。下一步是创建抽象工厂类 AbstractFactory。接着定义工厂类 ShapeFactory 和 ColorFactory，这两个工厂都是扩展了AbstractFactory。然后创建一个工厂创造器 / 生成器类 FactoryProducer。</p>\n<p>AbstractFactoryPatternDemo， 我们演示类使用 FactoryPrducer 来获取 AbstractFactory 对象。它将向 AbstractFactory 传递形状信息 Shape （CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。同时它还向 AbstractFactory 传递颜色信息 Color （RED / GREEN / BLUE），以便获取它所需对象的类型。<br><img src=\"https://atts.w3cschool.cn/attachments/uploads/2014/08/abstractfactory_pattern_uml_diagram.jpg\"></p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤 1\"></a>步骤 1</h3><p>为形状创建一个接口。<br>Shape.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤 2\"></a>步骤 2</h3><p>创建 Shape 接口的实现类<br>Rectangle.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Rectangle</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Rectangle::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>Square.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Square</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Square::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>Circle.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Circle::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤 3\"></a>步骤 3</h3><p>为颜色创建一个接口<br>Color.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Color</span> &#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fill</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤 4\"></a>步骤 4</h3><p>创建实现 Color 接口的实现类<br>Red.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Red</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Color</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fill</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Red::fill() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>Green.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Green</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Color</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fill</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Green::fill() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>Blue.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Blue</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Color</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fill</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Blue::fill() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"步骤-5\"><a href=\"#步骤-5\" class=\"headerlink\" title=\"步骤 5\"></a>步骤 5</h3><p>为 Color 和 Shape 对象创建抽象类来获取对应工厂。<br>AbstractFactory.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AbstractFactory</span> &#123;<br>    <span class=\"hljs-keyword\">abstract</span> Color <span class=\"hljs-title function_\">getColor</span><span class=\"hljs-params\">(String color)</span>;<br>    <span class=\"hljs-keyword\">abstract</span> Shape <span class=\"hljs-title function_\">getShape</span><span class=\"hljs-params\">(String shape)</span> ;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"步骤-6\"><a href=\"#步骤-6\" class=\"headerlink\" title=\"步骤 6\"></a>步骤 6</h3><p>创建扩展了AbstractFactory 的工厂类，基于给定的信息生成实体类的对象。<br>ShapeFactory.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ShapeFactory</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractFactory</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Shape <span class=\"hljs-title function_\">getShape</span><span class=\"hljs-params\">(String shapeType)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (shapeType == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (shapeType.equalsIgnoreCase(<span class=\"hljs-string\">&quot;CIRCLE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Circle</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeType.equalsIgnoreCase(<span class=\"hljs-string\">&quot;RECTANGLE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Rectangle</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeType.equalsIgnoreCase(<span class=\"hljs-string\">&quot;SQUARE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Square</span>();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    Color <span class=\"hljs-title function_\">getColor</span><span class=\"hljs-params\">(String color)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<p>ColorFactory.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ColorFactory</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractFactory</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Shape <span class=\"hljs-title function_\">getShape</span><span class=\"hljs-params\">(String shapeType)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    Color <span class=\"hljs-title function_\">getColor</span><span class=\"hljs-params\">(String color)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (color == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (color.equalsIgnoreCase(<span class=\"hljs-string\">&quot;RED&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Red</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (color.equalsIgnoreCase(<span class=\"hljs-string\">&quot;GREEN&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Green</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (color.equalsIgnoreCase(<span class=\"hljs-string\">&quot;BLUE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Blue</span>();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"步骤-7\"><a href=\"#步骤-7\" class=\"headerlink\" title=\"步骤 7\"></a>步骤 7</h3><p>创建一个工厂创造器 / 生成器类，通过传递形状或颜色信息来获取工厂。<br>FactoryProducer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FactoryProducer</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> AbstractFactory <span class=\"hljs-title function_\">getFactory</span><span class=\"hljs-params\">(String choice)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (choice.equalsIgnoreCase(<span class=\"hljs-string\">&quot;SHAPE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ShapeFactory</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (choice.equalsIgnoreCase(<span class=\"hljs-string\">&quot;COLOR&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ColorFactory</span>();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"步骤-8\"><a href=\"#步骤-8\" class=\"headerlink\" title=\"步骤 8\"></a>步骤 8</h3><p>使用 FactoryProducer 来获取 AbstractFactory，通过传递类型信息来获取实体类的对象。<br>AbstractFactoryPatternDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AbstractFactoryPatternDemo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br><br>        <span class=\"hljs-comment\">// 获取形状工厂</span><br>        <span class=\"hljs-type\">AbstractFactory</span> <span class=\"hljs-variable\">shapeFactory</span> <span class=\"hljs-operator\">=</span> FactoryProducer.getFactory(<span class=\"hljs-string\">&quot;SHAPE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 获取形状为 Circle 的对象</span><br>        <span class=\"hljs-type\">Shape</span> <span class=\"hljs-variable\">shape1</span> <span class=\"hljs-operator\">=</span> shapeFactory.getShape(<span class=\"hljs-string\">&quot;CIRCLE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Circle 的 draw 方法</span><br>        shape1.draw();<br><br>        <span class=\"hljs-comment\">// 获取形状为 Rectangle 的对象</span><br>        <span class=\"hljs-type\">Shape</span> <span class=\"hljs-variable\">shape2</span> <span class=\"hljs-operator\">=</span> shapeFactory.getShape(<span class=\"hljs-string\">&quot;RECTANGLE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Rectangle 的 draw 方法</span><br>        shape2.draw();<br><br>        <span class=\"hljs-comment\">// 获取形状为 Square 的对象</span><br>        <span class=\"hljs-type\">Shape</span> <span class=\"hljs-variable\">shape3</span> <span class=\"hljs-operator\">=</span> shapeFactory.getShape(<span class=\"hljs-string\">&quot;SQUARE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Square 的 draw 方法</span><br>        shape3.draw();<br><br>        <span class=\"hljs-comment\">// 获取颜色工厂</span><br>        <span class=\"hljs-type\">AbstractFactory</span> <span class=\"hljs-variable\">colorFactory</span> <span class=\"hljs-operator\">=</span> FactoryProducer.getFactory(<span class=\"hljs-string\">&quot;COLOR&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 获取颜色为 Red 的对象</span><br>        <span class=\"hljs-type\">Color</span> <span class=\"hljs-variable\">color1</span> <span class=\"hljs-operator\">=</span> colorFactory.getColor(<span class=\"hljs-string\">&quot;RED&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Red 的 fill 方法</span><br>        color1.fill();<br><br>        <span class=\"hljs-comment\">// 获取颜色为 Green 的对象</span><br>        <span class=\"hljs-type\">Color</span> <span class=\"hljs-variable\">color2</span> <span class=\"hljs-operator\">=</span> colorFactory.getColor(<span class=\"hljs-string\">&quot;Green&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Green 的 fill 方法</span><br>        color2.fill();<br><br>        <span class=\"hljs-comment\">// 获取颜色为 Blue 的对象</span><br>        <span class=\"hljs-type\">Color</span> <span class=\"hljs-variable\">color3</span> <span class=\"hljs-operator\">=</span> colorFactory.getColor(<span class=\"hljs-string\">&quot;BLUE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Blue 的 fill 方法</span><br>        color3.fill();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>\n<h3 id=\"步骤-9\"><a href=\"#步骤-9\" class=\"headerlink\" title=\"步骤 9\"></a>步骤 9</h3><p>验证输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\">Inside Circle::draw() method.<br>Inside Rectangle::draw() method.<br>Inside Square::draw() method.<br>Inside Red::fill() method.<br>Inside Green::fill() method.<br>Inside Blue::fill() method.<br></code></pre></div></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.w3cschool.cn/\">W3Cschool</a></li>\n<li>《设计模式 - 可复用的面向对象软件元素》</li>\n</ul>\n","site":{"data":{}},"wordcount":5040,"excerpt":"","more":"<h1 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h1><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br><br>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显示指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><strong>意图：</strong>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。<br><strong>主要解决：</strong>主要解决接口选择的问题。<br><strong>何时使用：</strong>系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。<br><strong>如何解决：</strong>在一个产品族里面，定义多个产品。<br><strong>关键代码：</strong>在一个工厂里聚合多类同类产品。<br><strong>应用实例：</strong>工作了，为了参加一些聚会，肯定有两套或多套衣服，不如说有商务装（成套，一系列具体产品）、时尚装（成套，一系列具体产品），甚至对于一个家庭来说，可能有商务女装、商务男装、时尚女装、时尚男装，这些都是成套的，即一系列具体产品。假设一种情况（现实中是不存在的），在您的家中，某一个衣柜（具体工厂）只能存放某一种这样的衣服（成套，一些列具体产品），每次拿这种成套的衣服时也自然要从这个衣柜中取出了。用 OO 的思想去理解，所有的衣柜（具体工厂）都是衣柜类的（抽象工厂）某一个，而每一件成套的衣服又包括具体的上衣（某一具体产品），裤子（某一具体产品），这些具体的上衣其实也都是上衣（抽象产品），具体的裤子也都是裤子（另一个抽象产品）。<br><strong>优点：</strong>当一个产品族中的多个对象被设计成一起工作时，他能保证客户端始终只使用同一个产品族中的对象。<br><strong>缺点：</strong>产品族扩展非常困难，要增加一系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p>\n<p><strong>使用场景：</strong></p>\n<ol>\n<li>QQ换皮肤，一整套一起换。</li>\n<li>生成不同操作系统的程序。</li>\n</ol>\n<p><strong>注意事项：</strong>产品族难扩展，产品等级易扩展。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>我们将创建 Shape 和 Color 接口和实现这些接口的实体类。下一步是创建抽象工厂类 AbstractFactory。接着定义工厂类 ShapeFactory 和 ColorFactory，这两个工厂都是扩展了AbstractFactory。然后创建一个工厂创造器 / 生成器类 FactoryProducer。</p>\n<p>AbstractFactoryPatternDemo， 我们演示类使用 FactoryPrducer 来获取 AbstractFactory 对象。它将向 AbstractFactory 传递形状信息 Shape （CIRCLE / RECTANGLE / SQUARE），以便获取它所需对象的类型。同时它还向 AbstractFactory 传递颜色信息 Color （RED / GREEN / BLUE），以便获取它所需对象的类型。<br><img src=\"https://atts.w3cschool.cn/attachments/uploads/2014/08/abstractfactory_pattern_uml_diagram.jpg\"></p>\n<h3 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤 1\"></a>步骤 1</h3><p>为形状创建一个接口。<br>Shape.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-2\"><a href=\"#步骤-2\" class=\"headerlink\" title=\"步骤 2\"></a>步骤 2</h3><p>创建 Shape 接口的实现类<br>Rectangle.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Rectangle</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Rectangle::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Square.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Square</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Square::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Circle.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Circle</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Shape</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">draw</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Circle::draw() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-3\"><a href=\"#步骤-3\" class=\"headerlink\" title=\"步骤 3\"></a>步骤 3</h3><p>为颜色创建一个接口<br>Color.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Color</span> &#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fill</span><span class=\"hljs-params\">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-4\"><a href=\"#步骤-4\" class=\"headerlink\" title=\"步骤 4\"></a>步骤 4</h3><p>创建实现 Color 接口的实现类<br>Red.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Red</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Color</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fill</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Red::fill() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Green.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Green</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Color</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fill</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Green::fill() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>Blue.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Blue</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Color</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fill</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;Inside Blue::fill() method.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-5\"><a href=\"#步骤-5\" class=\"headerlink\" title=\"步骤 5\"></a>步骤 5</h3><p>为 Color 和 Shape 对象创建抽象类来获取对应工厂。<br>AbstractFactory.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AbstractFactory</span> &#123;<br>    <span class=\"hljs-keyword\">abstract</span> Color <span class=\"hljs-title function_\">getColor</span><span class=\"hljs-params\">(String color)</span>;<br>    <span class=\"hljs-keyword\">abstract</span> Shape <span class=\"hljs-title function_\">getShape</span><span class=\"hljs-params\">(String shape)</span> ;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"步骤-6\"><a href=\"#步骤-6\" class=\"headerlink\" title=\"步骤 6\"></a>步骤 6</h3><p>创建扩展了AbstractFactory 的工厂类，基于给定的信息生成实体类的对象。<br>ShapeFactory.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ShapeFactory</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractFactory</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Shape <span class=\"hljs-title function_\">getShape</span><span class=\"hljs-params\">(String shapeType)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (shapeType == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (shapeType.equalsIgnoreCase(<span class=\"hljs-string\">&quot;CIRCLE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Circle</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeType.equalsIgnoreCase(<span class=\"hljs-string\">&quot;RECTANGLE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Rectangle</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (shapeType.equalsIgnoreCase(<span class=\"hljs-string\">&quot;SQUARE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Square</span>();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    Color <span class=\"hljs-title function_\">getColor</span><span class=\"hljs-params\">(String color)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>ColorFactory.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ColorFactory</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractFactory</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> Shape <span class=\"hljs-title function_\">getShape</span><span class=\"hljs-params\">(String shapeType)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    Color <span class=\"hljs-title function_\">getColor</span><span class=\"hljs-params\">(String color)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (color == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (color.equalsIgnoreCase(<span class=\"hljs-string\">&quot;RED&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Red</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (color.equalsIgnoreCase(<span class=\"hljs-string\">&quot;GREEN&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Green</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (color.equalsIgnoreCase(<span class=\"hljs-string\">&quot;BLUE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Blue</span>();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"步骤-7\"><a href=\"#步骤-7\" class=\"headerlink\" title=\"步骤 7\"></a>步骤 7</h3><p>创建一个工厂创造器 / 生成器类，通过传递形状或颜色信息来获取工厂。<br>FactoryProducer.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FactoryProducer</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> AbstractFactory <span class=\"hljs-title function_\">getFactory</span><span class=\"hljs-params\">(String choice)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (choice.equalsIgnoreCase(<span class=\"hljs-string\">&quot;SHAPE&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ShapeFactory</span>();<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (choice.equalsIgnoreCase(<span class=\"hljs-string\">&quot;COLOR&quot;</span>)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ColorFactory</span>();<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"步骤-8\"><a href=\"#步骤-8\" class=\"headerlink\" title=\"步骤 8\"></a>步骤 8</h3><p>使用 FactoryProducer 来获取 AbstractFactory，通过传递类型信息来获取实体类的对象。<br>AbstractFactoryPatternDemo.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AbstractFactoryPatternDemo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br><br>        <span class=\"hljs-comment\">// 获取形状工厂</span><br>        <span class=\"hljs-type\">AbstractFactory</span> <span class=\"hljs-variable\">shapeFactory</span> <span class=\"hljs-operator\">=</span> FactoryProducer.getFactory(<span class=\"hljs-string\">&quot;SHAPE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 获取形状为 Circle 的对象</span><br>        <span class=\"hljs-type\">Shape</span> <span class=\"hljs-variable\">shape1</span> <span class=\"hljs-operator\">=</span> shapeFactory.getShape(<span class=\"hljs-string\">&quot;CIRCLE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Circle 的 draw 方法</span><br>        shape1.draw();<br><br>        <span class=\"hljs-comment\">// 获取形状为 Rectangle 的对象</span><br>        <span class=\"hljs-type\">Shape</span> <span class=\"hljs-variable\">shape2</span> <span class=\"hljs-operator\">=</span> shapeFactory.getShape(<span class=\"hljs-string\">&quot;RECTANGLE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Rectangle 的 draw 方法</span><br>        shape2.draw();<br><br>        <span class=\"hljs-comment\">// 获取形状为 Square 的对象</span><br>        <span class=\"hljs-type\">Shape</span> <span class=\"hljs-variable\">shape3</span> <span class=\"hljs-operator\">=</span> shapeFactory.getShape(<span class=\"hljs-string\">&quot;SQUARE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Square 的 draw 方法</span><br>        shape3.draw();<br><br>        <span class=\"hljs-comment\">// 获取颜色工厂</span><br>        <span class=\"hljs-type\">AbstractFactory</span> <span class=\"hljs-variable\">colorFactory</span> <span class=\"hljs-operator\">=</span> FactoryProducer.getFactory(<span class=\"hljs-string\">&quot;COLOR&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 获取颜色为 Red 的对象</span><br>        <span class=\"hljs-type\">Color</span> <span class=\"hljs-variable\">color1</span> <span class=\"hljs-operator\">=</span> colorFactory.getColor(<span class=\"hljs-string\">&quot;RED&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Red 的 fill 方法</span><br>        color1.fill();<br><br>        <span class=\"hljs-comment\">// 获取颜色为 Green 的对象</span><br>        <span class=\"hljs-type\">Color</span> <span class=\"hljs-variable\">color2</span> <span class=\"hljs-operator\">=</span> colorFactory.getColor(<span class=\"hljs-string\">&quot;Green&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Green 的 fill 方法</span><br>        color2.fill();<br><br>        <span class=\"hljs-comment\">// 获取颜色为 Blue 的对象</span><br>        <span class=\"hljs-type\">Color</span> <span class=\"hljs-variable\">color3</span> <span class=\"hljs-operator\">=</span> colorFactory.getColor(<span class=\"hljs-string\">&quot;BLUE&quot;</span>);<br><br>        <span class=\"hljs-comment\">// 调用 Blue 的 fill 方法</span><br>        color3.fill();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"步骤-9\"><a href=\"#步骤-9\" class=\"headerlink\" title=\"步骤 9\"></a>步骤 9</h3><p>验证输出</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Inside Circle::draw() method.<br>Inside Rectangle::draw() method.<br>Inside Square::draw() method.<br>Inside Red::fill() method.<br>Inside Green::fill() method.<br>Inside Blue::fill() method.<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://www.w3cschool.cn/\">W3Cschool</a></li>\n<li>《设计模式 - 可复用的面向对象软件元素》</li>\n</ul>\n"},{"title":"zookeeper入门","date":"2022-03-25T03:09:47.000Z","description":"介绍zookeeper的入门概念、数据模型、应用场景以及Java对它进行整合。","_content":"# 1. 前言<br/>\n在此刻的我并不知道zookeeper是什么，我听到zookeeper的第一感觉就是这家伙是啥啊，对的，前言就这么短，因为我也不知道它是啥，也没怎么用。——2022-03-25 11:09:47\n# 2. ZooKeeper介绍<br/>\n## 2.1 ZooKeeper名字的由来\n学习一样东西的时候，个人觉得最好是先了解它是怎么出现在人们眼前的，然后出现了之后是怎么慢慢地被人们使用的，使用后怎样被人们慢慢扩展的。\n这里介绍一下它的由来（摘自《从Paxos到Zookeeper  分布式一致性原理与实践 [倪超著][电子工业出版社]》）：\n> ZooKeeper最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。关于 \"ZooKeeper\" 这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目），雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 Raghu Ramakrishnan 开玩笑地说：\"再这样下去，我们这儿就变成动物园了！\"此话一出，大家纷纷表示就叫动物园管理员吧——因为各个以动物园命名的分布式组件放在一起，雅虎整个分布式系统看上去就像一个大型的动物园了，而ZooKeeper正好要用来进行分布式环境的协调——于是，ZooKeeper的名字也就由此诞生了。\n\n看完ZooKeeper名字的由来是不是有点想笑，传奇的分布式协调框架就由此被命名了，这名字像是不要钱想的一样😂不过也能理解，开发人员都是可爱的😆\n\n## 2.2 ZooKeeper概述\nZooKeeper他是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\n> 原语：一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。\n\nZooKeeper为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调、通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n此外，ZooKeeper将数据保存在内存中，性能是非常棒的。在\"读\"多于\"写\"的应用程序中尤其地高性能，因为\"写\"会导致所有的服务器进行数据同步。(\"读\"多于\"写\"是协调服务的典型场景)。\n\n## 2.3 ZooKeeper特点\n- **顺序一致性**：从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到ZooKeeper中去。\n- **原子性**：所有事务的请求处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功地应用了某一个事务，要么都没有应用。\n- **单一系统映像**：无论客户端连接到哪一个ZooKeeper服务器上，其看到的服务端数据模型都是一致的。\n- **可靠性**：任何一次更改请求被应用，更改的结果就会被持久化，知道被下一次更改覆盖。\n\n## 2.4 ZooKeeper典型应用场景\n\nZooKeeper概述中，我们介绍到使用其通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n下面选3个典型的应用场景来专门说说(后续更新具体代码逻辑)：\n1. **分布式锁**：通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放。\n2. **命名服务**：可以通过ZooKeeper的顺序节点生成全局唯一ID。\n3. **数据发布/订阅**：通过Watcher机制可以很方便地实现数据发布/订阅。当你将数据发布到ZooKeeper被监听的节点上，其他机器可通过监听ZooKeeper上的节点的变化来实现配置的动态更新。\n\n实际上，这些功能的实现基本上都得益于ZooKeeper可以保存数据的功能，但是ZooKeeper不适合保存大量数据，这一点需要注意一下😤\n\n# 3. ZooKeeper的功能<br/>\n友情提示👿：拿出小本本，下面的内容非常重要啊哈\n\n## 3.1 Data model（数据模型）\nZooKeeper数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数字可以说是数字、字符串或者是二进制序列。并且，每个节点还可以拥有N个子节点，最上层是根节点使用\"/\"来表示。每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最先单元。并且，每个znode都只有一个唯一的路径标识。\n\n强调一句👿：**ZooKeeper主要是用来协调服务，而不是用来存储业务数据的，所以，不要放比较大的数据在znode上，ZooKeeper给出的上线是每个结点的数据大小最大是1M。**\n\n从下图可以更直观地看出：ZooKeeper节点路径标识方式和Unix文件系统路径非常相似，都是由一系列使用\"/\"进行分割的路径表示，开发人员可以想这个结点中写入数据，也可以在节点下面创建子节点。\n这些操作后面我们来实操一下。\n![](https://javaguide.cn/assets/znode-structure.19119dbd.png)\n\n## 3.2 znode（数据节点）\n介绍了ZooKeeper树形数据模型之后，我们知道每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最小单元。你要存放的数据就放在上面，是你使用ZooKeeper过程中经常需要接触到的一个概念。\n\n### 3.2.1 znode的4中类型\n一般我们将znode分为4大类：\n- **持久（PERSISTENT）节点**：一旦创建就一直存在即使ZooKeeper集群宕机，直到将其删除。\n- **临时（EPHEMERAL）节点**：临时结点的生命周期是与**客户端会话（session）**绑定的，**会话消失则结点消失**。并且**临时结点只能做叶子结点**，不能创建子节点。\n- **持久顺序（PERSISTENT_SEQUENTIAL）节点**：除了具有持久（PERSISTENT）节点的特性之外，子节点的名称还具有顺序性。比如```/node1/00000000001```、```/node/00000000002```。\n- **临时顺序（EPHEMERAL_SEQUENTIAL）节点**：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。\n\n### 3.2.2 znode数据结构\n每个znode由2部分组成：\n- **stat**：状态信息。\n- **data**：节点存放的数据的具体内容。\n\n如下所示，我通过ZooKeeper的get命令来获取根目录下violet节点的内容。（get命令在下面会详细介绍哟）。\n```sh\n[zk: 127.0.0.1:2181(CONNECTED) 6] get /violet\n# 该数据节点关联的数据内容为空\nnull\n# 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出\ncZxid = 0x2\nctime = Tue Nov 27 18:05:34 CST 2022\nmZxid = 0x2\nmtime = Tue Nov 27 18:05:34 CST 2022\npZxid = 0x3\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 0\nnumChildren = 1\n```\n\nStat类中包含了一个数据节点的所有状态信息的字段，包括事务ID-cZxid、节点创建时间-ctime和子节点个数-numChidren等等。\n\n下面我们来看一下每个znode状态信息究竟代表的是什么吧！（下面的内容来源于《从Paxos到Zookeeper  分布式一致性原理与实践》，因为松松也不是特别清楚，要学会参考资料哟）：\n\n| **znode状态信息**|**解释**|\n|--|--|\n| cZxid|create ZXID，即该数据节点被创建时的事务id|\n|ctime|create time, 即该节点的创建时间|\n|mZxid|modified ZXID，即该节点最终一次更新时的事务id|\n|mtime|modified time，即该节点最后一次的更新时间|\n|pZxid|该节点的子节点列表最后一次修改时的事务id，只有子节点列表变更才会更新pZxid，子节点内容变更不会更新|\n|cversion|子节点版本号，当前节点的子节点每次变化时值增加1|\n|dataVersion|数据节点内容版本号，节点创建时为0，每更新一次节点内容（不管内容有无变化）该版本号的值增加1|\n|aclVersion|节点的ACL版本号，表示该节点ACL信息变更次数|\n|ephemeralOwner|创建该临时节点的会话的sessionid：如果当前节点为持久节点，则ephemeralOwner=0|\n|dataLength|数据节点内容长度|\n|numChildren|当前节点的子节点个数|\n\n## 3.3 版本（version）\n在前面我们已经提到，对应每个znode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个znode的三个相关的版本：\n- **dataVersion**：当前znode节点的版本号。\n- **cversion**：当前znode子节点的版本。\n- **aclVersion**：当前znode的ACL的版本号。\n\n## 3.4 ACL（权限控制）\nZooKeeper采用ACL（AccessControlLists）策略来进行权限控制，类似于UNIX文件系统的权限控制。\n\n对于znode操作的权限，ZooKeeper提供了以下5种：\n- **CREATE**：能创建子节点\n- **READ**：能获取节点数据和列出其子节点\n- **WRITE**：能设置/更新节点数据\n- **DELETE**：能删除子节点\n- **ADMIN**: 能设置节点ACL的权限\n\n其中尤其需要注意的是， CREATE和DELETE这两种权限都是针对子节点的权限控制。\n\n对于身份认证，提供了以下几种方式：\n- **world**：默认方式，所有用户都可无条件访问。\n- **auth**：不适用任何id，代表任何已认证的用户。\n- **digest**：用户名：密码认证方式：username:password。\n- **ip**：对指定ip进行限制。\n\n## 3.5 Watcher（事件监听器）\nWatcher（事件监听器），是ZooKeeper中的一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知感兴趣的客户端上去，该机制是ZooKeeper实现分布式协调服务的重要特性。\n![](https://javaguide.cn/assets/watche%E6%9C%BA%E5%88%B6.f523bd89.png)\n王之怒吼👿：非常有用的一个特性，都拿出小本本记好了，后面用到ZooKeeper基本离不开Watcher（事件监听）机制。\n\n## 3.6 会话（Session）\nSession 可以看做是ZooKeeper服务器与客户端之间的一个TCP长连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZooKeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watcher事件通知。\n\nSession有一个属性叫作：sessionTimeout，sessionTimeout代表会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话依然有效。\n\n另外，在为客户端创建会话之前，服务端首先会为每个客户端都分配一个sessionID。由于sessionID是ZooKeeper会话的一个重要标识，许多与会话相关的运行机制都是基于这个sessionID的，因此，无论是哪台服务器为客户端分配的sessionID，都务必保证全局唯一。\n\n# 4. ZooKeeper集群\n为了保证高可用，最好是以集群形态来部署ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么ZooKeeper本身仍然是可用的。通常3台服务器就可以构成一个ZooKeeper集群了。ZooKeeper官方提供的架构图就是一个ZooKeeper集群整体对外提供服务。\n![](https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4.6fdcc61e.png)\n上图中每一个Server代表一个安装ZooKeeper服务的服务器。组成ZooKeeper服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都保持着通信。集群间通过ZAB协议（ZooKeeper Atomic Broadcast）来保持数据的一致性。\n\n**最典型集群模式**：**Master/Slave模式（主备模式）。在这种模式中，通常Master服务器作为主服务器提供写服务，其他的Slave服务器从服务器通过异步复制的方式获取Master服务器最新的数据提供读服务。\n\n### 4.1 ZooKeeper集群角色\n但是，在ZooKeeper中没有选择传统的Master/Slave概念，而是引入了Leader、Follower和Observer三种角色。如下图所示\n![](https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.ffff8ef5.png)\nZooKeeper集群中的所有机器通过一个Leader**选举过程**来选定一台称为\"Leader\"的机器，Leader既可以为客户端提供写服务又能提供读服务。除了Leader外，**Follower**和**Observer**都只能提供读服务。Follower和Observer唯一的区别在于Observer机器不参与Leader的选举过程，也不参与写操作的\"过半写成功\"策略，因此Observer机器可以在不影响写性能的情况下提升集群的读性能。\n\n|角色|说明|\n|-|-|\n|Leader|为客户提供读和写的服务，负责投票的发起和决议，更新系统状态。|\n|Follower|为客户端提供读服务，如果是写服务则转发给Leader。参与选举过程中的投票。|\n|Observer|为客户端提供读服务，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与\"过半写成功\"策略。在不影响写性能的情况下提升集群的读性能。此角色于ZooKeeper3.3系列新增的角色。|\n\n当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，就会进入Leader选举过程，这个过程会选举产生新的Leader服务器。\n\n这个过程大概是这样子的：\n1. Leader election在（选举阶段）：节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准leader。\n2. Discovery（发现阶段）：在这个阶段，followers跟准leader进行通信，同步followers最近接收的事务提议。\n3. Synchronization（同步阶段）：同步阶段主要是利用leader前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后准leader才会成为真正的leader。\n4. Broadcast（广播阶段）：到了这个阶段，ZooKeeper集群才能正式对外提供事务服务，并且leader可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。\n\n### 4.2 ZooKeeper集群中的服务器状态\n- **LOOKING**：寻找Leader。\n- **LEADING**：Leader状态，对应的节点为Leader。\n- **FOLLOWING**：Follower状态，对应的节点为Follower。\n- **OBSERVING**：Observer状态，对应节点为Observer，该节点不参与Leader选举。\n\n### 4.3 ZooKeeper集群为啥最好是奇数台？\nZooKeeper集群在宕掉几个ZooKeeper服务器之后，如果剩下的ZooKeeper服务器个数大于宕掉的个数的话整个ZooKeeper才依然可用。假如我们的集群中有n台ZooKeeper服务器，那么也就是剩下的服务数必须大于n/2。先说一下结论，2n和2n-1的容忍度是一样的，都是n-1，大家可以先自己仔细想一想。\n\n比如：假如我们有3台，那么最大允许宕掉1台ZooKeeper服务器，如果我们有4台的的时候也同样只允许宕掉1台。 假如我们有5台，那么最大允许宕掉2台ZooKeeper服务器，如果我们有6台的的时候也同样只允许宕掉2台。\n\n综上，何必增加那一个不必要的ZooKeeper服务器呢？\n\n### 4.4 ZooKeeper选举的过半机制防止脑裂\n##### 何为集群脑裂？\n对于一个集群，通常多台机器会部署在不同机房，来提高这个集群的可用性。保证可用性的同时，会发生一种机房间网络线路故障，导致机房间网络不通，而集群被割裂成几个小集群。这时候子集群各自选主导致\"脑裂\"的情况。\n\n举例说明：比如现在有一个由6台服务器所组成的一个集群，部署在了2个机房，每个机房3台。正常情况下只有1个leader，但是当两个机房中间网络断开的时候，每个机房的3台服务器都会认为另一个机房的3台服务器下线，而选出自己的leader并对外提供服务。若没有过半机制，当网络恢复的时候会发现有2个leader。仿佛是1个大脑（leader）分散成了2个大脑，这就发生了脑裂现象。脑裂期间2个大脑都可能对外提供服务，这将会带来数据一致性等问题。\n\n##### 过半机制是如何防止脑裂现象产生的？\nZooKeeper的过半机制导致不可能产生2个leader，因为少于等于一半是不可能产生leader的，这就使得不论机房的机器如何分配都不可能发生脑裂。\n\n# 5. ZAB协议和Paxos算法\nPaxos算法应该可以说是ZooKeeer的灵魂了。但是，ZooKeeper并没有完全采用Paxos算法，而是使用ZAB协议作为其保证数据一致性的核心算法。另外，在ZooKeeper的官方文档中也指出，ZAB协议并不想Paxos算法那样，是一种通用的分布式一致性算法，它是一种特别为ZooKeeper设计的崩溃可恢复的原子消息广播算法。\n\n### 5.1 ZAB协议介绍\nZAB（ZooKeeper Atomic Broadcast 原子广播）协议是为分布式协调服务ZooKeeper专门设计的一种支持崩溃恢复的原子广播协议。在ZooKeeper中，主要依赖ZAB协议来实现分布式数据一致性，基于该协议，ZooKeeper实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\n\n### 5.2 ZAB协议两种基本的模式：崩溃恢复和消息广播\n\nZAB协议包括两种基本的模式，分别是\n- **崩溃恢复**：当整个服务框架在启动过程中，或是当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB协议就会进入恢复模式并选举产生新的Leader服务器。当选举产生了新的Leader服务器，同时集群中已经有过半的机器与该Leader服务器完成了状态同步之后，ZAB协议就会退出恢复模式。其中，**所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和Leader服务器的数据状态保持一致**。\n- **消息广播：当集群中已经有过半的Follwer服务器完成了和Leader服务器的状态同步，name整个服务框架就可以进入消息广播模式了**。当一台同样遵守ZAB协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个Leader服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到Leader所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。\n\n\n# 6. 总结\n1. ZooKeeper 本身就是一个分布式程序（只要半数以上节点存活，ZooKeeper 就能正常服务）。\n2. 为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 ZooKeeper 本身仍然是可用的。\n3. ZooKeeper 将数据保存在内存中，这也就保证了 高吞吐量和低延迟（但是内存限制了能够存储的容量不太大，此限制也是保持 znode 中存储的数据量较小的进一步原因）。\n4. ZooKeeper 是高性能的。 在“读”多于“写”的应用程序中尤其地明显，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景。）\n5. ZooKeeper 有临时节点的概念。 当创建临时节点的客户端会话一直保持活动，瞬时节点就一直存在。而当会话终结时，瞬时节点被删除。持久节点是指一旦这个 znode 被创建了，除非主动进行 znode 的移除操作，否则这个 znode 将一直保存在 ZooKeeper 上。\n6. ZooKeeper 底层其实只提供了两个功能：① 管理（存储、读取）用户程序提交的数据；② 为用户程序提供数据节点监听服务。\n# 7. 参考\n1. [《JavaGuide》——ZooKeeper相关概念总结（入门）](https://javaguide.cn/)\n2. 《从 Paxos 到 ZooKeeper 分布式一致性原理与实践》","source":"_posts/distributed/zookeeper/zookeeper入门.md","raw":"---\ntitle: zookeeper入门\ndate: 2022-03-25 11:09:47\ntags: zookeeper\ncategories: ['分布式基础', 'zookeeper']\ndescription: 介绍zookeeper的入门概念、数据模型、应用场景以及Java对它进行整合。\n---\n# 1. 前言<br/>\n在此刻的我并不知道zookeeper是什么，我听到zookeeper的第一感觉就是这家伙是啥啊，对的，前言就这么短，因为我也不知道它是啥，也没怎么用。——2022-03-25 11:09:47\n# 2. ZooKeeper介绍<br/>\n## 2.1 ZooKeeper名字的由来\n学习一样东西的时候，个人觉得最好是先了解它是怎么出现在人们眼前的，然后出现了之后是怎么慢慢地被人们使用的，使用后怎样被人们慢慢扩展的。\n这里介绍一下它的由来（摘自《从Paxos到Zookeeper  分布式一致性原理与实践 [倪超著][电子工业出版社]》）：\n> ZooKeeper最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。关于 \"ZooKeeper\" 这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目），雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 Raghu Ramakrishnan 开玩笑地说：\"再这样下去，我们这儿就变成动物园了！\"此话一出，大家纷纷表示就叫动物园管理员吧——因为各个以动物园命名的分布式组件放在一起，雅虎整个分布式系统看上去就像一个大型的动物园了，而ZooKeeper正好要用来进行分布式环境的协调——于是，ZooKeeper的名字也就由此诞生了。\n\n看完ZooKeeper名字的由来是不是有点想笑，传奇的分布式协调框架就由此被命名了，这名字像是不要钱想的一样😂不过也能理解，开发人员都是可爱的😆\n\n## 2.2 ZooKeeper概述\nZooKeeper他是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\n> 原语：一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。\n\nZooKeeper为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调、通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n此外，ZooKeeper将数据保存在内存中，性能是非常棒的。在\"读\"多于\"写\"的应用程序中尤其地高性能，因为\"写\"会导致所有的服务器进行数据同步。(\"读\"多于\"写\"是协调服务的典型场景)。\n\n## 2.3 ZooKeeper特点\n- **顺序一致性**：从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到ZooKeeper中去。\n- **原子性**：所有事务的请求处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功地应用了某一个事务，要么都没有应用。\n- **单一系统映像**：无论客户端连接到哪一个ZooKeeper服务器上，其看到的服务端数据模型都是一致的。\n- **可靠性**：任何一次更改请求被应用，更改的结果就会被持久化，知道被下一次更改覆盖。\n\n## 2.4 ZooKeeper典型应用场景\n\nZooKeeper概述中，我们介绍到使用其通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n下面选3个典型的应用场景来专门说说(后续更新具体代码逻辑)：\n1. **分布式锁**：通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放。\n2. **命名服务**：可以通过ZooKeeper的顺序节点生成全局唯一ID。\n3. **数据发布/订阅**：通过Watcher机制可以很方便地实现数据发布/订阅。当你将数据发布到ZooKeeper被监听的节点上，其他机器可通过监听ZooKeeper上的节点的变化来实现配置的动态更新。\n\n实际上，这些功能的实现基本上都得益于ZooKeeper可以保存数据的功能，但是ZooKeeper不适合保存大量数据，这一点需要注意一下😤\n\n# 3. ZooKeeper的功能<br/>\n友情提示👿：拿出小本本，下面的内容非常重要啊哈\n\n## 3.1 Data model（数据模型）\nZooKeeper数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数字可以说是数字、字符串或者是二进制序列。并且，每个节点还可以拥有N个子节点，最上层是根节点使用\"/\"来表示。每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最先单元。并且，每个znode都只有一个唯一的路径标识。\n\n强调一句👿：**ZooKeeper主要是用来协调服务，而不是用来存储业务数据的，所以，不要放比较大的数据在znode上，ZooKeeper给出的上线是每个结点的数据大小最大是1M。**\n\n从下图可以更直观地看出：ZooKeeper节点路径标识方式和Unix文件系统路径非常相似，都是由一系列使用\"/\"进行分割的路径表示，开发人员可以想这个结点中写入数据，也可以在节点下面创建子节点。\n这些操作后面我们来实操一下。\n![](https://javaguide.cn/assets/znode-structure.19119dbd.png)\n\n## 3.2 znode（数据节点）\n介绍了ZooKeeper树形数据模型之后，我们知道每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最小单元。你要存放的数据就放在上面，是你使用ZooKeeper过程中经常需要接触到的一个概念。\n\n### 3.2.1 znode的4中类型\n一般我们将znode分为4大类：\n- **持久（PERSISTENT）节点**：一旦创建就一直存在即使ZooKeeper集群宕机，直到将其删除。\n- **临时（EPHEMERAL）节点**：临时结点的生命周期是与**客户端会话（session）**绑定的，**会话消失则结点消失**。并且**临时结点只能做叶子结点**，不能创建子节点。\n- **持久顺序（PERSISTENT_SEQUENTIAL）节点**：除了具有持久（PERSISTENT）节点的特性之外，子节点的名称还具有顺序性。比如```/node1/00000000001```、```/node/00000000002```。\n- **临时顺序（EPHEMERAL_SEQUENTIAL）节点**：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。\n\n### 3.2.2 znode数据结构\n每个znode由2部分组成：\n- **stat**：状态信息。\n- **data**：节点存放的数据的具体内容。\n\n如下所示，我通过ZooKeeper的get命令来获取根目录下violet节点的内容。（get命令在下面会详细介绍哟）。\n```sh\n[zk: 127.0.0.1:2181(CONNECTED) 6] get /violet\n# 该数据节点关联的数据内容为空\nnull\n# 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出\ncZxid = 0x2\nctime = Tue Nov 27 18:05:34 CST 2022\nmZxid = 0x2\nmtime = Tue Nov 27 18:05:34 CST 2022\npZxid = 0x3\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 0\nnumChildren = 1\n```\n\nStat类中包含了一个数据节点的所有状态信息的字段，包括事务ID-cZxid、节点创建时间-ctime和子节点个数-numChidren等等。\n\n下面我们来看一下每个znode状态信息究竟代表的是什么吧！（下面的内容来源于《从Paxos到Zookeeper  分布式一致性原理与实践》，因为松松也不是特别清楚，要学会参考资料哟）：\n\n| **znode状态信息**|**解释**|\n|--|--|\n| cZxid|create ZXID，即该数据节点被创建时的事务id|\n|ctime|create time, 即该节点的创建时间|\n|mZxid|modified ZXID，即该节点最终一次更新时的事务id|\n|mtime|modified time，即该节点最后一次的更新时间|\n|pZxid|该节点的子节点列表最后一次修改时的事务id，只有子节点列表变更才会更新pZxid，子节点内容变更不会更新|\n|cversion|子节点版本号，当前节点的子节点每次变化时值增加1|\n|dataVersion|数据节点内容版本号，节点创建时为0，每更新一次节点内容（不管内容有无变化）该版本号的值增加1|\n|aclVersion|节点的ACL版本号，表示该节点ACL信息变更次数|\n|ephemeralOwner|创建该临时节点的会话的sessionid：如果当前节点为持久节点，则ephemeralOwner=0|\n|dataLength|数据节点内容长度|\n|numChildren|当前节点的子节点个数|\n\n## 3.3 版本（version）\n在前面我们已经提到，对应每个znode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个znode的三个相关的版本：\n- **dataVersion**：当前znode节点的版本号。\n- **cversion**：当前znode子节点的版本。\n- **aclVersion**：当前znode的ACL的版本号。\n\n## 3.4 ACL（权限控制）\nZooKeeper采用ACL（AccessControlLists）策略来进行权限控制，类似于UNIX文件系统的权限控制。\n\n对于znode操作的权限，ZooKeeper提供了以下5种：\n- **CREATE**：能创建子节点\n- **READ**：能获取节点数据和列出其子节点\n- **WRITE**：能设置/更新节点数据\n- **DELETE**：能删除子节点\n- **ADMIN**: 能设置节点ACL的权限\n\n其中尤其需要注意的是， CREATE和DELETE这两种权限都是针对子节点的权限控制。\n\n对于身份认证，提供了以下几种方式：\n- **world**：默认方式，所有用户都可无条件访问。\n- **auth**：不适用任何id，代表任何已认证的用户。\n- **digest**：用户名：密码认证方式：username:password。\n- **ip**：对指定ip进行限制。\n\n## 3.5 Watcher（事件监听器）\nWatcher（事件监听器），是ZooKeeper中的一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知感兴趣的客户端上去，该机制是ZooKeeper实现分布式协调服务的重要特性。\n![](https://javaguide.cn/assets/watche%E6%9C%BA%E5%88%B6.f523bd89.png)\n王之怒吼👿：非常有用的一个特性，都拿出小本本记好了，后面用到ZooKeeper基本离不开Watcher（事件监听）机制。\n\n## 3.6 会话（Session）\nSession 可以看做是ZooKeeper服务器与客户端之间的一个TCP长连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZooKeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watcher事件通知。\n\nSession有一个属性叫作：sessionTimeout，sessionTimeout代表会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话依然有效。\n\n另外，在为客户端创建会话之前，服务端首先会为每个客户端都分配一个sessionID。由于sessionID是ZooKeeper会话的一个重要标识，许多与会话相关的运行机制都是基于这个sessionID的，因此，无论是哪台服务器为客户端分配的sessionID，都务必保证全局唯一。\n\n# 4. ZooKeeper集群\n为了保证高可用，最好是以集群形态来部署ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么ZooKeeper本身仍然是可用的。通常3台服务器就可以构成一个ZooKeeper集群了。ZooKeeper官方提供的架构图就是一个ZooKeeper集群整体对外提供服务。\n![](https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4.6fdcc61e.png)\n上图中每一个Server代表一个安装ZooKeeper服务的服务器。组成ZooKeeper服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都保持着通信。集群间通过ZAB协议（ZooKeeper Atomic Broadcast）来保持数据的一致性。\n\n**最典型集群模式**：**Master/Slave模式（主备模式）。在这种模式中，通常Master服务器作为主服务器提供写服务，其他的Slave服务器从服务器通过异步复制的方式获取Master服务器最新的数据提供读服务。\n\n### 4.1 ZooKeeper集群角色\n但是，在ZooKeeper中没有选择传统的Master/Slave概念，而是引入了Leader、Follower和Observer三种角色。如下图所示\n![](https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.ffff8ef5.png)\nZooKeeper集群中的所有机器通过一个Leader**选举过程**来选定一台称为\"Leader\"的机器，Leader既可以为客户端提供写服务又能提供读服务。除了Leader外，**Follower**和**Observer**都只能提供读服务。Follower和Observer唯一的区别在于Observer机器不参与Leader的选举过程，也不参与写操作的\"过半写成功\"策略，因此Observer机器可以在不影响写性能的情况下提升集群的读性能。\n\n|角色|说明|\n|-|-|\n|Leader|为客户提供读和写的服务，负责投票的发起和决议，更新系统状态。|\n|Follower|为客户端提供读服务，如果是写服务则转发给Leader。参与选举过程中的投票。|\n|Observer|为客户端提供读服务，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与\"过半写成功\"策略。在不影响写性能的情况下提升集群的读性能。此角色于ZooKeeper3.3系列新增的角色。|\n\n当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，就会进入Leader选举过程，这个过程会选举产生新的Leader服务器。\n\n这个过程大概是这样子的：\n1. Leader election在（选举阶段）：节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准leader。\n2. Discovery（发现阶段）：在这个阶段，followers跟准leader进行通信，同步followers最近接收的事务提议。\n3. Synchronization（同步阶段）：同步阶段主要是利用leader前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后准leader才会成为真正的leader。\n4. Broadcast（广播阶段）：到了这个阶段，ZooKeeper集群才能正式对外提供事务服务，并且leader可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。\n\n### 4.2 ZooKeeper集群中的服务器状态\n- **LOOKING**：寻找Leader。\n- **LEADING**：Leader状态，对应的节点为Leader。\n- **FOLLOWING**：Follower状态，对应的节点为Follower。\n- **OBSERVING**：Observer状态，对应节点为Observer，该节点不参与Leader选举。\n\n### 4.3 ZooKeeper集群为啥最好是奇数台？\nZooKeeper集群在宕掉几个ZooKeeper服务器之后，如果剩下的ZooKeeper服务器个数大于宕掉的个数的话整个ZooKeeper才依然可用。假如我们的集群中有n台ZooKeeper服务器，那么也就是剩下的服务数必须大于n/2。先说一下结论，2n和2n-1的容忍度是一样的，都是n-1，大家可以先自己仔细想一想。\n\n比如：假如我们有3台，那么最大允许宕掉1台ZooKeeper服务器，如果我们有4台的的时候也同样只允许宕掉1台。 假如我们有5台，那么最大允许宕掉2台ZooKeeper服务器，如果我们有6台的的时候也同样只允许宕掉2台。\n\n综上，何必增加那一个不必要的ZooKeeper服务器呢？\n\n### 4.4 ZooKeeper选举的过半机制防止脑裂\n##### 何为集群脑裂？\n对于一个集群，通常多台机器会部署在不同机房，来提高这个集群的可用性。保证可用性的同时，会发生一种机房间网络线路故障，导致机房间网络不通，而集群被割裂成几个小集群。这时候子集群各自选主导致\"脑裂\"的情况。\n\n举例说明：比如现在有一个由6台服务器所组成的一个集群，部署在了2个机房，每个机房3台。正常情况下只有1个leader，但是当两个机房中间网络断开的时候，每个机房的3台服务器都会认为另一个机房的3台服务器下线，而选出自己的leader并对外提供服务。若没有过半机制，当网络恢复的时候会发现有2个leader。仿佛是1个大脑（leader）分散成了2个大脑，这就发生了脑裂现象。脑裂期间2个大脑都可能对外提供服务，这将会带来数据一致性等问题。\n\n##### 过半机制是如何防止脑裂现象产生的？\nZooKeeper的过半机制导致不可能产生2个leader，因为少于等于一半是不可能产生leader的，这就使得不论机房的机器如何分配都不可能发生脑裂。\n\n# 5. ZAB协议和Paxos算法\nPaxos算法应该可以说是ZooKeeer的灵魂了。但是，ZooKeeper并没有完全采用Paxos算法，而是使用ZAB协议作为其保证数据一致性的核心算法。另外，在ZooKeeper的官方文档中也指出，ZAB协议并不想Paxos算法那样，是一种通用的分布式一致性算法，它是一种特别为ZooKeeper设计的崩溃可恢复的原子消息广播算法。\n\n### 5.1 ZAB协议介绍\nZAB（ZooKeeper Atomic Broadcast 原子广播）协议是为分布式协调服务ZooKeeper专门设计的一种支持崩溃恢复的原子广播协议。在ZooKeeper中，主要依赖ZAB协议来实现分布式数据一致性，基于该协议，ZooKeeper实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\n\n### 5.2 ZAB协议两种基本的模式：崩溃恢复和消息广播\n\nZAB协议包括两种基本的模式，分别是\n- **崩溃恢复**：当整个服务框架在启动过程中，或是当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB协议就会进入恢复模式并选举产生新的Leader服务器。当选举产生了新的Leader服务器，同时集群中已经有过半的机器与该Leader服务器完成了状态同步之后，ZAB协议就会退出恢复模式。其中，**所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和Leader服务器的数据状态保持一致**。\n- **消息广播：当集群中已经有过半的Follwer服务器完成了和Leader服务器的状态同步，name整个服务框架就可以进入消息广播模式了**。当一台同样遵守ZAB协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个Leader服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到Leader所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。\n\n\n# 6. 总结\n1. ZooKeeper 本身就是一个分布式程序（只要半数以上节点存活，ZooKeeper 就能正常服务）。\n2. 为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 ZooKeeper 本身仍然是可用的。\n3. ZooKeeper 将数据保存在内存中，这也就保证了 高吞吐量和低延迟（但是内存限制了能够存储的容量不太大，此限制也是保持 znode 中存储的数据量较小的进一步原因）。\n4. ZooKeeper 是高性能的。 在“读”多于“写”的应用程序中尤其地明显，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景。）\n5. ZooKeeper 有临时节点的概念。 当创建临时节点的客户端会话一直保持活动，瞬时节点就一直存在。而当会话终结时，瞬时节点被删除。持久节点是指一旦这个 znode 被创建了，除非主动进行 znode 的移除操作，否则这个 znode 将一直保存在 ZooKeeper 上。\n6. ZooKeeper 底层其实只提供了两个功能：① 管理（存储、读取）用户程序提交的数据；② 为用户程序提供数据节点监听服务。\n# 7. 参考\n1. [《JavaGuide》——ZooKeeper相关概念总结（入门）](https://javaguide.cn/)\n2. 《从 Paxos 到 ZooKeeper 分布式一致性原理与实践》","slug":"distributed/zookeeper/zookeeper入门","published":1,"updated":"2022-06-21T06:39:12.274Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl53jo0j0000hi8vp0cwvdthu","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言<br/></h1><p>在此刻的我并不知道zookeeper是什么，我听到zookeeper的第一感觉就是这家伙是啥啊，对的，前言就这么短，因为我也不知道它是啥，也没怎么用。——2022-03-25 11:09:47</p>\n<h1 id=\"2-ZooKeeper介绍\"><a href=\"#2-ZooKeeper介绍\" class=\"headerlink\" title=\"2. ZooKeeper介绍\"></a>2. ZooKeeper介绍<br/></h1><h2 id=\"2-1-ZooKeeper名字的由来\"><a href=\"#2-1-ZooKeeper名字的由来\" class=\"headerlink\" title=\"2.1 ZooKeeper名字的由来\"></a>2.1 ZooKeeper名字的由来</h2><p>学习一样东西的时候，个人觉得最好是先了解它是怎么出现在人们眼前的，然后出现了之后是怎么慢慢地被人们使用的，使用后怎样被人们慢慢扩展的。<br>这里介绍一下它的由来（摘自《从Paxos到Zookeeper  分布式一致性原理与实践 [倪超著][电子工业出版社]》）：</p>\n<blockquote>\n<p>ZooKeeper最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。关于 “ZooKeeper” 这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目），雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 Raghu Ramakrishnan 开玩笑地说：”再这样下去，我们这儿就变成动物园了！”此话一出，大家纷纷表示就叫动物园管理员吧——因为各个以动物园命名的分布式组件放在一起，雅虎整个分布式系统看上去就像一个大型的动物园了，而ZooKeeper正好要用来进行分布式环境的协调——于是，ZooKeeper的名字也就由此诞生了。</p>\n</blockquote>\n<p>看完ZooKeeper名字的由来是不是有点想笑，传奇的分布式协调框架就由此被命名了，这名字像是不要钱想的一样😂不过也能理解，开发人员都是可爱的😆</p>\n<h2 id=\"2-2-ZooKeeper概述\"><a href=\"#2-2-ZooKeeper概述\" class=\"headerlink\" title=\"2.2 ZooKeeper概述\"></a>2.2 ZooKeeper概述</h2><p>ZooKeeper他是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p>\n<blockquote>\n<p>原语：一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。</p>\n</blockquote>\n<p>ZooKeeper为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调、通知、集群管理、Master选举、分布式锁和分布式队列等功能。</p>\n<p>此外，ZooKeeper将数据保存在内存中，性能是非常棒的。在”读”多于”写”的应用程序中尤其地高性能，因为”写”会导致所有的服务器进行数据同步。(“读”多于”写”是协调服务的典型场景)。</p>\n<h2 id=\"2-3-ZooKeeper特点\"><a href=\"#2-3-ZooKeeper特点\" class=\"headerlink\" title=\"2.3 ZooKeeper特点\"></a>2.3 ZooKeeper特点</h2><ul>\n<li><strong>顺序一致性</strong>：从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到ZooKeeper中去。</li>\n<li><strong>原子性</strong>：所有事务的请求处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功地应用了某一个事务，要么都没有应用。</li>\n<li><strong>单一系统映像</strong>：无论客户端连接到哪一个ZooKeeper服务器上，其看到的服务端数据模型都是一致的。</li>\n<li><strong>可靠性</strong>：任何一次更改请求被应用，更改的结果就会被持久化，知道被下一次更改覆盖。</li>\n</ul>\n<h2 id=\"2-4-ZooKeeper典型应用场景\"><a href=\"#2-4-ZooKeeper典型应用场景\" class=\"headerlink\" title=\"2.4 ZooKeeper典型应用场景\"></a>2.4 ZooKeeper典型应用场景</h2><p>ZooKeeper概述中，我们介绍到使用其通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。</p>\n<p>下面选3个典型的应用场景来专门说说(后续更新具体代码逻辑)：</p>\n<ol>\n<li><strong>分布式锁</strong>：通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放。</li>\n<li><strong>命名服务</strong>：可以通过ZooKeeper的顺序节点生成全局唯一ID。</li>\n<li><strong>数据发布/订阅</strong>：通过Watcher机制可以很方便地实现数据发布/订阅。当你将数据发布到ZooKeeper被监听的节点上，其他机器可通过监听ZooKeeper上的节点的变化来实现配置的动态更新。</li>\n</ol>\n<p>实际上，这些功能的实现基本上都得益于ZooKeeper可以保存数据的功能，但是ZooKeeper不适合保存大量数据，这一点需要注意一下😤</p>\n<h1 id=\"3-ZooKeeper的功能\"><a href=\"#3-ZooKeeper的功能\" class=\"headerlink\" title=\"3. ZooKeeper的功能\"></a>3. ZooKeeper的功能<br/></h1><p>友情提示👿：拿出小本本，下面的内容非常重要啊哈</p>\n<h2 id=\"3-1-Data-model（数据模型）\"><a href=\"#3-1-Data-model（数据模型）\" class=\"headerlink\" title=\"3.1 Data model（数据模型）\"></a>3.1 Data model（数据模型）</h2><p>ZooKeeper数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数字可以说是数字、字符串或者是二进制序列。并且，每个节点还可以拥有N个子节点，最上层是根节点使用”/“来表示。每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最先单元。并且，每个znode都只有一个唯一的路径标识。</p>\n<p>强调一句👿：<strong>ZooKeeper主要是用来协调服务，而不是用来存储业务数据的，所以，不要放比较大的数据在znode上，ZooKeeper给出的上线是每个结点的数据大小最大是1M。</strong></p>\n<p>从下图可以更直观地看出：ZooKeeper节点路径标识方式和Unix文件系统路径非常相似，都是由一系列使用”/“进行分割的路径表示，开发人员可以想这个结点中写入数据，也可以在节点下面创建子节点。<br>这些操作后面我们来实操一下。<br><img src=\"https://javaguide.cn/assets/znode-structure.19119dbd.png\"></p>\n<h2 id=\"3-2-znode（数据节点）\"><a href=\"#3-2-znode（数据节点）\" class=\"headerlink\" title=\"3.2 znode（数据节点）\"></a>3.2 znode（数据节点）</h2><p>介绍了ZooKeeper树形数据模型之后，我们知道每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最小单元。你要存放的数据就放在上面，是你使用ZooKeeper过程中经常需要接触到的一个概念。</p>\n<h3 id=\"3-2-1-znode的4中类型\"><a href=\"#3-2-1-znode的4中类型\" class=\"headerlink\" title=\"3.2.1 znode的4中类型\"></a>3.2.1 znode的4中类型</h3><p>一般我们将znode分为4大类：</p>\n<ul>\n<li><strong>持久（PERSISTENT）节点</strong>：一旦创建就一直存在即使ZooKeeper集群宕机，直到将其删除。</li>\n<li><strong>临时（EPHEMERAL）节点</strong>：临时结点的生命周期是与<strong>客户端会话（session）</strong>绑定的，<strong>会话消失则结点消失</strong>。并且<strong>临时结点只能做叶子结点</strong>，不能创建子节点。</li>\n<li><strong>持久顺序（PERSISTENT_SEQUENTIAL）节点</strong>：除了具有持久（PERSISTENT）节点的特性之外，子节点的名称还具有顺序性。比如<code>/node1/00000000001</code>、<code>/node/00000000002</code>。</li>\n<li><strong>临时顺序（EPHEMERAL_SEQUENTIAL）节点</strong>：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。</li>\n</ul>\n<h3 id=\"3-2-2-znode数据结构\"><a href=\"#3-2-2-znode数据结构\" class=\"headerlink\" title=\"3.2.2 znode数据结构\"></a>3.2.2 znode数据结构</h3><p>每个znode由2部分组成：</p>\n<ul>\n<li><strong>stat</strong>：状态信息。</li>\n<li><strong>data</strong>：节点存放的数据的具体内容。</li>\n</ul>\n<p>如下所示，我通过ZooKeeper的get命令来获取根目录下violet节点的内容。（get命令在下面会详细介绍哟）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sh\">[zk: 127.0.0.1:2181(CONNECTED) 6] get /violet<br><span class=\"hljs-comment\"># 该数据节点关联的数据内容为空</span><br>null<br><span class=\"hljs-comment\"># 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出</span><br>cZxid = 0x2<br>ctime = Tue Nov 27 18:05:34 CST 2022<br>mZxid = 0x2<br>mtime = Tue Nov 27 18:05:34 CST 2022<br>pZxid = 0x3<br>cversion = 1<br>dataVersion = 0<br>aclVersion = 0<br>ephemeralOwner = 0x0<br>dataLength = 0<br>numChildren = 1<br></code></pre></div></td></tr></table></figure>\n\n<p>Stat类中包含了一个数据节点的所有状态信息的字段，包括事务ID-cZxid、节点创建时间-ctime和子节点个数-numChidren等等。</p>\n<p>下面我们来看一下每个znode状态信息究竟代表的是什么吧！（下面的内容来源于《从Paxos到Zookeeper  分布式一致性原理与实践》，因为松松也不是特别清楚，要学会参考资料哟）：</p>\n<table>\n<thead>\n<tr>\n<th><strong>znode状态信息</strong></th>\n<th><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cZxid</td>\n<td>create ZXID，即该数据节点被创建时的事务id</td>\n</tr>\n<tr>\n<td>ctime</td>\n<td>create time, 即该节点的创建时间</td>\n</tr>\n<tr>\n<td>mZxid</td>\n<td>modified ZXID，即该节点最终一次更新时的事务id</td>\n</tr>\n<tr>\n<td>mtime</td>\n<td>modified time，即该节点最后一次的更新时间</td>\n</tr>\n<tr>\n<td>pZxid</td>\n<td>该节点的子节点列表最后一次修改时的事务id，只有子节点列表变更才会更新pZxid，子节点内容变更不会更新</td>\n</tr>\n<tr>\n<td>cversion</td>\n<td>子节点版本号，当前节点的子节点每次变化时值增加1</td>\n</tr>\n<tr>\n<td>dataVersion</td>\n<td>数据节点内容版本号，节点创建时为0，每更新一次节点内容（不管内容有无变化）该版本号的值增加1</td>\n</tr>\n<tr>\n<td>aclVersion</td>\n<td>节点的ACL版本号，表示该节点ACL信息变更次数</td>\n</tr>\n<tr>\n<td>ephemeralOwner</td>\n<td>创建该临时节点的会话的sessionid：如果当前节点为持久节点，则ephemeralOwner=0</td>\n</tr>\n<tr>\n<td>dataLength</td>\n<td>数据节点内容长度</td>\n</tr>\n<tr>\n<td>numChildren</td>\n<td>当前节点的子节点个数</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-3-版本（version）\"><a href=\"#3-3-版本（version）\" class=\"headerlink\" title=\"3.3 版本（version）\"></a>3.3 版本（version）</h2><p>在前面我们已经提到，对应每个znode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个znode的三个相关的版本：</p>\n<ul>\n<li><strong>dataVersion</strong>：当前znode节点的版本号。</li>\n<li><strong>cversion</strong>：当前znode子节点的版本。</li>\n<li><strong>aclVersion</strong>：当前znode的ACL的版本号。</li>\n</ul>\n<h2 id=\"3-4-ACL（权限控制）\"><a href=\"#3-4-ACL（权限控制）\" class=\"headerlink\" title=\"3.4 ACL（权限控制）\"></a>3.4 ACL（权限控制）</h2><p>ZooKeeper采用ACL（AccessControlLists）策略来进行权限控制，类似于UNIX文件系统的权限控制。</p>\n<p>对于znode操作的权限，ZooKeeper提供了以下5种：</p>\n<ul>\n<li><strong>CREATE</strong>：能创建子节点</li>\n<li><strong>READ</strong>：能获取节点数据和列出其子节点</li>\n<li><strong>WRITE</strong>：能设置/更新节点数据</li>\n<li><strong>DELETE</strong>：能删除子节点</li>\n<li><strong>ADMIN</strong>: 能设置节点ACL的权限</li>\n</ul>\n<p>其中尤其需要注意的是， CREATE和DELETE这两种权限都是针对子节点的权限控制。</p>\n<p>对于身份认证，提供了以下几种方式：</p>\n<ul>\n<li><strong>world</strong>：默认方式，所有用户都可无条件访问。</li>\n<li><strong>auth</strong>：不适用任何id，代表任何已认证的用户。</li>\n<li><strong>digest</strong>：用户名：密码认证方式：username:password。</li>\n<li><strong>ip</strong>：对指定ip进行限制。</li>\n</ul>\n<h2 id=\"3-5-Watcher（事件监听器）\"><a href=\"#3-5-Watcher（事件监听器）\" class=\"headerlink\" title=\"3.5 Watcher（事件监听器）\"></a>3.5 Watcher（事件监听器）</h2><p>Watcher（事件监听器），是ZooKeeper中的一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知感兴趣的客户端上去，该机制是ZooKeeper实现分布式协调服务的重要特性。<br><img src=\"https://javaguide.cn/assets/watche%E6%9C%BA%E5%88%B6.f523bd89.png\"><br>王之怒吼👿：非常有用的一个特性，都拿出小本本记好了，后面用到ZooKeeper基本离不开Watcher（事件监听）机制。</p>\n<h2 id=\"3-6-会话（Session）\"><a href=\"#3-6-会话（Session）\" class=\"headerlink\" title=\"3.6 会话（Session）\"></a>3.6 会话（Session）</h2><p>Session 可以看做是ZooKeeper服务器与客户端之间的一个TCP长连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZooKeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watcher事件通知。</p>\n<p>Session有一个属性叫作：sessionTimeout，sessionTimeout代表会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话依然有效。</p>\n<p>另外，在为客户端创建会话之前，服务端首先会为每个客户端都分配一个sessionID。由于sessionID是ZooKeeper会话的一个重要标识，许多与会话相关的运行机制都是基于这个sessionID的，因此，无论是哪台服务器为客户端分配的sessionID，都务必保证全局唯一。</p>\n<h1 id=\"4-ZooKeeper集群\"><a href=\"#4-ZooKeeper集群\" class=\"headerlink\" title=\"4. ZooKeeper集群\"></a>4. ZooKeeper集群</h1><p>为了保证高可用，最好是以集群形态来部署ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么ZooKeeper本身仍然是可用的。通常3台服务器就可以构成一个ZooKeeper集群了。ZooKeeper官方提供的架构图就是一个ZooKeeper集群整体对外提供服务。<br><img src=\"https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4.6fdcc61e.png\"><br>上图中每一个Server代表一个安装ZooKeeper服务的服务器。组成ZooKeeper服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都保持着通信。集群间通过ZAB协议（ZooKeeper Atomic Broadcast）来保持数据的一致性。</p>\n<p><strong>最典型集群模式</strong>：**Master/Slave模式（主备模式）。在这种模式中，通常Master服务器作为主服务器提供写服务，其他的Slave服务器从服务器通过异步复制的方式获取Master服务器最新的数据提供读服务。</p>\n<h3 id=\"4-1-ZooKeeper集群角色\"><a href=\"#4-1-ZooKeeper集群角色\" class=\"headerlink\" title=\"4.1 ZooKeeper集群角色\"></a>4.1 ZooKeeper集群角色</h3><p>但是，在ZooKeeper中没有选择传统的Master/Slave概念，而是引入了Leader、Follower和Observer三种角色。如下图所示<br><img src=\"https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.ffff8ef5.png\"><br>ZooKeeper集群中的所有机器通过一个Leader<strong>选举过程</strong>来选定一台称为”Leader”的机器，Leader既可以为客户端提供写服务又能提供读服务。除了Leader外，<strong>Follower</strong>和<strong>Observer</strong>都只能提供读服务。Follower和Observer唯一的区别在于Observer机器不参与Leader的选举过程，也不参与写操作的”过半写成功”策略，因此Observer机器可以在不影响写性能的情况下提升集群的读性能。</p>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Leader</td>\n<td>为客户提供读和写的服务，负责投票的发起和决议，更新系统状态。</td>\n</tr>\n<tr>\n<td>Follower</td>\n<td>为客户端提供读服务，如果是写服务则转发给Leader。参与选举过程中的投票。</td>\n</tr>\n<tr>\n<td>Observer</td>\n<td>为客户端提供读服务，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与”过半写成功”策略。在不影响写性能的情况下提升集群的读性能。此角色于ZooKeeper3.3系列新增的角色。</td>\n</tr>\n</tbody></table>\n<p>当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，就会进入Leader选举过程，这个过程会选举产生新的Leader服务器。</p>\n<p>这个过程大概是这样子的：</p>\n<ol>\n<li>Leader election在（选举阶段）：节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准leader。</li>\n<li>Discovery（发现阶段）：在这个阶段，followers跟准leader进行通信，同步followers最近接收的事务提议。</li>\n<li>Synchronization（同步阶段）：同步阶段主要是利用leader前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后准leader才会成为真正的leader。</li>\n<li>Broadcast（广播阶段）：到了这个阶段，ZooKeeper集群才能正式对外提供事务服务，并且leader可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。</li>\n</ol>\n<h3 id=\"4-2-ZooKeeper集群中的服务器状态\"><a href=\"#4-2-ZooKeeper集群中的服务器状态\" class=\"headerlink\" title=\"4.2 ZooKeeper集群中的服务器状态\"></a>4.2 ZooKeeper集群中的服务器状态</h3><ul>\n<li><strong>LOOKING</strong>：寻找Leader。</li>\n<li><strong>LEADING</strong>：Leader状态，对应的节点为Leader。</li>\n<li><strong>FOLLOWING</strong>：Follower状态，对应的节点为Follower。</li>\n<li><strong>OBSERVING</strong>：Observer状态，对应节点为Observer，该节点不参与Leader选举。</li>\n</ul>\n<h3 id=\"4-3-ZooKeeper集群为啥最好是奇数台？\"><a href=\"#4-3-ZooKeeper集群为啥最好是奇数台？\" class=\"headerlink\" title=\"4.3 ZooKeeper集群为啥最好是奇数台？\"></a>4.3 ZooKeeper集群为啥最好是奇数台？</h3><p>ZooKeeper集群在宕掉几个ZooKeeper服务器之后，如果剩下的ZooKeeper服务器个数大于宕掉的个数的话整个ZooKeeper才依然可用。假如我们的集群中有n台ZooKeeper服务器，那么也就是剩下的服务数必须大于n/2。先说一下结论，2n和2n-1的容忍度是一样的，都是n-1，大家可以先自己仔细想一想。</p>\n<p>比如：假如我们有3台，那么最大允许宕掉1台ZooKeeper服务器，如果我们有4台的的时候也同样只允许宕掉1台。 假如我们有5台，那么最大允许宕掉2台ZooKeeper服务器，如果我们有6台的的时候也同样只允许宕掉2台。</p>\n<p>综上，何必增加那一个不必要的ZooKeeper服务器呢？</p>\n<h3 id=\"4-4-ZooKeeper选举的过半机制防止脑裂\"><a href=\"#4-4-ZooKeeper选举的过半机制防止脑裂\" class=\"headerlink\" title=\"4.4 ZooKeeper选举的过半机制防止脑裂\"></a>4.4 ZooKeeper选举的过半机制防止脑裂</h3><h5 id=\"何为集群脑裂？\"><a href=\"#何为集群脑裂？\" class=\"headerlink\" title=\"何为集群脑裂？\"></a>何为集群脑裂？</h5><p>对于一个集群，通常多台机器会部署在不同机房，来提高这个集群的可用性。保证可用性的同时，会发生一种机房间网络线路故障，导致机房间网络不通，而集群被割裂成几个小集群。这时候子集群各自选主导致”脑裂”的情况。</p>\n<p>举例说明：比如现在有一个由6台服务器所组成的一个集群，部署在了2个机房，每个机房3台。正常情况下只有1个leader，但是当两个机房中间网络断开的时候，每个机房的3台服务器都会认为另一个机房的3台服务器下线，而选出自己的leader并对外提供服务。若没有过半机制，当网络恢复的时候会发现有2个leader。仿佛是1个大脑（leader）分散成了2个大脑，这就发生了脑裂现象。脑裂期间2个大脑都可能对外提供服务，这将会带来数据一致性等问题。</p>\n<h5 id=\"过半机制是如何防止脑裂现象产生的？\"><a href=\"#过半机制是如何防止脑裂现象产生的？\" class=\"headerlink\" title=\"过半机制是如何防止脑裂现象产生的？\"></a>过半机制是如何防止脑裂现象产生的？</h5><p>ZooKeeper的过半机制导致不可能产生2个leader，因为少于等于一半是不可能产生leader的，这就使得不论机房的机器如何分配都不可能发生脑裂。</p>\n<h1 id=\"5-ZAB协议和Paxos算法\"><a href=\"#5-ZAB协议和Paxos算法\" class=\"headerlink\" title=\"5. ZAB协议和Paxos算法\"></a>5. ZAB协议和Paxos算法</h1><p>Paxos算法应该可以说是ZooKeeer的灵魂了。但是，ZooKeeper并没有完全采用Paxos算法，而是使用ZAB协议作为其保证数据一致性的核心算法。另外，在ZooKeeper的官方文档中也指出，ZAB协议并不想Paxos算法那样，是一种通用的分布式一致性算法，它是一种特别为ZooKeeper设计的崩溃可恢复的原子消息广播算法。</p>\n<h3 id=\"5-1-ZAB协议介绍\"><a href=\"#5-1-ZAB协议介绍\" class=\"headerlink\" title=\"5.1 ZAB协议介绍\"></a>5.1 ZAB协议介绍</h3><p>ZAB（ZooKeeper Atomic Broadcast 原子广播）协议是为分布式协调服务ZooKeeper专门设计的一种支持崩溃恢复的原子广播协议。在ZooKeeper中，主要依赖ZAB协议来实现分布式数据一致性，基于该协议，ZooKeeper实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</p>\n<h3 id=\"5-2-ZAB协议两种基本的模式：崩溃恢复和消息广播\"><a href=\"#5-2-ZAB协议两种基本的模式：崩溃恢复和消息广播\" class=\"headerlink\" title=\"5.2 ZAB协议两种基本的模式：崩溃恢复和消息广播\"></a>5.2 ZAB协议两种基本的模式：崩溃恢复和消息广播</h3><p>ZAB协议包括两种基本的模式，分别是</p>\n<ul>\n<li><strong>崩溃恢复</strong>：当整个服务框架在启动过程中，或是当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB协议就会进入恢复模式并选举产生新的Leader服务器。当选举产生了新的Leader服务器，同时集群中已经有过半的机器与该Leader服务器完成了状态同步之后，ZAB协议就会退出恢复模式。其中，<strong>所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和Leader服务器的数据状态保持一致</strong>。</li>\n<li><strong>消息广播：当集群中已经有过半的Follwer服务器完成了和Leader服务器的状态同步，name整个服务框架就可以进入消息广播模式了</strong>。当一台同样遵守ZAB协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个Leader服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到Leader所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。</li>\n</ul>\n<h1 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h1><ol>\n<li>ZooKeeper 本身就是一个分布式程序（只要半数以上节点存活，ZooKeeper 就能正常服务）。</li>\n<li>为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 ZooKeeper 本身仍然是可用的。</li>\n<li>ZooKeeper 将数据保存在内存中，这也就保证了 高吞吐量和低延迟（但是内存限制了能够存储的容量不太大，此限制也是保持 znode 中存储的数据量较小的进一步原因）。</li>\n<li>ZooKeeper 是高性能的。 在“读”多于“写”的应用程序中尤其地明显，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景。）</li>\n<li>ZooKeeper 有临时节点的概念。 当创建临时节点的客户端会话一直保持活动，瞬时节点就一直存在。而当会话终结时，瞬时节点被删除。持久节点是指一旦这个 znode 被创建了，除非主动进行 znode 的移除操作，否则这个 znode 将一直保存在 ZooKeeper 上。</li>\n<li>ZooKeeper 底层其实只提供了两个功能：① 管理（存储、读取）用户程序提交的数据；② 为用户程序提供数据节点监听服务。<h1 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7. 参考\"></a>7. 参考</h1></li>\n<li><a href=\"https://javaguide.cn/\">《JavaGuide》——ZooKeeper相关概念总结（入门）</a></li>\n<li>《从 Paxos 到 ZooKeeper 分布式一致性原理与实践》</li>\n</ol>\n","site":{"data":{}},"wordcount":8195,"excerpt":"","more":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言<br/></h1><p>在此刻的我并不知道zookeeper是什么，我听到zookeeper的第一感觉就是这家伙是啥啊，对的，前言就这么短，因为我也不知道它是啥，也没怎么用。——2022-03-25 11:09:47</p>\n<h1 id=\"2-ZooKeeper介绍\"><a href=\"#2-ZooKeeper介绍\" class=\"headerlink\" title=\"2. ZooKeeper介绍\"></a>2. ZooKeeper介绍<br/></h1><h2 id=\"2-1-ZooKeeper名字的由来\"><a href=\"#2-1-ZooKeeper名字的由来\" class=\"headerlink\" title=\"2.1 ZooKeeper名字的由来\"></a>2.1 ZooKeeper名字的由来</h2><p>学习一样东西的时候，个人觉得最好是先了解它是怎么出现在人们眼前的，然后出现了之后是怎么慢慢地被人们使用的，使用后怎样被人们慢慢扩展的。<br>这里介绍一下它的由来（摘自《从Paxos到Zookeeper  分布式一致性原理与实践 [倪超著][电子工业出版社]》）：</p>\n<blockquote>\n<p>ZooKeeper最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。关于 “ZooKeeper” 这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目），雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 Raghu Ramakrishnan 开玩笑地说：”再这样下去，我们这儿就变成动物园了！”此话一出，大家纷纷表示就叫动物园管理员吧——因为各个以动物园命名的分布式组件放在一起，雅虎整个分布式系统看上去就像一个大型的动物园了，而ZooKeeper正好要用来进行分布式环境的协调——于是，ZooKeeper的名字也就由此诞生了。</p>\n</blockquote>\n<p>看完ZooKeeper名字的由来是不是有点想笑，传奇的分布式协调框架就由此被命名了，这名字像是不要钱想的一样😂不过也能理解，开发人员都是可爱的😆</p>\n<h2 id=\"2-2-ZooKeeper概述\"><a href=\"#2-2-ZooKeeper概述\" class=\"headerlink\" title=\"2.2 ZooKeeper概述\"></a>2.2 ZooKeeper概述</h2><p>ZooKeeper他是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p>\n<blockquote>\n<p>原语：一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。</p>\n</blockquote>\n<p>ZooKeeper为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调、通知、集群管理、Master选举、分布式锁和分布式队列等功能。</p>\n<p>此外，ZooKeeper将数据保存在内存中，性能是非常棒的。在”读”多于”写”的应用程序中尤其地高性能，因为”写”会导致所有的服务器进行数据同步。(“读”多于”写”是协调服务的典型场景)。</p>\n<h2 id=\"2-3-ZooKeeper特点\"><a href=\"#2-3-ZooKeeper特点\" class=\"headerlink\" title=\"2.3 ZooKeeper特点\"></a>2.3 ZooKeeper特点</h2><ul>\n<li><strong>顺序一致性</strong>：从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到ZooKeeper中去。</li>\n<li><strong>原子性</strong>：所有事务的请求处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功地应用了某一个事务，要么都没有应用。</li>\n<li><strong>单一系统映像</strong>：无论客户端连接到哪一个ZooKeeper服务器上，其看到的服务端数据模型都是一致的。</li>\n<li><strong>可靠性</strong>：任何一次更改请求被应用，更改的结果就会被持久化，知道被下一次更改覆盖。</li>\n</ul>\n<h2 id=\"2-4-ZooKeeper典型应用场景\"><a href=\"#2-4-ZooKeeper典型应用场景\" class=\"headerlink\" title=\"2.4 ZooKeeper典型应用场景\"></a>2.4 ZooKeeper典型应用场景</h2><p>ZooKeeper概述中，我们介绍到使用其通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。</p>\n<p>下面选3个典型的应用场景来专门说说(后续更新具体代码逻辑)：</p>\n<ol>\n<li><strong>分布式锁</strong>：通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放。</li>\n<li><strong>命名服务</strong>：可以通过ZooKeeper的顺序节点生成全局唯一ID。</li>\n<li><strong>数据发布/订阅</strong>：通过Watcher机制可以很方便地实现数据发布/订阅。当你将数据发布到ZooKeeper被监听的节点上，其他机器可通过监听ZooKeeper上的节点的变化来实现配置的动态更新。</li>\n</ol>\n<p>实际上，这些功能的实现基本上都得益于ZooKeeper可以保存数据的功能，但是ZooKeeper不适合保存大量数据，这一点需要注意一下😤</p>\n<h1 id=\"3-ZooKeeper的功能\"><a href=\"#3-ZooKeeper的功能\" class=\"headerlink\" title=\"3. ZooKeeper的功能\"></a>3. ZooKeeper的功能<br/></h1><p>友情提示👿：拿出小本本，下面的内容非常重要啊哈</p>\n<h2 id=\"3-1-Data-model（数据模型）\"><a href=\"#3-1-Data-model（数据模型）\" class=\"headerlink\" title=\"3.1 Data model（数据模型）\"></a>3.1 Data model（数据模型）</h2><p>ZooKeeper数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数字可以说是数字、字符串或者是二进制序列。并且，每个节点还可以拥有N个子节点，最上层是根节点使用”/“来表示。每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最先单元。并且，每个znode都只有一个唯一的路径标识。</p>\n<p>强调一句👿：<strong>ZooKeeper主要是用来协调服务，而不是用来存储业务数据的，所以，不要放比较大的数据在znode上，ZooKeeper给出的上线是每个结点的数据大小最大是1M。</strong></p>\n<p>从下图可以更直观地看出：ZooKeeper节点路径标识方式和Unix文件系统路径非常相似，都是由一系列使用”/“进行分割的路径表示，开发人员可以想这个结点中写入数据，也可以在节点下面创建子节点。<br>这些操作后面我们来实操一下。<br><img src=\"https://javaguide.cn/assets/znode-structure.19119dbd.png\"></p>\n<h2 id=\"3-2-znode（数据节点）\"><a href=\"#3-2-znode（数据节点）\" class=\"headerlink\" title=\"3.2 znode（数据节点）\"></a>3.2 znode（数据节点）</h2><p>介绍了ZooKeeper树形数据模型之后，我们知道每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最小单元。你要存放的数据就放在上面，是你使用ZooKeeper过程中经常需要接触到的一个概念。</p>\n<h3 id=\"3-2-1-znode的4中类型\"><a href=\"#3-2-1-znode的4中类型\" class=\"headerlink\" title=\"3.2.1 znode的4中类型\"></a>3.2.1 znode的4中类型</h3><p>一般我们将znode分为4大类：</p>\n<ul>\n<li><strong>持久（PERSISTENT）节点</strong>：一旦创建就一直存在即使ZooKeeper集群宕机，直到将其删除。</li>\n<li><strong>临时（EPHEMERAL）节点</strong>：临时结点的生命周期是与<strong>客户端会话（session）</strong>绑定的，<strong>会话消失则结点消失</strong>。并且<strong>临时结点只能做叶子结点</strong>，不能创建子节点。</li>\n<li><strong>持久顺序（PERSISTENT_SEQUENTIAL）节点</strong>：除了具有持久（PERSISTENT）节点的特性之外，子节点的名称还具有顺序性。比如<code>/node1/00000000001</code>、<code>/node/00000000002</code>。</li>\n<li><strong>临时顺序（EPHEMERAL_SEQUENTIAL）节点</strong>：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。</li>\n</ul>\n<h3 id=\"3-2-2-znode数据结构\"><a href=\"#3-2-2-znode数据结构\" class=\"headerlink\" title=\"3.2.2 znode数据结构\"></a>3.2.2 znode数据结构</h3><p>每个znode由2部分组成：</p>\n<ul>\n<li><strong>stat</strong>：状态信息。</li>\n<li><strong>data</strong>：节点存放的数据的具体内容。</li>\n</ul>\n<p>如下所示，我通过ZooKeeper的get命令来获取根目录下violet节点的内容。（get命令在下面会详细介绍哟）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[zk: 127.0.0.1:2181(CONNECTED) 6] get /violet<br><span class=\"hljs-comment\"># 该数据节点关联的数据内容为空</span><br>null<br><span class=\"hljs-comment\"># 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出</span><br>cZxid = 0x2<br>ctime = Tue Nov 27 18:05:34 CST 2022<br>mZxid = 0x2<br>mtime = Tue Nov 27 18:05:34 CST 2022<br>pZxid = 0x3<br>cversion = 1<br>dataVersion = 0<br>aclVersion = 0<br>ephemeralOwner = 0x0<br>dataLength = 0<br>numChildren = 1<br></code></pre></td></tr></table></figure>\n\n<p>Stat类中包含了一个数据节点的所有状态信息的字段，包括事务ID-cZxid、节点创建时间-ctime和子节点个数-numChidren等等。</p>\n<p>下面我们来看一下每个znode状态信息究竟代表的是什么吧！（下面的内容来源于《从Paxos到Zookeeper  分布式一致性原理与实践》，因为松松也不是特别清楚，要学会参考资料哟）：</p>\n<table>\n<thead>\n<tr>\n<th><strong>znode状态信息</strong></th>\n<th><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cZxid</td>\n<td>create ZXID，即该数据节点被创建时的事务id</td>\n</tr>\n<tr>\n<td>ctime</td>\n<td>create time, 即该节点的创建时间</td>\n</tr>\n<tr>\n<td>mZxid</td>\n<td>modified ZXID，即该节点最终一次更新时的事务id</td>\n</tr>\n<tr>\n<td>mtime</td>\n<td>modified time，即该节点最后一次的更新时间</td>\n</tr>\n<tr>\n<td>pZxid</td>\n<td>该节点的子节点列表最后一次修改时的事务id，只有子节点列表变更才会更新pZxid，子节点内容变更不会更新</td>\n</tr>\n<tr>\n<td>cversion</td>\n<td>子节点版本号，当前节点的子节点每次变化时值增加1</td>\n</tr>\n<tr>\n<td>dataVersion</td>\n<td>数据节点内容版本号，节点创建时为0，每更新一次节点内容（不管内容有无变化）该版本号的值增加1</td>\n</tr>\n<tr>\n<td>aclVersion</td>\n<td>节点的ACL版本号，表示该节点ACL信息变更次数</td>\n</tr>\n<tr>\n<td>ephemeralOwner</td>\n<td>创建该临时节点的会话的sessionid：如果当前节点为持久节点，则ephemeralOwner=0</td>\n</tr>\n<tr>\n<td>dataLength</td>\n<td>数据节点内容长度</td>\n</tr>\n<tr>\n<td>numChildren</td>\n<td>当前节点的子节点个数</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-3-版本（version）\"><a href=\"#3-3-版本（version）\" class=\"headerlink\" title=\"3.3 版本（version）\"></a>3.3 版本（version）</h2><p>在前面我们已经提到，对应每个znode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个znode的三个相关的版本：</p>\n<ul>\n<li><strong>dataVersion</strong>：当前znode节点的版本号。</li>\n<li><strong>cversion</strong>：当前znode子节点的版本。</li>\n<li><strong>aclVersion</strong>：当前znode的ACL的版本号。</li>\n</ul>\n<h2 id=\"3-4-ACL（权限控制）\"><a href=\"#3-4-ACL（权限控制）\" class=\"headerlink\" title=\"3.4 ACL（权限控制）\"></a>3.4 ACL（权限控制）</h2><p>ZooKeeper采用ACL（AccessControlLists）策略来进行权限控制，类似于UNIX文件系统的权限控制。</p>\n<p>对于znode操作的权限，ZooKeeper提供了以下5种：</p>\n<ul>\n<li><strong>CREATE</strong>：能创建子节点</li>\n<li><strong>READ</strong>：能获取节点数据和列出其子节点</li>\n<li><strong>WRITE</strong>：能设置/更新节点数据</li>\n<li><strong>DELETE</strong>：能删除子节点</li>\n<li><strong>ADMIN</strong>: 能设置节点ACL的权限</li>\n</ul>\n<p>其中尤其需要注意的是， CREATE和DELETE这两种权限都是针对子节点的权限控制。</p>\n<p>对于身份认证，提供了以下几种方式：</p>\n<ul>\n<li><strong>world</strong>：默认方式，所有用户都可无条件访问。</li>\n<li><strong>auth</strong>：不适用任何id，代表任何已认证的用户。</li>\n<li><strong>digest</strong>：用户名：密码认证方式：username:password。</li>\n<li><strong>ip</strong>：对指定ip进行限制。</li>\n</ul>\n<h2 id=\"3-5-Watcher（事件监听器）\"><a href=\"#3-5-Watcher（事件监听器）\" class=\"headerlink\" title=\"3.5 Watcher（事件监听器）\"></a>3.5 Watcher（事件监听器）</h2><p>Watcher（事件监听器），是ZooKeeper中的一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知感兴趣的客户端上去，该机制是ZooKeeper实现分布式协调服务的重要特性。<br><img src=\"https://javaguide.cn/assets/watche%E6%9C%BA%E5%88%B6.f523bd89.png\"><br>王之怒吼👿：非常有用的一个特性，都拿出小本本记好了，后面用到ZooKeeper基本离不开Watcher（事件监听）机制。</p>\n<h2 id=\"3-6-会话（Session）\"><a href=\"#3-6-会话（Session）\" class=\"headerlink\" title=\"3.6 会话（Session）\"></a>3.6 会话（Session）</h2><p>Session 可以看做是ZooKeeper服务器与客户端之间的一个TCP长连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZooKeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watcher事件通知。</p>\n<p>Session有一个属性叫作：sessionTimeout，sessionTimeout代表会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话依然有效。</p>\n<p>另外，在为客户端创建会话之前，服务端首先会为每个客户端都分配一个sessionID。由于sessionID是ZooKeeper会话的一个重要标识，许多与会话相关的运行机制都是基于这个sessionID的，因此，无论是哪台服务器为客户端分配的sessionID，都务必保证全局唯一。</p>\n<h1 id=\"4-ZooKeeper集群\"><a href=\"#4-ZooKeeper集群\" class=\"headerlink\" title=\"4. ZooKeeper集群\"></a>4. ZooKeeper集群</h1><p>为了保证高可用，最好是以集群形态来部署ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么ZooKeeper本身仍然是可用的。通常3台服务器就可以构成一个ZooKeeper集群了。ZooKeeper官方提供的架构图就是一个ZooKeeper集群整体对外提供服务。<br><img src=\"https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4.6fdcc61e.png\"><br>上图中每一个Server代表一个安装ZooKeeper服务的服务器。组成ZooKeeper服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都保持着通信。集群间通过ZAB协议（ZooKeeper Atomic Broadcast）来保持数据的一致性。</p>\n<p><strong>最典型集群模式</strong>：**Master/Slave模式（主备模式）。在这种模式中，通常Master服务器作为主服务器提供写服务，其他的Slave服务器从服务器通过异步复制的方式获取Master服务器最新的数据提供读服务。</p>\n<h3 id=\"4-1-ZooKeeper集群角色\"><a href=\"#4-1-ZooKeeper集群角色\" class=\"headerlink\" title=\"4.1 ZooKeeper集群角色\"></a>4.1 ZooKeeper集群角色</h3><p>但是，在ZooKeeper中没有选择传统的Master/Slave概念，而是引入了Leader、Follower和Observer三种角色。如下图所示<br><img src=\"https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.ffff8ef5.png\"><br>ZooKeeper集群中的所有机器通过一个Leader<strong>选举过程</strong>来选定一台称为”Leader”的机器，Leader既可以为客户端提供写服务又能提供读服务。除了Leader外，<strong>Follower</strong>和<strong>Observer</strong>都只能提供读服务。Follower和Observer唯一的区别在于Observer机器不参与Leader的选举过程，也不参与写操作的”过半写成功”策略，因此Observer机器可以在不影响写性能的情况下提升集群的读性能。</p>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Leader</td>\n<td>为客户提供读和写的服务，负责投票的发起和决议，更新系统状态。</td>\n</tr>\n<tr>\n<td>Follower</td>\n<td>为客户端提供读服务，如果是写服务则转发给Leader。参与选举过程中的投票。</td>\n</tr>\n<tr>\n<td>Observer</td>\n<td>为客户端提供读服务，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与”过半写成功”策略。在不影响写性能的情况下提升集群的读性能。此角色于ZooKeeper3.3系列新增的角色。</td>\n</tr>\n</tbody></table>\n<p>当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，就会进入Leader选举过程，这个过程会选举产生新的Leader服务器。</p>\n<p>这个过程大概是这样子的：</p>\n<ol>\n<li>Leader election在（选举阶段）：节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准leader。</li>\n<li>Discovery（发现阶段）：在这个阶段，followers跟准leader进行通信，同步followers最近接收的事务提议。</li>\n<li>Synchronization（同步阶段）：同步阶段主要是利用leader前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后准leader才会成为真正的leader。</li>\n<li>Broadcast（广播阶段）：到了这个阶段，ZooKeeper集群才能正式对外提供事务服务，并且leader可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。</li>\n</ol>\n<h3 id=\"4-2-ZooKeeper集群中的服务器状态\"><a href=\"#4-2-ZooKeeper集群中的服务器状态\" class=\"headerlink\" title=\"4.2 ZooKeeper集群中的服务器状态\"></a>4.2 ZooKeeper集群中的服务器状态</h3><ul>\n<li><strong>LOOKING</strong>：寻找Leader。</li>\n<li><strong>LEADING</strong>：Leader状态，对应的节点为Leader。</li>\n<li><strong>FOLLOWING</strong>：Follower状态，对应的节点为Follower。</li>\n<li><strong>OBSERVING</strong>：Observer状态，对应节点为Observer，该节点不参与Leader选举。</li>\n</ul>\n<h3 id=\"4-3-ZooKeeper集群为啥最好是奇数台？\"><a href=\"#4-3-ZooKeeper集群为啥最好是奇数台？\" class=\"headerlink\" title=\"4.3 ZooKeeper集群为啥最好是奇数台？\"></a>4.3 ZooKeeper集群为啥最好是奇数台？</h3><p>ZooKeeper集群在宕掉几个ZooKeeper服务器之后，如果剩下的ZooKeeper服务器个数大于宕掉的个数的话整个ZooKeeper才依然可用。假如我们的集群中有n台ZooKeeper服务器，那么也就是剩下的服务数必须大于n/2。先说一下结论，2n和2n-1的容忍度是一样的，都是n-1，大家可以先自己仔细想一想。</p>\n<p>比如：假如我们有3台，那么最大允许宕掉1台ZooKeeper服务器，如果我们有4台的的时候也同样只允许宕掉1台。 假如我们有5台，那么最大允许宕掉2台ZooKeeper服务器，如果我们有6台的的时候也同样只允许宕掉2台。</p>\n<p>综上，何必增加那一个不必要的ZooKeeper服务器呢？</p>\n<h3 id=\"4-4-ZooKeeper选举的过半机制防止脑裂\"><a href=\"#4-4-ZooKeeper选举的过半机制防止脑裂\" class=\"headerlink\" title=\"4.4 ZooKeeper选举的过半机制防止脑裂\"></a>4.4 ZooKeeper选举的过半机制防止脑裂</h3><h5 id=\"何为集群脑裂？\"><a href=\"#何为集群脑裂？\" class=\"headerlink\" title=\"何为集群脑裂？\"></a>何为集群脑裂？</h5><p>对于一个集群，通常多台机器会部署在不同机房，来提高这个集群的可用性。保证可用性的同时，会发生一种机房间网络线路故障，导致机房间网络不通，而集群被割裂成几个小集群。这时候子集群各自选主导致”脑裂”的情况。</p>\n<p>举例说明：比如现在有一个由6台服务器所组成的一个集群，部署在了2个机房，每个机房3台。正常情况下只有1个leader，但是当两个机房中间网络断开的时候，每个机房的3台服务器都会认为另一个机房的3台服务器下线，而选出自己的leader并对外提供服务。若没有过半机制，当网络恢复的时候会发现有2个leader。仿佛是1个大脑（leader）分散成了2个大脑，这就发生了脑裂现象。脑裂期间2个大脑都可能对外提供服务，这将会带来数据一致性等问题。</p>\n<h5 id=\"过半机制是如何防止脑裂现象产生的？\"><a href=\"#过半机制是如何防止脑裂现象产生的？\" class=\"headerlink\" title=\"过半机制是如何防止脑裂现象产生的？\"></a>过半机制是如何防止脑裂现象产生的？</h5><p>ZooKeeper的过半机制导致不可能产生2个leader，因为少于等于一半是不可能产生leader的，这就使得不论机房的机器如何分配都不可能发生脑裂。</p>\n<h1 id=\"5-ZAB协议和Paxos算法\"><a href=\"#5-ZAB协议和Paxos算法\" class=\"headerlink\" title=\"5. ZAB协议和Paxos算法\"></a>5. ZAB协议和Paxos算法</h1><p>Paxos算法应该可以说是ZooKeeer的灵魂了。但是，ZooKeeper并没有完全采用Paxos算法，而是使用ZAB协议作为其保证数据一致性的核心算法。另外，在ZooKeeper的官方文档中也指出，ZAB协议并不想Paxos算法那样，是一种通用的分布式一致性算法，它是一种特别为ZooKeeper设计的崩溃可恢复的原子消息广播算法。</p>\n<h3 id=\"5-1-ZAB协议介绍\"><a href=\"#5-1-ZAB协议介绍\" class=\"headerlink\" title=\"5.1 ZAB协议介绍\"></a>5.1 ZAB协议介绍</h3><p>ZAB（ZooKeeper Atomic Broadcast 原子广播）协议是为分布式协调服务ZooKeeper专门设计的一种支持崩溃恢复的原子广播协议。在ZooKeeper中，主要依赖ZAB协议来实现分布式数据一致性，基于该协议，ZooKeeper实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</p>\n<h3 id=\"5-2-ZAB协议两种基本的模式：崩溃恢复和消息广播\"><a href=\"#5-2-ZAB协议两种基本的模式：崩溃恢复和消息广播\" class=\"headerlink\" title=\"5.2 ZAB协议两种基本的模式：崩溃恢复和消息广播\"></a>5.2 ZAB协议两种基本的模式：崩溃恢复和消息广播</h3><p>ZAB协议包括两种基本的模式，分别是</p>\n<ul>\n<li><strong>崩溃恢复</strong>：当整个服务框架在启动过程中，或是当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB协议就会进入恢复模式并选举产生新的Leader服务器。当选举产生了新的Leader服务器，同时集群中已经有过半的机器与该Leader服务器完成了状态同步之后，ZAB协议就会退出恢复模式。其中，<strong>所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和Leader服务器的数据状态保持一致</strong>。</li>\n<li><strong>消息广播：当集群中已经有过半的Follwer服务器完成了和Leader服务器的状态同步，name整个服务框架就可以进入消息广播模式了</strong>。当一台同样遵守ZAB协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个Leader服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到Leader所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。</li>\n</ul>\n<h1 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h1><ol>\n<li>ZooKeeper 本身就是一个分布式程序（只要半数以上节点存活，ZooKeeper 就能正常服务）。</li>\n<li>为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 ZooKeeper 本身仍然是可用的。</li>\n<li>ZooKeeper 将数据保存在内存中，这也就保证了 高吞吐量和低延迟（但是内存限制了能够存储的容量不太大，此限制也是保持 znode 中存储的数据量较小的进一步原因）。</li>\n<li>ZooKeeper 是高性能的。 在“读”多于“写”的应用程序中尤其地明显，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景。）</li>\n<li>ZooKeeper 有临时节点的概念。 当创建临时节点的客户端会话一直保持活动，瞬时节点就一直存在。而当会话终结时，瞬时节点被删除。持久节点是指一旦这个 znode 被创建了，除非主动进行 znode 的移除操作，否则这个 znode 将一直保存在 ZooKeeper 上。</li>\n<li>ZooKeeper 底层其实只提供了两个功能：① 管理（存储、读取）用户程序提交的数据；② 为用户程序提供数据节点监听服务。<h1 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7. 参考\"></a>7. 参考</h1></li>\n<li><a href=\"https://javaguide.cn/\">《JavaGuide》——ZooKeeper相关概念总结（入门）</a></li>\n<li>《从 Paxos 到 ZooKeeper 分布式一致性原理与实践》</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl53jo0il0000i8vphm419j1q","category_id":"cl53jo0is0002i8vp1gtoaob5","_id":"cl53jo0iz000di8vp4cj1hdn2"},{"post_id":"cl53jo0iq0001i8vp6ukh6jij","category_id":"cl53jo0is0002i8vp1gtoaob5","_id":"cl53jo0j1000ii8vp5ip177gu"},{"post_id":"cl53jo0it0004i8vp5ekh3a5u","category_id":"cl53jo0iz000ci8vpe5my7o2t","_id":"cl53jo0j3000ni8vphlgp8uec"},{"post_id":"cl53jo0iu0005i8vpa232ak8h","category_id":"cl53jo0j2000ji8vpc40r1gnn","_id":"cl53jo0j4000si8vp4hrvd7ym"},{"post_id":"cl53jo0iv0006i8vp23mndrkk","category_id":"cl53jo0j2000ji8vpc40r1gnn","_id":"cl53jo0j4000wi8vpckt6hjaz"},{"post_id":"cl53jo0ix000ai8vp3pe37vl0","category_id":"cl53jo0j2000ji8vpc40r1gnn","_id":"cl53jo0j50010i8vp0qn4d1an"},{"post_id":"cl53jo0iz000gi8vp9ph8e3il","category_id":"cl53jo0iz000ci8vpe5my7o2t","_id":"cl53jo0j60014i8vp9og162c1"},{"post_id":"cl53jo0iz000gi8vp9ph8e3il","category_id":"cl53jo0j5000zi8vpej695lh2","_id":"cl53jo0j60015i8vpf4xy5281"},{"post_id":"cl53jo0iy000bi8vp0k47edm9","category_id":"cl53jo0iz000ci8vpe5my7o2t","_id":"cl53jo0j70017i8vpdr1dewkt"},{"post_id":"cl53jo0iy000bi8vp0k47edm9","category_id":"cl53jo0j5000zi8vpej695lh2","_id":"cl53jo0j70018i8vp2soc9nh7"},{"post_id":"cl53jo0j0000hi8vp0cwvdthu","category_id":"cl53jo0j2000ji8vpc40r1gnn","_id":"cl53jo0j70019i8vp9don53br"},{"post_id":"cl53jo0j0000hi8vp0cwvdthu","category_id":"cl53jo0j60016i8vpf3xa8834","_id":"cl53jo0j7001ai8vpbaip0p16"}],"PostTag":[{"post_id":"cl53jo0il0000i8vphm419j1q","tag_id":"cl53jo0it0003i8vp67bmcjw8","_id":"cl53jo0ix0009i8vpcf0x94sc"},{"post_id":"cl53jo0iq0001i8vp6ukh6jij","tag_id":"cl53jo0it0003i8vp67bmcjw8","_id":"cl53jo0iz000fi8vp1hkh5g5o"},{"post_id":"cl53jo0iz000gi8vp9ph8e3il","tag_id":"cl53jo0iz000ei8vpbaey31bs","_id":"cl53jo0j2000li8vp64ize8mh"},{"post_id":"cl53jo0it0004i8vp5ekh3a5u","tag_id":"cl53jo0iz000ei8vpbaey31bs","_id":"cl53jo0j2000mi8vpchnl4w0f"},{"post_id":"cl53jo0iu0005i8vpa232ak8h","tag_id":"cl53jo0j2000ki8vp3h23gm36","_id":"cl53jo0j3000qi8vph64578ad"},{"post_id":"cl53jo0iv0006i8vp23mndrkk","tag_id":"cl53jo0j3000pi8vpau3m7nwh","_id":"cl53jo0j4000ui8vpgfkodeqg"},{"post_id":"cl53jo0iy000bi8vp0k47edm9","tag_id":"cl53jo0iz000ei8vpbaey31bs","_id":"cl53jo0j5000yi8vp6krrd6uj"},{"post_id":"cl53jo0j0000hi8vp0cwvdthu","tag_id":"cl53jo0j4000xi8vpbs8r7ive","_id":"cl53jo0j50011i8vp92fd3xl1"}],"Tag":[{"name":"acwing","_id":"cl53jo0it0003i8vp67bmcjw8"},{"name":"设计模式","_id":"cl53jo0iz000ei8vpbaey31bs"},{"name":"分布式协议","_id":"cl53jo0j2000ki8vp3h23gm36"},{"name":"ACID","_id":"cl53jo0j3000pi8vpau3m7nwh"},{"name":"zookeeper","_id":"cl53jo0j4000xi8vpbs8r7ive"}]}}