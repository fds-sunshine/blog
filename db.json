{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"340499890fcdfc2fcb03e125ef0962f7462fe87c","modified":1654585701727},{"_id":"source/_posts/acwing/quicksort.md","hash":"fc05f2d5ca124faf9b7dfa8ae28ceb4a073cc697","modified":1654585701727},{"_id":"source/_posts/docker/docker-mysql.md","hash":"6b94ea856ed0551f2f92ac8b38ca7b48c5031d8e","modified":1654585701727},{"_id":"source/_posts/redis/redis数据结构.md","hash":"8482f3e8c0d0ea19738ac3783ffa126f95b82956","modified":1654587802944},{"_id":"source/_posts/distributed/concept/2PC协议与3PC协议.md","hash":"855eea24ffa109fe2a19a0ea6112d0099b5e01d8","modified":1654585701727},{"_id":"source/_posts/distributed/concept/ACID.md","hash":"3c748eedb51108daf008740aca60c98159ef569c","modified":1654585701727},{"_id":"source/_posts/distributed/concept/分布式的理解.md","hash":"56d2228747a2fbaf255e210d6a3a410082fd94ab","modified":1654585701727},{"_id":"source/_posts/distributed/zookeeper/zookeeper入门.md","hash":"34560886a92211a85dec7c74b2aac3a317249466","modified":1654585701727},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1654585701731},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1654585701727},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1654585701727},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1654585701727},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1654585701727},{"_id":"themes/fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1654585701727},{"_id":"themes/fluid/README.md","hash":"03cfa8e5f149514b57ef80dcb84eb7fea261370d","modified":1654585701727},{"_id":"themes/fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1654585701727},{"_id":"themes/fluid/_config.yml","hash":"d7f76f0c5aa6ba6f7d1efbeafe63af3717d4681a","modified":1654585701727},{"_id":"themes/fluid/package.json","hash":"4e3992cacd64c6888218b0346283258e8f82a27d","modified":1654585701727},{"_id":"themes/fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1654585701727},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1654585701727},{"_id":"themes/fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1654585701727},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1654585701727},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1654585701727},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1654585701727},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1654585701727},{"_id":"themes/fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1654585701727},{"_id":"themes/fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1654585701727},{"_id":"themes/fluid/layout/categories.ejs","hash":"20c2a195a109d2a263b5fa6e79cbcc62932508ad","modified":1654585701727},{"_id":"themes/fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1654585701727},{"_id":"themes/fluid/layout/index.ejs","hash":"f3ae4395e751c4a02d5895e07856b1e8edfdda08","modified":1654585701727},{"_id":"themes/fluid/layout/layout.ejs","hash":"7f566edf750241e62d7c54abfbb0c504fdab850a","modified":1654585701727},{"_id":"themes/fluid/layout/links.ejs","hash":"2a7b49f0f9aecf07550b5a0b99242aab5654cf2b","modified":1654585701727},{"_id":"themes/fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1654585701727},{"_id":"themes/fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1654585701727},{"_id":"themes/fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1654585701727},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1654585701727},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1654585701727},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1654585701727},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1654585701727},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1654585701727},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1654585701727},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1654585701727},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"53a4f6029373a40394a87aba9284696a71610f90","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"58b4bbe36386de4305a8da5ffd7d56802df23049","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"c363829a4b80f74fc1c565e41f6dab41c95006ea","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"a62278c38a310da495d96c39abacacef266945cb","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"f7f3494ed001e8cdcdc3e8a1d2cd1195cff2ded5","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"e71b3c4aa263163597d31b1f91e5a1a877084cfd","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"32a17edadeed40da6db21d2d8031bd47d2fc9bf4","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"0ee838b6fcd895d21a29d9d67dbb99b752d623d1","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1654585701727},{"_id":"themes/fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1654585701727},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1654585701727},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1654585701727},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1654585701731},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1654585701731},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"cde964c8cd3217268a231de5e018a62c53c2e047","modified":1654585701731},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1654585701731},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1654585701731},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"3aa5b4ea879cd34d3a32468d88da18d72cbcc8e0","modified":1654585701731},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1654585701731},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1654585701731},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1654585701731},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1654585701731},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1654585701731},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1654585701731},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1654585701731},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1654585701731},{"_id":"themes/fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1654585701731},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1654585701731},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1654585701731},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1654585701731},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1654585701731},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1654585701731},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1654585701731},{"_id":"themes/fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1654585701731},{"_id":"themes/fluid/source/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1654585701731},{"_id":"themes/fluid/source/js/events.js","hash":"41632930eca3e763cc1cf2de0b521e602dc72152","modified":1654585701731},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1654585701731},{"_id":"themes/fluid/source/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1654585701731},{"_id":"themes/fluid/source/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1654585701731},{"_id":"themes/fluid/source/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1654585701731},{"_id":"themes/fluid/source/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1654585701731},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1654585701731},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"1af53bc0be642610a3a4d4e7c05287854a821508","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"4052ab2a8f78efa92f0fe17abe8f66135943390a","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"21e00443054802e893aac1f668b69d5bb4b39b3a","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"df6941bd3b860180d01fd39ee859ed2d42f4d1f0","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1654585701727},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"e8e01c5db46b383748855452aecd70fcda99f598","modified":1654585701727},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1654585701727},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1654585701727},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"1efa731dc58318f7da2e5af8cf9a58aea94236c1","modified":1654585701727},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"fd5fcb6a61ad865197a778eeae889b80484227dd","modified":1654585701727},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1654585701727},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1654585701727},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1654585701731},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1654585701731},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"08b455b848b21d57e0563b87071c4bae2b63bafe","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"c2d8bfd04bf0734b387c049402b46a06a05fc582","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"80098e8354069631bde8edcd1181a53091a92949","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"a2993f23701de9a83e3f428300e62c5c52b4ff4b","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"616c1f7147078c3d532dd1cfd2af09c0c3a816f0","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"7e32a3268accf3d524209c213e15e2d5d5e2e1a6","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"5e86487de0f16c30ca3e16460ab94b57620e31c5","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b89b96c8a6a433a6f372b42710554b05cab85a24","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"0ce7552dc4993926426019398d73e817cfd841a1","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1654585701731},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1654585701731},{"_id":"themes/fluid/source/img/default.png","hash":"1eec8e152fbfcc661dc7eeb354498e6b2b88f64e","modified":1654585701731},{"_id":"themes/fluid/source/img/favicon.png","hash":"2aa1743dc823866820bdcd1bfca35efa235dd6ad","modified":1654585701731},{"_id":"public/local-search.xml","hash":"a1849500c9f5aa2e88ebfb72e5c39dd9c3c7dc02","modified":1654588096653},{"_id":"public/2022/06/07/redis/redis数据结构/index.html","hash":"b4a51b01dbc6b1448cab6098f3931a718ab5a812","modified":1654588096653},{"_id":"public/archives/index.html","hash":"e777374a5ab319b9a14bd13dab27507df8c123b1","modified":1654588096653},{"_id":"public/archives/2022/index.html","hash":"ed06ff180c9bc810cf97bec847a608af8988cd1c","modified":1654588096653},{"_id":"public/archives/2022/03/index.html","hash":"5326a69206cad2154f2e342c46d8a975cccce7e4","modified":1654588096653},{"_id":"public/archives/2022/04/index.html","hash":"8a52499e2c68448703ea6e4c8f1f8de5cfb8390e","modified":1654588096653},{"_id":"public/archives/2022/06/index.html","hash":"4f9db3611a7d9b08ecadd7ff9700f60d78b709b5","modified":1654588096653},{"_id":"public/categories/acwing算法基础/index.html","hash":"76af2c566174a0e62b0e271b040b72354602b428","modified":1654588096653},{"_id":"public/categories/docker/index.html","hash":"9c13d3a435fbddd9ebfe0e13e1df37cde77692a8","modified":1654588096653},{"_id":"public/categories/redis/index.html","hash":"701f839652007500bfa0f9b6fb144299f27ff5cb","modified":1654588096653},{"_id":"public/categories/分布式基础/index.html","hash":"79a0a41f5b949878dc9d31fc09fbc2c34af85c41","modified":1654588096653},{"_id":"public/categories/分布式基础/zookeeper/index.html","hash":"958d382257705e68f74cfab9be642040336b9e9b","modified":1654588096653},{"_id":"public/tags/快速排序/index.html","hash":"be64c5053579fbd277769c94954c4013337d0a5b","modified":1654588096653},{"_id":"public/tags/mysql/index.html","hash":"5a5d5b86c89fcb7405d2dc1586bdb10f3dd80dfe","modified":1654588096653},{"_id":"public/tags/redis/index.html","hash":"4c2cc143b73d4da12b9be52f50b45b8161be424f","modified":1654588096653},{"_id":"public/tags/分布式协议/index.html","hash":"f8d3ae77d0d068c323f26f8240846dd4b1c0043d","modified":1654588096653},{"_id":"public/tags/ACID/index.html","hash":"162ee38a3df41e1e620bc0d907a2d3d2e8c81ffb","modified":1654588096653},{"_id":"public/tags/zookeeper/index.html","hash":"f4e6e8262d7ba5997b9dc5d3d9aafc886aab95d4","modified":1654588096653},{"_id":"public/404.html","hash":"d28395977711eb49a1bbc6cbb1058326ce946839","modified":1654588096653},{"_id":"public/tags/index.html","hash":"51d1043e08ebbf3fe74d9a1537828f65af8cc6fc","modified":1654588096653},{"_id":"public/categories/index.html","hash":"3a03e531e9ccbf952d33712f314523e989377aa1","modified":1654588096653},{"_id":"public/links/index.html","hash":"835f934fec24b8ae8f987e2d16243955a116def2","modified":1654588096653},{"_id":"public/2022/04/14/docker/docker-mysql/index.html","hash":"2f93f34dd68f2264c70832e1598ecda78bfe294f","modified":1654588096653},{"_id":"public/2022/04/02/distributed/concept/2PC协议与3PC协议/index.html","hash":"73b2cc68e0e46e7c596d7d06ca3a3cfbf8cf605c","modified":1654588096653},{"_id":"public/2022/04/02/distributed/concept/ACID/index.html","hash":"cf8a9489d9b924806f00ea19c5f20f3aab7b80ab","modified":1654588096653},{"_id":"public/2022/04/02/distributed/concept/分布式的理解/index.html","hash":"710fe97f9a6d6a807633f366c72303e2b698c492","modified":1654588096653},{"_id":"public/2022/03/25/distributed/zookeeper/zookeeper入门/index.html","hash":"ead333e9b164396d6e47e9c37fedfaae58fcd214","modified":1654588096653},{"_id":"public/2022/03/24/acwing/quicksort/index.html","hash":"b2ca3585958f20ec1e16b05fcf8f4baaada4a42d","modified":1654588096653},{"_id":"public/index.html","hash":"bd68163158623130f81a77b9700b71b9e59f4847","modified":1654588096653},{"_id":"public/CNAME","hash":"340499890fcdfc2fcb03e125ef0962f7462fe87c","modified":1654588096653},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1654588096653},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1654588096653},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1654588096653},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1654588096653},{"_id":"public/img/default.png","hash":"1eec8e152fbfcc661dc7eeb354498e6b2b88f64e","modified":1654588096653},{"_id":"public/img/favicon.png","hash":"2aa1743dc823866820bdcd1bfca35efa235dd6ad","modified":1654588096653},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1654588096653},{"_id":"public/js/color-schema.js","hash":"f1fdd512f3ef92ff5db4a49f5a3143d5ddea9858","modified":1654588096653},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1654588096653},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1654588096653},{"_id":"public/js/events.js","hash":"41632930eca3e763cc1cf2de0b521e602dc72152","modified":1654588096653},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1654588096653},{"_id":"public/js/leancloud.js","hash":"53987b7a668ea0623370eb83ed5311766221b557","modified":1654588096653},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1654588096653},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1654588096653},{"_id":"public/css/main.css","hash":"656671433d5e5a4f87875e32ef644ce7e7b325ee","modified":1654588096653}],"Category":[{"name":"acwing算法基础","_id":"cl43v16ct0002b6jh3q9cf63f"},{"name":"docker","_id":"cl43v16cx0007b6jhc4e6h9i2"},{"name":"redis","_id":"cl43v16d0000cb6jhgmhd1uj0"},{"name":"分布式基础","_id":"cl43v16d1000gb6jh9zgs7khe"},{"name":"zookeeper","parent":"cl43v16d1000gb6jh9zgs7khe","_id":"cl43v16dc000ub6jh5d135rvh"}],"Data":[],"Page":[],"Post":[{"title":"快速排序","date":"2022-03-24T02:58:50.000Z","description":"学习快排思想以及代码实现。","_content":"# 快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)\n快速排序是从冒泡排序演变而来的算法，但是它比冒泡排序要高效得多，所以我们把它叫做快速排序😂\n快速排序之所以快，是因为它用到了一个思想😮 ---------> 分治(不懂的可以百度哟😁)\n\n那么快排是怎么实现的呢?让我们来看一下下面的图文解释:\n#### 1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:\n ![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/1.png)\n#### 2. 然后我们把**小于分界点**的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把**大于分界点**的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在**分界点**左边的元素**小于或等于**分界点, 在**分界点**右边的元素**大于或等于**分界点: \n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/2.png)\n#### 3. 利用**分界点**分好两边的元素后,得到下面的三个部分, 我们分别对**左边的部分**与**右边的部分**分别进行1与2的操作, 最后便可以排好序了(下图演示):\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/3.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/4.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/5.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/6.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/7.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/8.png)\n> 到这里, 这个数组便已经排好序了\n#### 4. 这时候就进入我们紧张刺激的代码环节:\n##### 4.1 Java代码\n```java\n    public void quick_sort(int[] arr, int l, int r){\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(i < x);\n        //3.确定分界点右边的元素\n        do j--; while(j > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        //有代码整洁洁癖的童鞋可以把if里面的代码写成一个方法,然后在进行调用\n        if(i < j) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n\n##### 4.2 C代码\n```c\nvoid quick_sort(int arr[], int l, int r)\n    {\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(arr[i] < x);\n        //3.确定分界点右边的元素\n        do j--; while(arr[j] > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        if(i < j) \n        {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        };\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n\n##### 4.3 C++代码\n```c++\nvoid quick_sort(int arr[], int l, int r)\n    {\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(arr[i] < x);\n        //3.确定分界点右边的元素\n        do j--; while(arr[j] > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        if(i < j) swap(arr[i], arr[j]);\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n##### 4.4 Python代码(语法忘记, 后续更新)\n```python\n    def quick_sort(arr, l, r):\n        i = l - 1, j = r + 1, x = arr[l + r >> 1];\n```\n##### 4.5 Go代码(后续更新)\n```go\n\n```\n","source":"_posts/acwing/quicksort.md","raw":"---\ntitle: 快速排序\ndate: 2022-03-24 10:58:50\ntags: 快速排序\ncategory: acwing算法基础\ndescription: 学习快排思想以及代码实现。\n---\n# 快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)\n快速排序是从冒泡排序演变而来的算法，但是它比冒泡排序要高效得多，所以我们把它叫做快速排序😂\n快速排序之所以快，是因为它用到了一个思想😮 ---------> 分治(不懂的可以百度哟😁)\n\n那么快排是怎么实现的呢?让我们来看一下下面的图文解释:\n#### 1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:\n ![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/1.png)\n#### 2. 然后我们把**小于分界点**的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把**大于分界点**的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在**分界点**左边的元素**小于或等于**分界点, 在**分界点**右边的元素**大于或等于**分界点: \n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/2.png)\n#### 3. 利用**分界点**分好两边的元素后,得到下面的三个部分, 我们分别对**左边的部分**与**右边的部分**分别进行1与2的操作, 最后便可以排好序了(下图演示):\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/3.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/4.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/5.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/6.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/7.png)\n![](https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/8.png)\n> 到这里, 这个数组便已经排好序了\n#### 4. 这时候就进入我们紧张刺激的代码环节:\n##### 4.1 Java代码\n```java\n    public void quick_sort(int[] arr, int l, int r){\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(i < x);\n        //3.确定分界点右边的元素\n        do j--; while(j > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        //有代码整洁洁癖的童鞋可以把if里面的代码写成一个方法,然后在进行调用\n        if(i < j) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n\n##### 4.2 C代码\n```c\nvoid quick_sort(int arr[], int l, int r)\n    {\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(arr[i] < x);\n        //3.确定分界点右边的元素\n        do j--; while(arr[j] > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        if(i < j) \n        {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        };\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n\n##### 4.3 C++代码\n```c++\nvoid quick_sort(int arr[], int l, int r)\n    {\n        if(l >= r) return;\n        //1.确定分界点\n        int i = l - 1, j = r + 1, x = arr[l + r >> 1];\n        //2.确定分界点左边的元素\n        do i++; while(arr[i] < x);\n        //3.确定分界点右边的元素\n        do j--; while(arr[j] > x);\n        //4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边\n        if(i < j) swap(arr[i], arr[j]);\n        //5.递归处理分界点左边的元素\n        quick_sort(arr, l, j);\n        //6.递归处理分界点右边的元素\n        quick_sort(arr, j + 1, r);\n    }\n```\n##### 4.4 Python代码(语法忘记, 后续更新)\n```python\n    def quick_sort(arr, l, r):\n        i = l - 1, j = r + 1, x = arr[l + r >> 1];\n```\n##### 4.5 Go代码(后续更新)\n```go\n\n```\n","slug":"acwing/quicksort","published":1,"updated":"2022-06-07T07:08:21.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl43v16cn0000b6jhampnh49j","content":"<h1 id=\"快速排序-如有不足之处-请各方大佬在底下批评指正\"><a href=\"#快速排序-如有不足之处-请各方大佬在底下批评指正\" class=\"headerlink\" title=\"快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)\"></a>快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)</h1><p>快速排序是从冒泡排序演变而来的算法，但是它比冒泡排序要高效得多，所以我们把它叫做快速排序😂<br>快速排序之所以快，是因为它用到了一个思想😮 ———&gt; 分治(不懂的可以百度哟😁)</p>\n<p>那么快排是怎么实现的呢?让我们来看一下下面的图文解释:</p>\n<h4 id=\"1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7\"><a href=\"#1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7\" class=\"headerlink\" title=\"1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:\"></a>1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:</h4><p> <img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/1.png\"></p>\n<h4 id=\"2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点\"><a href=\"#2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点\" class=\"headerlink\" title=\"2. 然后我们把小于分界点的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把大于分界点的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在分界点左边的元素小于或等于分界点, 在分界点右边的元素大于或等于分界点:\"></a>2. 然后我们把<strong>小于分界点</strong>的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把<strong>大于分界点</strong>的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在<strong>分界点</strong>左边的元素<strong>小于或等于</strong>分界点, 在<strong>分界点</strong>右边的元素<strong>大于或等于</strong>分界点:</h4><p><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/2.png\"></p>\n<h4 id=\"3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示\"><a href=\"#3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示\" class=\"headerlink\" title=\"3. 利用分界点分好两边的元素后,得到下面的三个部分, 我们分别对左边的部分与右边的部分分别进行1与2的操作, 最后便可以排好序了(下图演示):\"></a>3. 利用<strong>分界点</strong>分好两边的元素后,得到下面的三个部分, 我们分别对<strong>左边的部分</strong>与<strong>右边的部分</strong>分别进行1与2的操作, 最后便可以排好序了(下图演示):</h4><p><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/3.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/4.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/5.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/6.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/7.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/8.png\"></p>\n<blockquote>\n<p>到这里, 这个数组便已经排好序了</p>\n</blockquote>\n<h4 id=\"4-这时候就进入我们紧张刺激的代码环节\"><a href=\"#4-这时候就进入我们紧张刺激的代码环节\" class=\"headerlink\" title=\"4. 这时候就进入我们紧张刺激的代码环节:\"></a>4. 这时候就进入我们紧张刺激的代码环节:</h4><h5 id=\"4-1-Java代码\"><a href=\"#4-1-Java代码\" class=\"headerlink\" title=\"4.1 Java代码\"></a>4.1 Java代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-comment\">//1.确定分界点</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>    <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(i &lt; x);<br>    <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>    <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(j &gt; x);<br>    <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>    <span class=\"hljs-comment\">//有代码整洁洁癖的童鞋可以把if里面的代码写成一个方法,然后在进行调用</span><br>    <span class=\"hljs-keyword\">if</span>(i &lt; j) &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = temp;<br>    &#125;<br>    <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>    quick_sort(arr, l, j);<br>    <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>    quick_sort(arr, j + <span class=\"hljs-number\">1</span>, r);<br>&#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"4-2-C代码\"><a href=\"#4-2-C代码\" class=\"headerlink\" title=\"4.2 C代码\"></a>4.2 C代码</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-comment\">//1.确定分界点</span><br>        <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class=\"hljs-keyword\">if</span>(i &lt; j) <br>        &#123;<br>            <span class=\"hljs-type\">int</span> temp = arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;;<br>        <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>        quick_sort(arr, l, j);<br>        <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>        quick_sort(arr, j + <span class=\"hljs-number\">1</span>, r);<br>    &#125;<br></code></pre></div></td></tr></table></figure>\n\n<h5 id=\"4-3-C-代码\"><a href=\"#4-3-C-代码\" class=\"headerlink\" title=\"4.3 C++代码\"></a>4.3 C++代码</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\">    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-comment\">//1.确定分界点</span><br>        <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class=\"hljs-keyword\">if</span>(i &lt; j) <span class=\"hljs-built_in\">swap</span>(arr[i], arr[j]);<br>        <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>        <span class=\"hljs-built_in\">quick_sort</span>(arr, l, j);<br>        <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>        <span class=\"hljs-built_in\">quick_sort</span>(arr, j + <span class=\"hljs-number\">1</span>, r);<br>    &#125;<br></code></pre></div></td></tr></table></figure>\n<h5 id=\"4-4-Python代码-语法忘记-后续更新\"><a href=\"#4-4-Python代码-语法忘记-后续更新\" class=\"headerlink\" title=\"4.4 Python代码(语法忘记, 后续更新)\"></a>4.4 Python代码(语法忘记, 后续更新)</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">quick_sort</span>(<span class=\"hljs-params\">arr, l, r</span>):<br>    i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br></code></pre></div></td></tr></table></figure>\n<h5 id=\"4-5-Go代码-后续更新\"><a href=\"#4-5-Go代码-后续更新\" class=\"headerlink\" title=\"4.5 Go代码(后续更新)\"></a>4.5 Go代码(后续更新)</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs go\"><br></code></pre></div></td></tr></table></figure>\n","site":{"data":{}},"wordcount":1701,"excerpt":"","more":"<h1 id=\"快速排序-如有不足之处-请各方大佬在底下批评指正\"><a href=\"#快速排序-如有不足之处-请各方大佬在底下批评指正\" class=\"headerlink\" title=\"快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)\"></a>快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)</h1><p>快速排序是从冒泡排序演变而来的算法，但是它比冒泡排序要高效得多，所以我们把它叫做快速排序😂<br>快速排序之所以快，是因为它用到了一个思想😮 ———&gt; 分治(不懂的可以百度哟😁)</p>\n<p>那么快排是怎么实现的呢?让我们来看一下下面的图文解释:</p>\n<h4 id=\"1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7\"><a href=\"#1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7\" class=\"headerlink\" title=\"1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:\"></a>1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:</h4><p> <img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/1.png\"></p>\n<h4 id=\"2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点\"><a href=\"#2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点\" class=\"headerlink\" title=\"2. 然后我们把小于分界点的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把大于分界点的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在分界点左边的元素小于或等于分界点, 在分界点右边的元素大于或等于分界点:\"></a>2. 然后我们把<strong>小于分界点</strong>的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把<strong>大于分界点</strong>的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在<strong>分界点</strong>左边的元素<strong>小于或等于</strong>分界点, 在<strong>分界点</strong>右边的元素<strong>大于或等于</strong>分界点:</h4><p><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/2.png\"></p>\n<h4 id=\"3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示\"><a href=\"#3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示\" class=\"headerlink\" title=\"3. 利用分界点分好两边的元素后,得到下面的三个部分, 我们分别对左边的部分与右边的部分分别进行1与2的操作, 最后便可以排好序了(下图演示):\"></a>3. 利用<strong>分界点</strong>分好两边的元素后,得到下面的三个部分, 我们分别对<strong>左边的部分</strong>与<strong>右边的部分</strong>分别进行1与2的操作, 最后便可以排好序了(下图演示):</h4><p><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/3.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/4.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/5.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/6.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/7.png\"><br><img src=\"https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/8.png\"></p>\n<blockquote>\n<p>到这里, 这个数组便已经排好序了</p>\n</blockquote>\n<h4 id=\"4-这时候就进入我们紧张刺激的代码环节\"><a href=\"#4-这时候就进入我们紧张刺激的代码环节\" class=\"headerlink\" title=\"4. 这时候就进入我们紧张刺激的代码环节:\"></a>4. 这时候就进入我们紧张刺激的代码环节:</h4><h5 id=\"4-1-Java代码\"><a href=\"#4-1-Java代码\" class=\"headerlink\" title=\"4.1 Java代码\"></a>4.1 Java代码</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span>[] arr, <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span>&#123;<br>    <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>    <span class=\"hljs-comment\">//1.确定分界点</span><br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>    <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>    <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(i &lt; x);<br>    <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>    <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(j &gt; x);<br>    <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>    <span class=\"hljs-comment\">//有代码整洁洁癖的童鞋可以把if里面的代码写成一个方法,然后在进行调用</span><br>    <span class=\"hljs-keyword\">if</span>(i &lt; j) &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">temp</span> <span class=\"hljs-operator\">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = temp;<br>    &#125;<br>    <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>    quick_sort(arr, l, j);<br>    <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>    quick_sort(arr, j + <span class=\"hljs-number\">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-2-C代码\"><a href=\"#4-2-C代码\" class=\"headerlink\" title=\"4.2 C代码\"></a>4.2 C代码</h5><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span><br>    &#123;<br>        <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-comment\">//1.确定分界点</span><br>        <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class=\"hljs-keyword\">if</span>(i &lt; j) <br>        &#123;<br>            <span class=\"hljs-type\">int</span> temp = arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;;<br>        <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>        quick_sort(arr, l, j);<br>        <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>        quick_sort(arr, j + <span class=\"hljs-number\">1</span>, r);<br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"4-3-C-代码\"><a href=\"#4-3-C-代码\" class=\"headerlink\" title=\"4.3 C++代码\"></a>4.3 C++代码</h5><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c++\"><span class=\"hljs-function\"><span class=\"hljs-type\">void</span> <span class=\"hljs-title\">quick_sort</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> arr[], <span class=\"hljs-type\">int</span> l, <span class=\"hljs-type\">int</span> r)</span></span><br><span class=\"hljs-function\">    </span>&#123;<br>        <span class=\"hljs-keyword\">if</span>(l &gt;= r) <span class=\"hljs-keyword\">return</span>;<br>        <span class=\"hljs-comment\">//1.确定分界点</span><br>        <span class=\"hljs-type\">int</span> i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br>        <span class=\"hljs-comment\">//2.确定分界点左边的元素</span><br>        <span class=\"hljs-keyword\">do</span> i++; <span class=\"hljs-keyword\">while</span>(arr[i] &lt; x);<br>        <span class=\"hljs-comment\">//3.确定分界点右边的元素</span><br>        <span class=\"hljs-keyword\">do</span> j--; <span class=\"hljs-keyword\">while</span>(arr[j] &gt; x);<br>        <span class=\"hljs-comment\">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class=\"hljs-keyword\">if</span>(i &lt; j) <span class=\"hljs-built_in\">swap</span>(arr[i], arr[j]);<br>        <span class=\"hljs-comment\">//5.递归处理分界点左边的元素</span><br>        <span class=\"hljs-built_in\">quick_sort</span>(arr, l, j);<br>        <span class=\"hljs-comment\">//6.递归处理分界点右边的元素</span><br>        <span class=\"hljs-built_in\">quick_sort</span>(arr, j + <span class=\"hljs-number\">1</span>, r);<br>    &#125;<br></code></pre></td></tr></table></figure>\n<h5 id=\"4-4-Python代码-语法忘记-后续更新\"><a href=\"#4-4-Python代码-语法忘记-后续更新\" class=\"headerlink\" title=\"4.4 Python代码(语法忘记, 后续更新)\"></a>4.4 Python代码(语法忘记, 后续更新)</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">quick_sort</span>(<span class=\"hljs-params\">arr, l, r</span>):<br>    i = l - <span class=\"hljs-number\">1</span>, j = r + <span class=\"hljs-number\">1</span>, x = arr[l + r &gt;&gt; <span class=\"hljs-number\">1</span>];<br></code></pre></td></tr></table></figure>\n<h5 id=\"4-5-Go代码-后续更新\"><a href=\"#4-5-Go代码-后续更新\" class=\"headerlink\" title=\"4.5 Go代码(后续更新)\"></a>4.5 Go代码(后续更新)</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><br></code></pre></td></tr></table></figure>\n"},{"title":"docker配置mysql(挂载配置文件)","date":"2022-04-14T02:44:07.000Z","description":"使用docker配置mysql。","_content":"# 1. 安装docker\n[安装docker](https://www.runoob.com/docker/centos-docker-install.html)\n# 2. Docker配置Mysql\n## 2.1 拉取镜像\n```\ndocker pull [mysql镜像名称]\n即：docker pull mysql\n```\n> 如果不带版本号则默认获取最新的版本latest\n\n## 2.2 挂载数据卷以及配置文件\n\n\n### 2.2.1 先创建一个mysql容器\n运行mysql命名容器名称为mysql-service并且设置root账号初始密码为root\n```\ndocker run -d -p 3306:3306 --name mysql-service -e MYSQL_ROOT_PASSWORD=root  mysql\n```\n\n### 2.2.2 进入Docker容器内并查看配置文件地址\n```\n[root@violet ~]# docker exec -it mysql-service bash \n\n[root@violet ~]# mysql --help | grep my.cnf\n\nroot@27b63c80ecfa:/# mysql --help | grep my.cnf\n                      order of preference, my.cnf, $MYSQL_TCP_PORT,\n/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf  #配置文件地址\n```\n\n### 2.2.3 创建本地路径并挂载Docker内数据\n```\nmkdir -p /rundev/mysql/conf && mkdir -p /rundev/mysql/data\n```\n>将测试容器里 MySQL 的配置文件复制到该路径。日后需改配置，直接在挂载路径的配置文件上修改即可\n```\ndocker cp mysql-service:/etc/mysql/my.cnf /rundev/mysql/conf\n```\n\n拷贝完配置文件后，停掉容器并删除，重新创建带配置文件挂载的服务\n\n## 3. 创建 MySQL 容器并启动\n```\ndocker run --name mysql-server \\\n-p 3306:3306 -e MYSQL_ROOT_PASSWORD=root \\\n--mount type=bind,src=/rundev/mysql/conf/my.cnf,dst=/etc/mysql/my.cnf \\\n--mount type=bind,src=/rundev/mysql/data,dst=/var/lib/mysql \\\n--restart=always \\\n-d mysql\n```\n>--name：为容器指定一个名字\n-p：指定端口映射，格式为：主机(宿主)端口:容器端口\n-e：MYSQL_ROOT_PASSWORD=\"xxx\"，设置环境变量，密码\n--restart=on-failure:3：是指容器在未来出现异常退出（退出码非0）的情况下循环重启3次\n-mount：绑定挂载\n-d：后台运行容器，并返回容器 id\n\n\n## 4. 更改字符集\n如果想Mysql在后续的操作中中文不出现乱码,则需要修改配置文件内容\n\n### 4.1 添加以下内容到my.cnf\n```\n[mysqld]\ncharacter-set-server=utf8\n[client]\ndefault-character-set=utf8\n[mysql]\ndefault-character-set=utf8\n```\n\n### 4.2 重启docker mysql-server容器\ndocker restart mysql-server\n\n## 5. 其它方式\n```\ndocker run --name mysql01 -p 3306:3306  \\\n-v /rundev/mysql/data:/var/lib/mysql \\\n-v /rundev/mysql/conf:/etc/mysql/ \\\n-e MYSQL_ROOT_PASSWORD=root -d mysql:version\n```","source":"_posts/docker/docker-mysql.md","raw":"---\ntitle: docker配置mysql(挂载配置文件)\ncategories: [\"docker\"   ]\ndate: 2022-04-14 10:44:07\ntags: mysql\ndescription: 使用docker配置mysql。\n---\n# 1. 安装docker\n[安装docker](https://www.runoob.com/docker/centos-docker-install.html)\n# 2. Docker配置Mysql\n## 2.1 拉取镜像\n```\ndocker pull [mysql镜像名称]\n即：docker pull mysql\n```\n> 如果不带版本号则默认获取最新的版本latest\n\n## 2.2 挂载数据卷以及配置文件\n\n\n### 2.2.1 先创建一个mysql容器\n运行mysql命名容器名称为mysql-service并且设置root账号初始密码为root\n```\ndocker run -d -p 3306:3306 --name mysql-service -e MYSQL_ROOT_PASSWORD=root  mysql\n```\n\n### 2.2.2 进入Docker容器内并查看配置文件地址\n```\n[root@violet ~]# docker exec -it mysql-service bash \n\n[root@violet ~]# mysql --help | grep my.cnf\n\nroot@27b63c80ecfa:/# mysql --help | grep my.cnf\n                      order of preference, my.cnf, $MYSQL_TCP_PORT,\n/etc/my.cnf /etc/mysql/my.cnf ~/.my.cnf  #配置文件地址\n```\n\n### 2.2.3 创建本地路径并挂载Docker内数据\n```\nmkdir -p /rundev/mysql/conf && mkdir -p /rundev/mysql/data\n```\n>将测试容器里 MySQL 的配置文件复制到该路径。日后需改配置，直接在挂载路径的配置文件上修改即可\n```\ndocker cp mysql-service:/etc/mysql/my.cnf /rundev/mysql/conf\n```\n\n拷贝完配置文件后，停掉容器并删除，重新创建带配置文件挂载的服务\n\n## 3. 创建 MySQL 容器并启动\n```\ndocker run --name mysql-server \\\n-p 3306:3306 -e MYSQL_ROOT_PASSWORD=root \\\n--mount type=bind,src=/rundev/mysql/conf/my.cnf,dst=/etc/mysql/my.cnf \\\n--mount type=bind,src=/rundev/mysql/data,dst=/var/lib/mysql \\\n--restart=always \\\n-d mysql\n```\n>--name：为容器指定一个名字\n-p：指定端口映射，格式为：主机(宿主)端口:容器端口\n-e：MYSQL_ROOT_PASSWORD=\"xxx\"，设置环境变量，密码\n--restart=on-failure:3：是指容器在未来出现异常退出（退出码非0）的情况下循环重启3次\n-mount：绑定挂载\n-d：后台运行容器，并返回容器 id\n\n\n## 4. 更改字符集\n如果想Mysql在后续的操作中中文不出现乱码,则需要修改配置文件内容\n\n### 4.1 添加以下内容到my.cnf\n```\n[mysqld]\ncharacter-set-server=utf8\n[client]\ndefault-character-set=utf8\n[mysql]\ndefault-character-set=utf8\n```\n\n### 4.2 重启docker mysql-server容器\ndocker restart mysql-server\n\n## 5. 其它方式\n```\ndocker run --name mysql01 -p 3306:3306  \\\n-v /rundev/mysql/data:/var/lib/mysql \\\n-v /rundev/mysql/conf:/etc/mysql/ \\\n-e MYSQL_ROOT_PASSWORD=root -d mysql:version\n```","slug":"docker/docker-mysql","published":1,"updated":"2022-06-07T07:08:21.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl43v16cs0001b6jhhe2t7dvi","content":"<h1 id=\"1-安装docker\"><a href=\"#1-安装docker\" class=\"headerlink\" title=\"1. 安装docker\"></a>1. 安装docker</h1><p><a href=\"https://www.runoob.com/docker/centos-docker-install.html\">安装docker</a></p>\n<h1 id=\"2-Docker配置Mysql\"><a href=\"#2-Docker配置Mysql\" class=\"headerlink\" title=\"2. Docker配置Mysql\"></a>2. Docker配置Mysql</h1><h2 id=\"2-1-拉取镜像\"><a href=\"#2-1-拉取镜像\" class=\"headerlink\" title=\"2.1 拉取镜像\"></a>2.1 拉取镜像</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs css\">docker pull <span class=\"hljs-selector-attr\">[mysql镜像名称]</span><br>即：docker pull mysql<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>如果不带版本号则默认获取最新的版本latest</p>\n</blockquote>\n<h2 id=\"2-2-挂载数据卷以及配置文件\"><a href=\"#2-2-挂载数据卷以及配置文件\" class=\"headerlink\" title=\"2.2 挂载数据卷以及配置文件\"></a>2.2 挂载数据卷以及配置文件</h2><h3 id=\"2-2-1-先创建一个mysql容器\"><a href=\"#2-2-1-先创建一个mysql容器\" class=\"headerlink\" title=\"2.2.1 先创建一个mysql容器\"></a>2.2.1 先创建一个mysql容器</h3><p>运行mysql命名容器名称为mysql-service并且设置root账号初始密码为root</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs routeros\">docker <span class=\"hljs-built_in\">run</span> -d -p 3306:3306 --name mysql-service -e <span class=\"hljs-attribute\">MYSQL_ROOT_PASSWORD</span>=root  mysql<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2-2-2-进入Docker容器内并查看配置文件地址\"><a href=\"#2-2-2-进入Docker容器内并查看配置文件地址\" class=\"headerlink\" title=\"2.2.2 进入Docker容器内并查看配置文件地址\"></a>2.2.2 进入Docker容器内并查看配置文件地址</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs awk\">[root@violet ~]<span class=\"hljs-comment\"># docker exec -it mysql-service bash </span><br><br>[root@violet ~]<span class=\"hljs-comment\"># mysql --help | grep my.cnf</span><br><br>root@<span class=\"hljs-number\">27</span>b63c80ecfa:/<span class=\"hljs-comment\"># mysql --help | grep my.cnf</span><br>                      order of preference, my.cnf, <span class=\"hljs-variable\">$MYSQL_TCP_PORT</span>,<br><span class=\"hljs-regexp\">/etc/my</span>.cnf <span class=\"hljs-regexp\">/etc/my</span>sql<span class=\"hljs-regexp\">/my.cnf ~/</span>.my.cnf  <span class=\"hljs-comment\">#配置文件地址</span><br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"2-2-3-创建本地路径并挂载Docker内数据\"><a href=\"#2-2-3-创建本地路径并挂载Docker内数据\" class=\"headerlink\" title=\"2.2.3 创建本地路径并挂载Docker内数据\"></a>2.2.3 创建本地路径并挂载Docker内数据</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs awk\">mkdir -p <span class=\"hljs-regexp\">/rundev/my</span>sql<span class=\"hljs-regexp\">/conf &amp;&amp; mkdir -p /</span>rundev<span class=\"hljs-regexp\">/mysql/</span>data<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>将测试容器里 MySQL 的配置文件复制到该路径。日后需改配置，直接在挂载路径的配置文件上修改即可</p>\n</blockquote>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs awk\">docker cp mysql-service:<span class=\"hljs-regexp\">/etc/my</span>sql<span class=\"hljs-regexp\">/my.cnf /</span>rundev<span class=\"hljs-regexp\">/mysql/</span>conf<br></code></pre></div></td></tr></table></figure>\n\n<p>拷贝完配置文件后，停掉容器并删除，重新创建带配置文件挂载的服务</p>\n<h2 id=\"3-创建-MySQL-容器并启动\"><a href=\"#3-创建-MySQL-容器并启动\" class=\"headerlink\" title=\"3. 创建 MySQL 容器并启动\"></a>3. 创建 MySQL 容器并启动</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs awk\">docker run --name mysql-server \\<br>-p <span class=\"hljs-number\">3306</span>:<span class=\"hljs-number\">3306</span> -e MYSQL_ROOT_PASSWORD=root \\<br>--mount type=bind,src=<span class=\"hljs-regexp\">/rundev/my</span>sql<span class=\"hljs-regexp\">/conf/my</span>.cnf,dst=<span class=\"hljs-regexp\">/etc/my</span>sql/my.cnf \\<br>--mount type=bind,src=<span class=\"hljs-regexp\">/rundev/my</span>sql<span class=\"hljs-regexp\">/data,dst=/</span>var<span class=\"hljs-regexp\">/lib/my</span>sql \\<br>--restart=always \\<br>-d mysql<br></code></pre></div></td></tr></table></figure>\n<blockquote>\n<p>–name：为容器指定一个名字<br>-p：指定端口映射，格式为：主机(宿主)端口:容器端口<br>-e：MYSQL_ROOT_PASSWORD=”xxx”，设置环境变量，密码<br>–restart=on-failure:3：是指容器在未来出现异常退出（退出码非0）的情况下循环重启3次<br>-mount：绑定挂载<br>-d：后台运行容器，并返回容器 id</p>\n</blockquote>\n<h2 id=\"4-更改字符集\"><a href=\"#4-更改字符集\" class=\"headerlink\" title=\"4. 更改字符集\"></a>4. 更改字符集</h2><p>如果想Mysql在后续的操作中中文不出现乱码,则需要修改配置文件内容</p>\n<h3 id=\"4-1-添加以下内容到my-cnf\"><a href=\"#4-1-添加以下内容到my-cnf\" class=\"headerlink\" title=\"4.1 添加以下内容到my.cnf\"></a>4.1 添加以下内容到my.cnf</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[mysqld]</span><br><span class=\"hljs-attr\">character-set-server</span>=utf8<br><span class=\"hljs-section\">[client]</span><br><span class=\"hljs-attr\">default-character-set</span>=utf8<br><span class=\"hljs-section\">[mysql]</span><br><span class=\"hljs-attr\">default-character-set</span>=utf8<br></code></pre></div></td></tr></table></figure>\n\n<h3 id=\"4-2-重启docker-mysql-server容器\"><a href=\"#4-2-重启docker-mysql-server容器\" class=\"headerlink\" title=\"4.2 重启docker mysql-server容器\"></a>4.2 重启docker mysql-server容器</h3><p>docker restart mysql-server</p>\n<h2 id=\"5-其它方式\"><a href=\"#5-其它方式\" class=\"headerlink\" title=\"5. 其它方式\"></a>5. 其它方式</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs awk\">docker run --name mysql01 -p <span class=\"hljs-number\">3306</span>:<span class=\"hljs-number\">3306</span>  \\<br>-v <span class=\"hljs-regexp\">/rundev/my</span>sql<span class=\"hljs-regexp\">/data:/</span>var<span class=\"hljs-regexp\">/lib/my</span>sql \\<br>-v <span class=\"hljs-regexp\">/rundev/my</span>sql<span class=\"hljs-regexp\">/conf:/</span>etc<span class=\"hljs-regexp\">/mysql/</span> \\<br>-e MYSQL_ROOT_PASSWORD=root -d mysql:version<br></code></pre></div></td></tr></table></figure>","site":{"data":{}},"wordcount":1479,"excerpt":"","more":"<h1 id=\"1-安装docker\"><a href=\"#1-安装docker\" class=\"headerlink\" title=\"1. 安装docker\"></a>1. 安装docker</h1><p><a href=\"https://www.runoob.com/docker/centos-docker-install.html\">安装docker</a></p>\n<h1 id=\"2-Docker配置Mysql\"><a href=\"#2-Docker配置Mysql\" class=\"headerlink\" title=\"2. Docker配置Mysql\"></a>2. Docker配置Mysql</h1><h2 id=\"2-1-拉取镜像\"><a href=\"#2-1-拉取镜像\" class=\"headerlink\" title=\"2.1 拉取镜像\"></a>2.1 拉取镜像</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">docker pull <span class=\"hljs-selector-attr\">[mysql镜像名称]</span><br>即：docker pull mysql<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>如果不带版本号则默认获取最新的版本latest</p>\n</blockquote>\n<h2 id=\"2-2-挂载数据卷以及配置文件\"><a href=\"#2-2-挂载数据卷以及配置文件\" class=\"headerlink\" title=\"2.2 挂载数据卷以及配置文件\"></a>2.2 挂载数据卷以及配置文件</h2><h3 id=\"2-2-1-先创建一个mysql容器\"><a href=\"#2-2-1-先创建一个mysql容器\" class=\"headerlink\" title=\"2.2.1 先创建一个mysql容器\"></a>2.2.1 先创建一个mysql容器</h3><p>运行mysql命名容器名称为mysql-service并且设置root账号初始密码为root</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">docker <span class=\"hljs-built_in\">run</span> -d -p 3306:3306 --name mysql-service -e <span class=\"hljs-attribute\">MYSQL_ROOT_PASSWORD</span>=root  mysql<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-2-进入Docker容器内并查看配置文件地址\"><a href=\"#2-2-2-进入Docker容器内并查看配置文件地址\" class=\"headerlink\" title=\"2.2.2 进入Docker容器内并查看配置文件地址\"></a>2.2.2 进入Docker容器内并查看配置文件地址</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">[root@violet ~]<span class=\"hljs-comment\"># docker exec -it mysql-service bash </span><br><br>[root@violet ~]<span class=\"hljs-comment\"># mysql --help | grep my.cnf</span><br><br>root@<span class=\"hljs-number\">27</span>b63c80ecfa:/<span class=\"hljs-comment\"># mysql --help | grep my.cnf</span><br>                      order of preference, my.cnf, <span class=\"hljs-variable\">$MYSQL_TCP_PORT</span>,<br><span class=\"hljs-regexp\">/etc/my</span>.cnf <span class=\"hljs-regexp\">/etc/my</span>sql<span class=\"hljs-regexp\">/my.cnf ~/</span>.my.cnf  <span class=\"hljs-comment\">#配置文件地址</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-3-创建本地路径并挂载Docker内数据\"><a href=\"#2-2-3-创建本地路径并挂载Docker内数据\" class=\"headerlink\" title=\"2.2.3 创建本地路径并挂载Docker内数据\"></a>2.2.3 创建本地路径并挂载Docker内数据</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">mkdir -p <span class=\"hljs-regexp\">/rundev/my</span>sql<span class=\"hljs-regexp\">/conf &amp;&amp; mkdir -p /</span>rundev<span class=\"hljs-regexp\">/mysql/</span>data<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>将测试容器里 MySQL 的配置文件复制到该路径。日后需改配置，直接在挂载路径的配置文件上修改即可</p>\n</blockquote>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker cp mysql-service:<span class=\"hljs-regexp\">/etc/my</span>sql<span class=\"hljs-regexp\">/my.cnf /</span>rundev<span class=\"hljs-regexp\">/mysql/</span>conf<br></code></pre></td></tr></table></figure>\n\n<p>拷贝完配置文件后，停掉容器并删除，重新创建带配置文件挂载的服务</p>\n<h2 id=\"3-创建-MySQL-容器并启动\"><a href=\"#3-创建-MySQL-容器并启动\" class=\"headerlink\" title=\"3. 创建 MySQL 容器并启动\"></a>3. 创建 MySQL 容器并启动</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run --name mysql-server \\<br>-p <span class=\"hljs-number\">3306</span>:<span class=\"hljs-number\">3306</span> -e MYSQL_ROOT_PASSWORD=root \\<br>--mount type=bind,src=<span class=\"hljs-regexp\">/rundev/my</span>sql<span class=\"hljs-regexp\">/conf/my</span>.cnf,dst=<span class=\"hljs-regexp\">/etc/my</span>sql/my.cnf \\<br>--mount type=bind,src=<span class=\"hljs-regexp\">/rundev/my</span>sql<span class=\"hljs-regexp\">/data,dst=/</span>var<span class=\"hljs-regexp\">/lib/my</span>sql \\<br>--restart=always \\<br>-d mysql<br></code></pre></td></tr></table></figure>\n<blockquote>\n<p>–name：为容器指定一个名字<br>-p：指定端口映射，格式为：主机(宿主)端口:容器端口<br>-e：MYSQL_ROOT_PASSWORD=”xxx”，设置环境变量，密码<br>–restart=on-failure:3：是指容器在未来出现异常退出（退出码非0）的情况下循环重启3次<br>-mount：绑定挂载<br>-d：后台运行容器，并返回容器 id</p>\n</blockquote>\n<h2 id=\"4-更改字符集\"><a href=\"#4-更改字符集\" class=\"headerlink\" title=\"4. 更改字符集\"></a>4. 更改字符集</h2><p>如果想Mysql在后续的操作中中文不出现乱码,则需要修改配置文件内容</p>\n<h3 id=\"4-1-添加以下内容到my-cnf\"><a href=\"#4-1-添加以下内容到my-cnf\" class=\"headerlink\" title=\"4.1 添加以下内容到my.cnf\"></a>4.1 添加以下内容到my.cnf</h3><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[mysqld]</span><br><span class=\"hljs-attr\">character-set-server</span>=utf8<br><span class=\"hljs-section\">[client]</span><br><span class=\"hljs-attr\">default-character-set</span>=utf8<br><span class=\"hljs-section\">[mysql]</span><br><span class=\"hljs-attr\">default-character-set</span>=utf8<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-重启docker-mysql-server容器\"><a href=\"#4-2-重启docker-mysql-server容器\" class=\"headerlink\" title=\"4.2 重启docker mysql-server容器\"></a>4.2 重启docker mysql-server容器</h3><p>docker restart mysql-server</p>\n<h2 id=\"5-其它方式\"><a href=\"#5-其它方式\" class=\"headerlink\" title=\"5. 其它方式\"></a>5. 其它方式</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">docker run --name mysql01 -p <span class=\"hljs-number\">3306</span>:<span class=\"hljs-number\">3306</span>  \\<br>-v <span class=\"hljs-regexp\">/rundev/my</span>sql<span class=\"hljs-regexp\">/data:/</span>var<span class=\"hljs-regexp\">/lib/my</span>sql \\<br>-v <span class=\"hljs-regexp\">/rundev/my</span>sql<span class=\"hljs-regexp\">/conf:/</span>etc<span class=\"hljs-regexp\">/mysql/</span> \\<br>-e MYSQL_ROOT_PASSWORD=root -d mysql:version<br></code></pre></td></tr></table></figure>"},{"title":"redis数据结构","date":"2022-06-07T07:19:51.000Z","description":"简单介绍redis的数据结构","_content":"# 数据结构\n在我使用redis不了解他的底层实现原理，一度的以为它很简单，用着用着感觉感觉不到它的奇妙感，但从我开始注重各技术的底层之后，感觉这世界变得奇妙了起来。\n\n一般redis的数据结构有以下几种：\n1. String：常用的数据类型，底层实现是简单动态字符串。\n2. List：列表，底层分别是双向链表和压缩列表。\n3. Hash：哈希表，底层实现是压缩列表和哈希表。\n4. Set：集合，底层实现是压缩列表和整数数组。\n5. SortedSet：有序集合，底层实现是压缩列表和跳表。\n好了，redis常用的数据结构是这几个，结束了无聊的背题阶段，接下来进入正题。\n\n## 一、String：简单动态字符串(SDS)\n\n\n## 二、List：压缩列表、双向链表\n\n## 三、Hash：哈希表、压缩列表\n\n## 四、Set：压缩列表、整数数组\n\n## 五、SortedSet：压缩列表、跳表\n\n","source":"_posts/redis/redis数据结构.md","raw":"---\ntitle: redis数据结构\ncategories: [\"redis\"]\ndate: 2022-06-07 15:19:51\ntags: redis\ndescription: 简单介绍redis的数据结构\n---\n# 数据结构\n在我使用redis不了解他的底层实现原理，一度的以为它很简单，用着用着感觉感觉不到它的奇妙感，但从我开始注重各技术的底层之后，感觉这世界变得奇妙了起来。\n\n一般redis的数据结构有以下几种：\n1. String：常用的数据类型，底层实现是简单动态字符串。\n2. List：列表，底层分别是双向链表和压缩列表。\n3. Hash：哈希表，底层实现是压缩列表和哈希表。\n4. Set：集合，底层实现是压缩列表和整数数组。\n5. SortedSet：有序集合，底层实现是压缩列表和跳表。\n好了，redis常用的数据结构是这几个，结束了无聊的背题阶段，接下来进入正题。\n\n## 一、String：简单动态字符串(SDS)\n\n\n## 二、List：压缩列表、双向链表\n\n## 三、Hash：哈希表、压缩列表\n\n## 四、Set：压缩列表、整数数组\n\n## 五、SortedSet：压缩列表、跳表\n\n","slug":"redis/redis数据结构","published":1,"updated":"2022-06-07T07:43:22.944Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl43v16cv0004b6jh1yuhdhxd","content":"<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><p>在我使用redis不了解他的底层实现原理，一度的以为它很简单，用着用着感觉感觉不到它的奇妙感，但从我开始注重各技术的底层之后，感觉这世界变得奇妙了起来。</p>\n<p>一般redis的数据结构有以下几种：</p>\n<ol>\n<li>String：常用的数据类型，底层实现是简单动态字符串。</li>\n<li>List：列表，底层分别是双向链表和压缩列表。</li>\n<li>Hash：哈希表，底层实现是压缩列表和哈希表。</li>\n<li>Set：集合，底层实现是压缩列表和整数数组。</li>\n<li>SortedSet：有序集合，底层实现是压缩列表和跳表。<br>好了，redis常用的数据结构是这几个，结束了无聊的背题阶段，接下来进入正题。</li>\n</ol>\n<h2 id=\"一、String：简单动态字符串-SDS\"><a href=\"#一、String：简单动态字符串-SDS\" class=\"headerlink\" title=\"一、String：简单动态字符串(SDS)\"></a>一、String：简单动态字符串(SDS)</h2><h2 id=\"二、List：压缩列表、双向链表\"><a href=\"#二、List：压缩列表、双向链表\" class=\"headerlink\" title=\"二、List：压缩列表、双向链表\"></a>二、List：压缩列表、双向链表</h2><h2 id=\"三、Hash：哈希表、压缩列表\"><a href=\"#三、Hash：哈希表、压缩列表\" class=\"headerlink\" title=\"三、Hash：哈希表、压缩列表\"></a>三、Hash：哈希表、压缩列表</h2><h2 id=\"四、Set：压缩列表、整数数组\"><a href=\"#四、Set：压缩列表、整数数组\" class=\"headerlink\" title=\"四、Set：压缩列表、整数数组\"></a>四、Set：压缩列表、整数数组</h2><h2 id=\"五、SortedSet：压缩列表、跳表\"><a href=\"#五、SortedSet：压缩列表、跳表\" class=\"headerlink\" title=\"五、SortedSet：压缩列表、跳表\"></a>五、SortedSet：压缩列表、跳表</h2>","site":{"data":{}},"wordcount":347,"excerpt":"","more":"<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><p>在我使用redis不了解他的底层实现原理，一度的以为它很简单，用着用着感觉感觉不到它的奇妙感，但从我开始注重各技术的底层之后，感觉这世界变得奇妙了起来。</p>\n<p>一般redis的数据结构有以下几种：</p>\n<ol>\n<li>String：常用的数据类型，底层实现是简单动态字符串。</li>\n<li>List：列表，底层分别是双向链表和压缩列表。</li>\n<li>Hash：哈希表，底层实现是压缩列表和哈希表。</li>\n<li>Set：集合，底层实现是压缩列表和整数数组。</li>\n<li>SortedSet：有序集合，底层实现是压缩列表和跳表。<br>好了，redis常用的数据结构是这几个，结束了无聊的背题阶段，接下来进入正题。</li>\n</ol>\n<h2 id=\"一、String：简单动态字符串-SDS\"><a href=\"#一、String：简单动态字符串-SDS\" class=\"headerlink\" title=\"一、String：简单动态字符串(SDS)\"></a>一、String：简单动态字符串(SDS)</h2><h2 id=\"二、List：压缩列表、双向链表\"><a href=\"#二、List：压缩列表、双向链表\" class=\"headerlink\" title=\"二、List：压缩列表、双向链表\"></a>二、List：压缩列表、双向链表</h2><h2 id=\"三、Hash：哈希表、压缩列表\"><a href=\"#三、Hash：哈希表、压缩列表\" class=\"headerlink\" title=\"三、Hash：哈希表、压缩列表\"></a>三、Hash：哈希表、压缩列表</h2><h2 id=\"四、Set：压缩列表、整数数组\"><a href=\"#四、Set：压缩列表、整数数组\" class=\"headerlink\" title=\"四、Set：压缩列表、整数数组\"></a>四、Set：压缩列表、整数数组</h2><h2 id=\"五、SortedSet：压缩列表、跳表\"><a href=\"#五、SortedSet：压缩列表、跳表\" class=\"headerlink\" title=\"五、SortedSet：压缩列表、跳表\"></a>五、SortedSet：压缩列表、跳表</h2>"},{"title":"2PC协议与3PC协议","date":"2022-04-02T06:26:10.000Z","description":"简单介绍 2PC 与 3PC","_content":"# 1. 2PC 与 3PC 的由来\n在分布式系统中，每一个机器节点虽然都能够明确地知道自己在进行事务操作过程中的结果是成功或失败，但却无法直接获取到其他分布式节点的操作结果。因此，当一个事务操作需要跨越多个分布式节点的时候，为了保持事务处理的 ACID 特性，就需要引入一个称为 \"协调者（Coordinator）\"的组件来统一调度所有分布式节点的执行逻辑，这些被调度的分布式节点则被称为 \"参与者（Participant）\"。协调者负责调度参与者的行为，并最终决定这些参与者是否要把事务真正进行提交。基于这个思想，衍生出了二阶段提交（2PC）和三阶段提交（3PC）两种协议。\n# 2. 2PC\n2PC, 是 Two-Phase Commit 的缩写，即二阶段提交，是计算机网络尤其是在数据库领域一致性二设计的一种算法。通常，二阶段提交协议也被认为是一种一致性协议，用来保证分布式系统的一致性。目前，绝大部分的关系型数据库都是采用二阶段提交协议来完成分布式事务处理的，利用该协议能够非常方便地完成所有分布式事务参与者的协调，统一决定事务的提交或回滚，从而能够有效地保证分布式数据一致性，因此二阶段提交协议被广泛地应用在许多分布式系统中。\n\n## 2.1 2PC协议执行过程\n2PC 提交协议是将事务的提交过程分成了两个阶段来进行处理，其执行流程如下：\n**阶段一：提交事务请求：**\n1. 事务询问。\n协调者向所有参与者发送事务内容，询问是否可以事务提交操作，并开始等待各参与者的响应。\n2. 执行事务。\n各参与者节点执行事务操作，并将 Undo 和 Redo 信息记入事务日志中。\n3. 各参与者向协调者反馈事务询问的响应。\n如果参与者成功地执行了事务操作，那么久反馈给协调者 Yes 响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者 No 响应，表示事务不可以执行。<br/>\n\n> 上面的内容形式上近似是协调者组织各参与者对一次事务操作的投票表态过程，因此二阶段提交协议的阶段一也被称为 \"投票阶段\" ，即各参与者投票表明是否要继续执行接下去的事务提交操作。\n\n**阶段二：执行事务提交**\n在阶段二中，协调者会根据各参与者的反馈情况来决定最终是否可以进行事务提交操作，正常情况下，包含以下两种可能：<br/>\n执行事务提交<br/>\n假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务提交。\n1. 发送提交请求。\n协调者向所有参与者节点发出 Commit 请求。\n2. 事务提交。\n参与者接收到协调者发送的 Commit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。\n3. 反馈事务提交结果。\n参与者在完成事务提交之后，向协调者发送 Ack 消息。\n3. 完成事务。\n协调者接收到所有参与者反馈的 Ack 消息后， 完成事务。<br/>\n\n中断事务<br/>\n假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。\n1. 发送回滚请求。\n协调者向所有参与者节点发送 Rollback 请求。\n2. 事务回滚。\n参与者接收到 Rollback 请求后，会利用其在阶段一中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。\n3. 反馈事务回滚结果。\n参与者在完成事务回滚之后，向协调者发送 Ack 消息。\n4. 中断事务。\n协调者接收到所有参与者反馈的 Ack 消息后，完成事务中断。\n\n## 2.2. 2PC的优缺点\n### 2.2.1 优点\n二阶段提交协议的优点：原理简单，实现方便。\n### 2.2.2 缺点\n二阶段提交协议的缺点：同步阻塞、单点问题、脑裂造成数据不一致、过于保守。<br/>\n同步阻塞<br/>\n二阶段提交协议存在的最明显也是最大的一个问题就是同步阻塞，这会极大地限制分布式系统的性能。在二阶段提交的执行过程中，所有参与该事务操作的逻辑都处于阻塞状态，也就是说，各个参与者在等待其他参与者响应的过程中，将无法进行其它任何操作。<br/>\n单点问题<br/>\n在上面的讲解中，协调者的角色在整个二阶段提交协议中起到了非常重要的作用。一旦协调者出现问题，那么整个二阶段提交流程将无法运转，更为严重的是，如果协调者是在二阶段中出现问题的话，那么其他参与者将会一直处于锁定事务资源的状态中，而无法继续完事务操作。<br/>\n脑裂造成数据不一致<br/>\n在二阶段提交协议的阶段二，即执行事务提交的时候，当协调者向所有的参与者发送 Commit 请求之后，发生了局部网络异常或者是协调者在尚未发送完 Commit 请求之前自身发送了崩溃，导致最终只有部分参与者收到了 Commit 请求。于是，这部分收到了 Commit 请求的参与者就会进行事务的提交，而其他没没有收到 Commit 请求的参与者则无法进行事务提交，于是整个分布式系统便出现了数据不一致的现象。<br/>\n过于保守<br/>\n如果协调者指示参与者进行事务提交询问的过程中，参与者出现故障而导致协调者始终无法获取到所有参与者的响应信息的话，这时协调者只能依靠其自身的超时机制来判断是否需要中断事务，这样的策略显得比较保守。换句话说，二阶段提交协议没有设计较为完善的容错机制，任意一个节点的失败都会导致整个事务的失败。\n\n# 3. 3PC\n上面我们讲解了二阶段提交协议的设计和实现原理，并明确指出了其在实际运行过程中可能存在的诸如同步阻塞、协调者的单点问题、脑裂造成的数据不一致和过于保守的容错机制等缺陷，因此研究者在二阶段提交协议的基础上进行了改进，提出了三阶段提交协议。\n\n## 3.1 协议说明\n3PC，是 Three-Phase Commit 的缩写，即三阶段提交，是 2PC 的改进版本，它将二阶段提交协议的\"提交事务请求\"过程一分为二，新城了由 CanCommit、PreCommit和do Commit三个阶段组成的事务处理协议，下面进行说明：\n\n**阶段一：CanCommit**\n1. 事务询问。\n协调者向所有参与者发送一个包含事务内容的 canCommit 请求，询问是否可以执行事务操作，并开始等待各参与者的响应。\n2. 各参与者向协调者反馈事务询问的响应。\n参与者在接收到来自协调者的 canCommit 请求后，正常情况下，如果其自身认为可以顺利执行事务，那么会反馈 Yes 响应，并进入预备状态，否则反馈 No 响应。\n\n**阶段二：PreCommit**\n在阶段二中，协调者会根据各参与者的反馈情况来决定是否可以进行事务的 PreCommit 操作，正常情况下，包含两种可能。\n\n**执行事务提交**\n假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务预提交。\n\n1. 发送预提交请求。\n协调者向所有参与者阶段发出 preCommit 的请求，并进入 Prepared 阶段。\n2. 事务预提交。\n参与者接收到 PreCommit 请求后，会执行事务操作，并将 Undo 和 Redo 信息记录到事务日志中。\n3. 各参与者向协调者反馈事务执行的响应。\n如果参与者成功执行了事务操作，那么就会反馈给协调者 Ack 响应，同时等待最终的指令：提交（commit）或终止（abort）。\n\n**中断事务**\n假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。\n1. 发送中断请求。\n协调者向所有参与者阶段发愁abort请求。\n2. 中断事务。\n无论是收到来自协调者的 abort 请求，或者是在等待协调者请求过程中超时，参与者都会中断事务。\n\n**阶段三：doCommit**\n该阶段将进行真正的事务提交，会存在以下两种可能的情况。\n\n**执行请求**\n1. 发送提交请求。\n进入这一阶段，假设协调者处于正常工作状态，并且它接收到了来自所有参与者的 Ack 响应，那么它将从 \"预提交\" 状态换到 \"提交\" 状态，并向所有参与者发送 doCommit 请求。\n2. 事务提交。\n参与者接收到 doCommit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。\n3. 反馈事务提交结果。\n参与者在完成事务提交之后，向协调者发送 Ack 消息。\n4. 完成事务。\n协调者接收到所有参与者反馈的 Ack 消息后，完成事务。\n\n**中断事务**\n进入这一阶段，假设协调者处于正常工作状态，并且任意一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。\n1. 发送中断请求。\n协调者向所有的参与者节点发送 abort 请求。\n2. 事务回滚。\n参与者接收到 abort 请求后，会利用其在阶段二中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务期间占用的资源。\n3. 反馈事务回滚结果。\n参与者而在完成事务回滚之后，向协调者发送 Ack 消息。\n4. 中断事务。\n协调者接收到所有参与者反馈的 Ack 消息后，中断事务。\n\n### 3.1.1 可能遇到的问题\n- 协调者出现问题。\n- 协调者和参与者之间的网络出现故障。\n无论出现哪种情况，最终都会导致参与者无法及时接收到来自协调者的 doCommit 或是 abort 请求，针对这样的异常情况，参与者都会在等待超时之后，继续进行事务提交。\n\n### 3.1.2 优缺点\n**优点：**相较于二阶段提交协议，三阶段提交协议最大的优点就是降低了参与者的阻塞范围，并且能够在出现单点故障后继续达成一致。\n\n**缺点：**三阶段提交协议在去除阻塞的同时也引入了新的问题，那就是在参与者接收到 preCommit 消息后，如果网路出现分区，此时协调者所在的节点和参与者无法进行正常的网络通信，在这种情况下，该参与者依然会进行事务的提交，这必然出现数据的不一致。\n\n\n# 4. 参考\n1. 《从Paxos到Zookeeper  分布式一致性原理与实践》","source":"_posts/distributed/concept/2PC协议与3PC协议.md","raw":"---\ntitle: 2PC协议与3PC协议\ncategories: ['分布式基础']\ndate: 2022-04-02 14:26:10\ntags: 分布式协议\ndescription: 简单介绍 2PC 与 3PC \n---\n# 1. 2PC 与 3PC 的由来\n在分布式系统中，每一个机器节点虽然都能够明确地知道自己在进行事务操作过程中的结果是成功或失败，但却无法直接获取到其他分布式节点的操作结果。因此，当一个事务操作需要跨越多个分布式节点的时候，为了保持事务处理的 ACID 特性，就需要引入一个称为 \"协调者（Coordinator）\"的组件来统一调度所有分布式节点的执行逻辑，这些被调度的分布式节点则被称为 \"参与者（Participant）\"。协调者负责调度参与者的行为，并最终决定这些参与者是否要把事务真正进行提交。基于这个思想，衍生出了二阶段提交（2PC）和三阶段提交（3PC）两种协议。\n# 2. 2PC\n2PC, 是 Two-Phase Commit 的缩写，即二阶段提交，是计算机网络尤其是在数据库领域一致性二设计的一种算法。通常，二阶段提交协议也被认为是一种一致性协议，用来保证分布式系统的一致性。目前，绝大部分的关系型数据库都是采用二阶段提交协议来完成分布式事务处理的，利用该协议能够非常方便地完成所有分布式事务参与者的协调，统一决定事务的提交或回滚，从而能够有效地保证分布式数据一致性，因此二阶段提交协议被广泛地应用在许多分布式系统中。\n\n## 2.1 2PC协议执行过程\n2PC 提交协议是将事务的提交过程分成了两个阶段来进行处理，其执行流程如下：\n**阶段一：提交事务请求：**\n1. 事务询问。\n协调者向所有参与者发送事务内容，询问是否可以事务提交操作，并开始等待各参与者的响应。\n2. 执行事务。\n各参与者节点执行事务操作，并将 Undo 和 Redo 信息记入事务日志中。\n3. 各参与者向协调者反馈事务询问的响应。\n如果参与者成功地执行了事务操作，那么久反馈给协调者 Yes 响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者 No 响应，表示事务不可以执行。<br/>\n\n> 上面的内容形式上近似是协调者组织各参与者对一次事务操作的投票表态过程，因此二阶段提交协议的阶段一也被称为 \"投票阶段\" ，即各参与者投票表明是否要继续执行接下去的事务提交操作。\n\n**阶段二：执行事务提交**\n在阶段二中，协调者会根据各参与者的反馈情况来决定最终是否可以进行事务提交操作，正常情况下，包含以下两种可能：<br/>\n执行事务提交<br/>\n假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务提交。\n1. 发送提交请求。\n协调者向所有参与者节点发出 Commit 请求。\n2. 事务提交。\n参与者接收到协调者发送的 Commit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。\n3. 反馈事务提交结果。\n参与者在完成事务提交之后，向协调者发送 Ack 消息。\n3. 完成事务。\n协调者接收到所有参与者反馈的 Ack 消息后， 完成事务。<br/>\n\n中断事务<br/>\n假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。\n1. 发送回滚请求。\n协调者向所有参与者节点发送 Rollback 请求。\n2. 事务回滚。\n参与者接收到 Rollback 请求后，会利用其在阶段一中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。\n3. 反馈事务回滚结果。\n参与者在完成事务回滚之后，向协调者发送 Ack 消息。\n4. 中断事务。\n协调者接收到所有参与者反馈的 Ack 消息后，完成事务中断。\n\n## 2.2. 2PC的优缺点\n### 2.2.1 优点\n二阶段提交协议的优点：原理简单，实现方便。\n### 2.2.2 缺点\n二阶段提交协议的缺点：同步阻塞、单点问题、脑裂造成数据不一致、过于保守。<br/>\n同步阻塞<br/>\n二阶段提交协议存在的最明显也是最大的一个问题就是同步阻塞，这会极大地限制分布式系统的性能。在二阶段提交的执行过程中，所有参与该事务操作的逻辑都处于阻塞状态，也就是说，各个参与者在等待其他参与者响应的过程中，将无法进行其它任何操作。<br/>\n单点问题<br/>\n在上面的讲解中，协调者的角色在整个二阶段提交协议中起到了非常重要的作用。一旦协调者出现问题，那么整个二阶段提交流程将无法运转，更为严重的是，如果协调者是在二阶段中出现问题的话，那么其他参与者将会一直处于锁定事务资源的状态中，而无法继续完事务操作。<br/>\n脑裂造成数据不一致<br/>\n在二阶段提交协议的阶段二，即执行事务提交的时候，当协调者向所有的参与者发送 Commit 请求之后，发生了局部网络异常或者是协调者在尚未发送完 Commit 请求之前自身发送了崩溃，导致最终只有部分参与者收到了 Commit 请求。于是，这部分收到了 Commit 请求的参与者就会进行事务的提交，而其他没没有收到 Commit 请求的参与者则无法进行事务提交，于是整个分布式系统便出现了数据不一致的现象。<br/>\n过于保守<br/>\n如果协调者指示参与者进行事务提交询问的过程中，参与者出现故障而导致协调者始终无法获取到所有参与者的响应信息的话，这时协调者只能依靠其自身的超时机制来判断是否需要中断事务，这样的策略显得比较保守。换句话说，二阶段提交协议没有设计较为完善的容错机制，任意一个节点的失败都会导致整个事务的失败。\n\n# 3. 3PC\n上面我们讲解了二阶段提交协议的设计和实现原理，并明确指出了其在实际运行过程中可能存在的诸如同步阻塞、协调者的单点问题、脑裂造成的数据不一致和过于保守的容错机制等缺陷，因此研究者在二阶段提交协议的基础上进行了改进，提出了三阶段提交协议。\n\n## 3.1 协议说明\n3PC，是 Three-Phase Commit 的缩写，即三阶段提交，是 2PC 的改进版本，它将二阶段提交协议的\"提交事务请求\"过程一分为二，新城了由 CanCommit、PreCommit和do Commit三个阶段组成的事务处理协议，下面进行说明：\n\n**阶段一：CanCommit**\n1. 事务询问。\n协调者向所有参与者发送一个包含事务内容的 canCommit 请求，询问是否可以执行事务操作，并开始等待各参与者的响应。\n2. 各参与者向协调者反馈事务询问的响应。\n参与者在接收到来自协调者的 canCommit 请求后，正常情况下，如果其自身认为可以顺利执行事务，那么会反馈 Yes 响应，并进入预备状态，否则反馈 No 响应。\n\n**阶段二：PreCommit**\n在阶段二中，协调者会根据各参与者的反馈情况来决定是否可以进行事务的 PreCommit 操作，正常情况下，包含两种可能。\n\n**执行事务提交**\n假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务预提交。\n\n1. 发送预提交请求。\n协调者向所有参与者阶段发出 preCommit 的请求，并进入 Prepared 阶段。\n2. 事务预提交。\n参与者接收到 PreCommit 请求后，会执行事务操作，并将 Undo 和 Redo 信息记录到事务日志中。\n3. 各参与者向协调者反馈事务执行的响应。\n如果参与者成功执行了事务操作，那么就会反馈给协调者 Ack 响应，同时等待最终的指令：提交（commit）或终止（abort）。\n\n**中断事务**\n假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。\n1. 发送中断请求。\n协调者向所有参与者阶段发愁abort请求。\n2. 中断事务。\n无论是收到来自协调者的 abort 请求，或者是在等待协调者请求过程中超时，参与者都会中断事务。\n\n**阶段三：doCommit**\n该阶段将进行真正的事务提交，会存在以下两种可能的情况。\n\n**执行请求**\n1. 发送提交请求。\n进入这一阶段，假设协调者处于正常工作状态，并且它接收到了来自所有参与者的 Ack 响应，那么它将从 \"预提交\" 状态换到 \"提交\" 状态，并向所有参与者发送 doCommit 请求。\n2. 事务提交。\n参与者接收到 doCommit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。\n3. 反馈事务提交结果。\n参与者在完成事务提交之后，向协调者发送 Ack 消息。\n4. 完成事务。\n协调者接收到所有参与者反馈的 Ack 消息后，完成事务。\n\n**中断事务**\n进入这一阶段，假设协调者处于正常工作状态，并且任意一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。\n1. 发送中断请求。\n协调者向所有的参与者节点发送 abort 请求。\n2. 事务回滚。\n参与者接收到 abort 请求后，会利用其在阶段二中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务期间占用的资源。\n3. 反馈事务回滚结果。\n参与者而在完成事务回滚之后，向协调者发送 Ack 消息。\n4. 中断事务。\n协调者接收到所有参与者反馈的 Ack 消息后，中断事务。\n\n### 3.1.1 可能遇到的问题\n- 协调者出现问题。\n- 协调者和参与者之间的网络出现故障。\n无论出现哪种情况，最终都会导致参与者无法及时接收到来自协调者的 doCommit 或是 abort 请求，针对这样的异常情况，参与者都会在等待超时之后，继续进行事务提交。\n\n### 3.1.2 优缺点\n**优点：**相较于二阶段提交协议，三阶段提交协议最大的优点就是降低了参与者的阻塞范围，并且能够在出现单点故障后继续达成一致。\n\n**缺点：**三阶段提交协议在去除阻塞的同时也引入了新的问题，那就是在参与者接收到 preCommit 消息后，如果网路出现分区，此时协调者所在的节点和参与者无法进行正常的网络通信，在这种情况下，该参与者依然会进行事务的提交，这必然出现数据的不一致。\n\n\n# 4. 参考\n1. 《从Paxos到Zookeeper  分布式一致性原理与实践》","slug":"distributed/concept/2PC协议与3PC协议","published":1,"updated":"2022-06-07T07:08:21.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl43v16cw0005b6jhfkhy343b","content":"<h1 id=\"1-2PC-与-3PC-的由来\"><a href=\"#1-2PC-与-3PC-的由来\" class=\"headerlink\" title=\"1. 2PC 与 3PC 的由来\"></a>1. 2PC 与 3PC 的由来</h1><p>在分布式系统中，每一个机器节点虽然都能够明确地知道自己在进行事务操作过程中的结果是成功或失败，但却无法直接获取到其他分布式节点的操作结果。因此，当一个事务操作需要跨越多个分布式节点的时候，为了保持事务处理的 ACID 特性，就需要引入一个称为 “协调者（Coordinator）”的组件来统一调度所有分布式节点的执行逻辑，这些被调度的分布式节点则被称为 “参与者（Participant）”。协调者负责调度参与者的行为，并最终决定这些参与者是否要把事务真正进行提交。基于这个思想，衍生出了二阶段提交（2PC）和三阶段提交（3PC）两种协议。</p>\n<h1 id=\"2-2PC\"><a href=\"#2-2PC\" class=\"headerlink\" title=\"2. 2PC\"></a>2. 2PC</h1><p>2PC, 是 Two-Phase Commit 的缩写，即二阶段提交，是计算机网络尤其是在数据库领域一致性二设计的一种算法。通常，二阶段提交协议也被认为是一种一致性协议，用来保证分布式系统的一致性。目前，绝大部分的关系型数据库都是采用二阶段提交协议来完成分布式事务处理的，利用该协议能够非常方便地完成所有分布式事务参与者的协调，统一决定事务的提交或回滚，从而能够有效地保证分布式数据一致性，因此二阶段提交协议被广泛地应用在许多分布式系统中。</p>\n<h2 id=\"2-1-2PC协议执行过程\"><a href=\"#2-1-2PC协议执行过程\" class=\"headerlink\" title=\"2.1 2PC协议执行过程\"></a>2.1 2PC协议执行过程</h2><p>2PC 提交协议是将事务的提交过程分成了两个阶段来进行处理，其执行流程如下：<br><strong>阶段一：提交事务请求：</strong></p>\n<ol>\n<li>事务询问。<br>协调者向所有参与者发送事务内容，询问是否可以事务提交操作，并开始等待各参与者的响应。</li>\n<li>执行事务。<br>各参与者节点执行事务操作，并将 Undo 和 Redo 信息记入事务日志中。</li>\n<li>各参与者向协调者反馈事务询问的响应。<br>如果参与者成功地执行了事务操作，那么久反馈给协调者 Yes 响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者 No 响应，表示事务不可以执行。<br/></li>\n</ol>\n<blockquote>\n<p>上面的内容形式上近似是协调者组织各参与者对一次事务操作的投票表态过程，因此二阶段提交协议的阶段一也被称为 “投票阶段” ，即各参与者投票表明是否要继续执行接下去的事务提交操作。</p>\n</blockquote>\n<p><strong>阶段二：执行事务提交</strong><br>在阶段二中，协调者会根据各参与者的反馈情况来决定最终是否可以进行事务提交操作，正常情况下，包含以下两种可能：<br/><br>执行事务提交<br/><br>假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务提交。</p>\n<ol>\n<li>发送提交请求。<br>协调者向所有参与者节点发出 Commit 请求。</li>\n<li>事务提交。<br>参与者接收到协调者发送的 Commit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。</li>\n<li>反馈事务提交结果。<br>参与者在完成事务提交之后，向协调者发送 Ack 消息。</li>\n<li>完成事务。<br>协调者接收到所有参与者反馈的 Ack 消息后， 完成事务。<br/></li>\n</ol>\n<p>中断事务<br/><br>假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。</p>\n<ol>\n<li>发送回滚请求。<br>协调者向所有参与者节点发送 Rollback 请求。</li>\n<li>事务回滚。<br>参与者接收到 Rollback 请求后，会利用其在阶段一中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。</li>\n<li>反馈事务回滚结果。<br>参与者在完成事务回滚之后，向协调者发送 Ack 消息。</li>\n<li>中断事务。<br>协调者接收到所有参与者反馈的 Ack 消息后，完成事务中断。</li>\n</ol>\n<h2 id=\"2-2-2PC的优缺点\"><a href=\"#2-2-2PC的优缺点\" class=\"headerlink\" title=\"2.2. 2PC的优缺点\"></a>2.2. 2PC的优缺点</h2><h3 id=\"2-2-1-优点\"><a href=\"#2-2-1-优点\" class=\"headerlink\" title=\"2.2.1 优点\"></a>2.2.1 优点</h3><p>二阶段提交协议的优点：原理简单，实现方便。</p>\n<h3 id=\"2-2-2-缺点\"><a href=\"#2-2-2-缺点\" class=\"headerlink\" title=\"2.2.2 缺点\"></a>2.2.2 缺点</h3><p>二阶段提交协议的缺点：同步阻塞、单点问题、脑裂造成数据不一致、过于保守。<br/><br>同步阻塞<br/><br>二阶段提交协议存在的最明显也是最大的一个问题就是同步阻塞，这会极大地限制分布式系统的性能。在二阶段提交的执行过程中，所有参与该事务操作的逻辑都处于阻塞状态，也就是说，各个参与者在等待其他参与者响应的过程中，将无法进行其它任何操作。<br/><br>单点问题<br/><br>在上面的讲解中，协调者的角色在整个二阶段提交协议中起到了非常重要的作用。一旦协调者出现问题，那么整个二阶段提交流程将无法运转，更为严重的是，如果协调者是在二阶段中出现问题的话，那么其他参与者将会一直处于锁定事务资源的状态中，而无法继续完事务操作。<br/><br>脑裂造成数据不一致<br/><br>在二阶段提交协议的阶段二，即执行事务提交的时候，当协调者向所有的参与者发送 Commit 请求之后，发生了局部网络异常或者是协调者在尚未发送完 Commit 请求之前自身发送了崩溃，导致最终只有部分参与者收到了 Commit 请求。于是，这部分收到了 Commit 请求的参与者就会进行事务的提交，而其他没没有收到 Commit 请求的参与者则无法进行事务提交，于是整个分布式系统便出现了数据不一致的现象。<br/><br>过于保守<br/><br>如果协调者指示参与者进行事务提交询问的过程中，参与者出现故障而导致协调者始终无法获取到所有参与者的响应信息的话，这时协调者只能依靠其自身的超时机制来判断是否需要中断事务，这样的策略显得比较保守。换句话说，二阶段提交协议没有设计较为完善的容错机制，任意一个节点的失败都会导致整个事务的失败。</p>\n<h1 id=\"3-3PC\"><a href=\"#3-3PC\" class=\"headerlink\" title=\"3. 3PC\"></a>3. 3PC</h1><p>上面我们讲解了二阶段提交协议的设计和实现原理，并明确指出了其在实际运行过程中可能存在的诸如同步阻塞、协调者的单点问题、脑裂造成的数据不一致和过于保守的容错机制等缺陷，因此研究者在二阶段提交协议的基础上进行了改进，提出了三阶段提交协议。</p>\n<h2 id=\"3-1-协议说明\"><a href=\"#3-1-协议说明\" class=\"headerlink\" title=\"3.1 协议说明\"></a>3.1 协议说明</h2><p>3PC，是 Three-Phase Commit 的缩写，即三阶段提交，是 2PC 的改进版本，它将二阶段提交协议的”提交事务请求”过程一分为二，新城了由 CanCommit、PreCommit和do Commit三个阶段组成的事务处理协议，下面进行说明：</p>\n<p><strong>阶段一：CanCommit</strong></p>\n<ol>\n<li>事务询问。<br>协调者向所有参与者发送一个包含事务内容的 canCommit 请求，询问是否可以执行事务操作，并开始等待各参与者的响应。</li>\n<li>各参与者向协调者反馈事务询问的响应。<br>参与者在接收到来自协调者的 canCommit 请求后，正常情况下，如果其自身认为可以顺利执行事务，那么会反馈 Yes 响应，并进入预备状态，否则反馈 No 响应。</li>\n</ol>\n<p><strong>阶段二：PreCommit</strong><br>在阶段二中，协调者会根据各参与者的反馈情况来决定是否可以进行事务的 PreCommit 操作，正常情况下，包含两种可能。</p>\n<p><strong>执行事务提交</strong><br>假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务预提交。</p>\n<ol>\n<li>发送预提交请求。<br>协调者向所有参与者阶段发出 preCommit 的请求，并进入 Prepared 阶段。</li>\n<li>事务预提交。<br>参与者接收到 PreCommit 请求后，会执行事务操作，并将 Undo 和 Redo 信息记录到事务日志中。</li>\n<li>各参与者向协调者反馈事务执行的响应。<br>如果参与者成功执行了事务操作，那么就会反馈给协调者 Ack 响应，同时等待最终的指令：提交（commit）或终止（abort）。</li>\n</ol>\n<p><strong>中断事务</strong><br>假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。</p>\n<ol>\n<li>发送中断请求。<br>协调者向所有参与者阶段发愁abort请求。</li>\n<li>中断事务。<br>无论是收到来自协调者的 abort 请求，或者是在等待协调者请求过程中超时，参与者都会中断事务。</li>\n</ol>\n<p><strong>阶段三：doCommit</strong><br>该阶段将进行真正的事务提交，会存在以下两种可能的情况。</p>\n<p><strong>执行请求</strong></p>\n<ol>\n<li>发送提交请求。<br>进入这一阶段，假设协调者处于正常工作状态，并且它接收到了来自所有参与者的 Ack 响应，那么它将从 “预提交” 状态换到 “提交” 状态，并向所有参与者发送 doCommit 请求。</li>\n<li>事务提交。<br>参与者接收到 doCommit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。</li>\n<li>反馈事务提交结果。<br>参与者在完成事务提交之后，向协调者发送 Ack 消息。</li>\n<li>完成事务。<br>协调者接收到所有参与者反馈的 Ack 消息后，完成事务。</li>\n</ol>\n<p><strong>中断事务</strong><br>进入这一阶段，假设协调者处于正常工作状态，并且任意一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。</p>\n<ol>\n<li>发送中断请求。<br>协调者向所有的参与者节点发送 abort 请求。</li>\n<li>事务回滚。<br>参与者接收到 abort 请求后，会利用其在阶段二中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务期间占用的资源。</li>\n<li>反馈事务回滚结果。<br>参与者而在完成事务回滚之后，向协调者发送 Ack 消息。</li>\n<li>中断事务。<br>协调者接收到所有参与者反馈的 Ack 消息后，中断事务。</li>\n</ol>\n<h3 id=\"3-1-1-可能遇到的问题\"><a href=\"#3-1-1-可能遇到的问题\" class=\"headerlink\" title=\"3.1.1 可能遇到的问题\"></a>3.1.1 可能遇到的问题</h3><ul>\n<li>协调者出现问题。</li>\n<li>协调者和参与者之间的网络出现故障。<br>无论出现哪种情况，最终都会导致参与者无法及时接收到来自协调者的 doCommit 或是 abort 请求，针对这样的异常情况，参与者都会在等待超时之后，继续进行事务提交。</li>\n</ul>\n<h3 id=\"3-1-2-优缺点\"><a href=\"#3-1-2-优缺点\" class=\"headerlink\" title=\"3.1.2 优缺点\"></a>3.1.2 优缺点</h3><p><strong>优点：</strong>相较于二阶段提交协议，三阶段提交协议最大的优点就是降低了参与者的阻塞范围，并且能够在出现单点故障后继续达成一致。</p>\n<p><strong>缺点：</strong>三阶段提交协议在去除阻塞的同时也引入了新的问题，那就是在参与者接收到 preCommit 消息后，如果网路出现分区，此时协调者所在的节点和参与者无法进行正常的网络通信，在这种情况下，该参与者依然会进行事务的提交，这必然出现数据的不一致。</p>\n<h1 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h1><ol>\n<li>《从Paxos到Zookeeper  分布式一致性原理与实践》</li>\n</ol>\n","site":{"data":{}},"wordcount":3717,"excerpt":"","more":"<h1 id=\"1-2PC-与-3PC-的由来\"><a href=\"#1-2PC-与-3PC-的由来\" class=\"headerlink\" title=\"1. 2PC 与 3PC 的由来\"></a>1. 2PC 与 3PC 的由来</h1><p>在分布式系统中，每一个机器节点虽然都能够明确地知道自己在进行事务操作过程中的结果是成功或失败，但却无法直接获取到其他分布式节点的操作结果。因此，当一个事务操作需要跨越多个分布式节点的时候，为了保持事务处理的 ACID 特性，就需要引入一个称为 “协调者（Coordinator）”的组件来统一调度所有分布式节点的执行逻辑，这些被调度的分布式节点则被称为 “参与者（Participant）”。协调者负责调度参与者的行为，并最终决定这些参与者是否要把事务真正进行提交。基于这个思想，衍生出了二阶段提交（2PC）和三阶段提交（3PC）两种协议。</p>\n<h1 id=\"2-2PC\"><a href=\"#2-2PC\" class=\"headerlink\" title=\"2. 2PC\"></a>2. 2PC</h1><p>2PC, 是 Two-Phase Commit 的缩写，即二阶段提交，是计算机网络尤其是在数据库领域一致性二设计的一种算法。通常，二阶段提交协议也被认为是一种一致性协议，用来保证分布式系统的一致性。目前，绝大部分的关系型数据库都是采用二阶段提交协议来完成分布式事务处理的，利用该协议能够非常方便地完成所有分布式事务参与者的协调，统一决定事务的提交或回滚，从而能够有效地保证分布式数据一致性，因此二阶段提交协议被广泛地应用在许多分布式系统中。</p>\n<h2 id=\"2-1-2PC协议执行过程\"><a href=\"#2-1-2PC协议执行过程\" class=\"headerlink\" title=\"2.1 2PC协议执行过程\"></a>2.1 2PC协议执行过程</h2><p>2PC 提交协议是将事务的提交过程分成了两个阶段来进行处理，其执行流程如下：<br><strong>阶段一：提交事务请求：</strong></p>\n<ol>\n<li>事务询问。<br>协调者向所有参与者发送事务内容，询问是否可以事务提交操作，并开始等待各参与者的响应。</li>\n<li>执行事务。<br>各参与者节点执行事务操作，并将 Undo 和 Redo 信息记入事务日志中。</li>\n<li>各参与者向协调者反馈事务询问的响应。<br>如果参与者成功地执行了事务操作，那么久反馈给协调者 Yes 响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者 No 响应，表示事务不可以执行。<br/></li>\n</ol>\n<blockquote>\n<p>上面的内容形式上近似是协调者组织各参与者对一次事务操作的投票表态过程，因此二阶段提交协议的阶段一也被称为 “投票阶段” ，即各参与者投票表明是否要继续执行接下去的事务提交操作。</p>\n</blockquote>\n<p><strong>阶段二：执行事务提交</strong><br>在阶段二中，协调者会根据各参与者的反馈情况来决定最终是否可以进行事务提交操作，正常情况下，包含以下两种可能：<br/><br>执行事务提交<br/><br>假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务提交。</p>\n<ol>\n<li>发送提交请求。<br>协调者向所有参与者节点发出 Commit 请求。</li>\n<li>事务提交。<br>参与者接收到协调者发送的 Commit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。</li>\n<li>反馈事务提交结果。<br>参与者在完成事务提交之后，向协调者发送 Ack 消息。</li>\n<li>完成事务。<br>协调者接收到所有参与者反馈的 Ack 消息后， 完成事务。<br/></li>\n</ol>\n<p>中断事务<br/><br>假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。</p>\n<ol>\n<li>发送回滚请求。<br>协调者向所有参与者节点发送 Rollback 请求。</li>\n<li>事务回滚。<br>参与者接收到 Rollback 请求后，会利用其在阶段一中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。</li>\n<li>反馈事务回滚结果。<br>参与者在完成事务回滚之后，向协调者发送 Ack 消息。</li>\n<li>中断事务。<br>协调者接收到所有参与者反馈的 Ack 消息后，完成事务中断。</li>\n</ol>\n<h2 id=\"2-2-2PC的优缺点\"><a href=\"#2-2-2PC的优缺点\" class=\"headerlink\" title=\"2.2. 2PC的优缺点\"></a>2.2. 2PC的优缺点</h2><h3 id=\"2-2-1-优点\"><a href=\"#2-2-1-优点\" class=\"headerlink\" title=\"2.2.1 优点\"></a>2.2.1 优点</h3><p>二阶段提交协议的优点：原理简单，实现方便。</p>\n<h3 id=\"2-2-2-缺点\"><a href=\"#2-2-2-缺点\" class=\"headerlink\" title=\"2.2.2 缺点\"></a>2.2.2 缺点</h3><p>二阶段提交协议的缺点：同步阻塞、单点问题、脑裂造成数据不一致、过于保守。<br/><br>同步阻塞<br/><br>二阶段提交协议存在的最明显也是最大的一个问题就是同步阻塞，这会极大地限制分布式系统的性能。在二阶段提交的执行过程中，所有参与该事务操作的逻辑都处于阻塞状态，也就是说，各个参与者在等待其他参与者响应的过程中，将无法进行其它任何操作。<br/><br>单点问题<br/><br>在上面的讲解中，协调者的角色在整个二阶段提交协议中起到了非常重要的作用。一旦协调者出现问题，那么整个二阶段提交流程将无法运转，更为严重的是，如果协调者是在二阶段中出现问题的话，那么其他参与者将会一直处于锁定事务资源的状态中，而无法继续完事务操作。<br/><br>脑裂造成数据不一致<br/><br>在二阶段提交协议的阶段二，即执行事务提交的时候，当协调者向所有的参与者发送 Commit 请求之后，发生了局部网络异常或者是协调者在尚未发送完 Commit 请求之前自身发送了崩溃，导致最终只有部分参与者收到了 Commit 请求。于是，这部分收到了 Commit 请求的参与者就会进行事务的提交，而其他没没有收到 Commit 请求的参与者则无法进行事务提交，于是整个分布式系统便出现了数据不一致的现象。<br/><br>过于保守<br/><br>如果协调者指示参与者进行事务提交询问的过程中，参与者出现故障而导致协调者始终无法获取到所有参与者的响应信息的话，这时协调者只能依靠其自身的超时机制来判断是否需要中断事务，这样的策略显得比较保守。换句话说，二阶段提交协议没有设计较为完善的容错机制，任意一个节点的失败都会导致整个事务的失败。</p>\n<h1 id=\"3-3PC\"><a href=\"#3-3PC\" class=\"headerlink\" title=\"3. 3PC\"></a>3. 3PC</h1><p>上面我们讲解了二阶段提交协议的设计和实现原理，并明确指出了其在实际运行过程中可能存在的诸如同步阻塞、协调者的单点问题、脑裂造成的数据不一致和过于保守的容错机制等缺陷，因此研究者在二阶段提交协议的基础上进行了改进，提出了三阶段提交协议。</p>\n<h2 id=\"3-1-协议说明\"><a href=\"#3-1-协议说明\" class=\"headerlink\" title=\"3.1 协议说明\"></a>3.1 协议说明</h2><p>3PC，是 Three-Phase Commit 的缩写，即三阶段提交，是 2PC 的改进版本，它将二阶段提交协议的”提交事务请求”过程一分为二，新城了由 CanCommit、PreCommit和do Commit三个阶段组成的事务处理协议，下面进行说明：</p>\n<p><strong>阶段一：CanCommit</strong></p>\n<ol>\n<li>事务询问。<br>协调者向所有参与者发送一个包含事务内容的 canCommit 请求，询问是否可以执行事务操作，并开始等待各参与者的响应。</li>\n<li>各参与者向协调者反馈事务询问的响应。<br>参与者在接收到来自协调者的 canCommit 请求后，正常情况下，如果其自身认为可以顺利执行事务，那么会反馈 Yes 响应，并进入预备状态，否则反馈 No 响应。</li>\n</ol>\n<p><strong>阶段二：PreCommit</strong><br>在阶段二中，协调者会根据各参与者的反馈情况来决定是否可以进行事务的 PreCommit 操作，正常情况下，包含两种可能。</p>\n<p><strong>执行事务提交</strong><br>假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务预提交。</p>\n<ol>\n<li>发送预提交请求。<br>协调者向所有参与者阶段发出 preCommit 的请求，并进入 Prepared 阶段。</li>\n<li>事务预提交。<br>参与者接收到 PreCommit 请求后，会执行事务操作，并将 Undo 和 Redo 信息记录到事务日志中。</li>\n<li>各参与者向协调者反馈事务执行的响应。<br>如果参与者成功执行了事务操作，那么就会反馈给协调者 Ack 响应，同时等待最终的指令：提交（commit）或终止（abort）。</li>\n</ol>\n<p><strong>中断事务</strong><br>假如任何一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。</p>\n<ol>\n<li>发送中断请求。<br>协调者向所有参与者阶段发愁abort请求。</li>\n<li>中断事务。<br>无论是收到来自协调者的 abort 请求，或者是在等待协调者请求过程中超时，参与者都会中断事务。</li>\n</ol>\n<p><strong>阶段三：doCommit</strong><br>该阶段将进行真正的事务提交，会存在以下两种可能的情况。</p>\n<p><strong>执行请求</strong></p>\n<ol>\n<li>发送提交请求。<br>进入这一阶段，假设协调者处于正常工作状态，并且它接收到了来自所有参与者的 Ack 响应，那么它将从 “预提交” 状态换到 “提交” 状态，并向所有参与者发送 doCommit 请求。</li>\n<li>事务提交。<br>参与者接收到 doCommit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。</li>\n<li>反馈事务提交结果。<br>参与者在完成事务提交之后，向协调者发送 Ack 消息。</li>\n<li>完成事务。<br>协调者接收到所有参与者反馈的 Ack 消息后，完成事务。</li>\n</ol>\n<p><strong>中断事务</strong><br>进入这一阶段，假设协调者处于正常工作状态，并且任意一个参与者向协调者反馈了 No 响应，或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。</p>\n<ol>\n<li>发送中断请求。<br>协调者向所有的参与者节点发送 abort 请求。</li>\n<li>事务回滚。<br>参与者接收到 abort 请求后，会利用其在阶段二中记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务期间占用的资源。</li>\n<li>反馈事务回滚结果。<br>参与者而在完成事务回滚之后，向协调者发送 Ack 消息。</li>\n<li>中断事务。<br>协调者接收到所有参与者反馈的 Ack 消息后，中断事务。</li>\n</ol>\n<h3 id=\"3-1-1-可能遇到的问题\"><a href=\"#3-1-1-可能遇到的问题\" class=\"headerlink\" title=\"3.1.1 可能遇到的问题\"></a>3.1.1 可能遇到的问题</h3><ul>\n<li>协调者出现问题。</li>\n<li>协调者和参与者之间的网络出现故障。<br>无论出现哪种情况，最终都会导致参与者无法及时接收到来自协调者的 doCommit 或是 abort 请求，针对这样的异常情况，参与者都会在等待超时之后，继续进行事务提交。</li>\n</ul>\n<h3 id=\"3-1-2-优缺点\"><a href=\"#3-1-2-优缺点\" class=\"headerlink\" title=\"3.1.2 优缺点\"></a>3.1.2 优缺点</h3><p><strong>优点：</strong>相较于二阶段提交协议，三阶段提交协议最大的优点就是降低了参与者的阻塞范围，并且能够在出现单点故障后继续达成一致。</p>\n<p><strong>缺点：</strong>三阶段提交协议在去除阻塞的同时也引入了新的问题，那就是在参与者接收到 preCommit 消息后，如果网路出现分区，此时协调者所在的节点和参与者无法进行正常的网络通信，在这种情况下，该参与者依然会进行事务的提交，这必然出现数据的不一致。</p>\n<h1 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4. 参考\"></a>4. 参考</h1><ol>\n<li>《从Paxos到Zookeeper  分布式一致性原理与实践》</li>\n</ol>\n"},{"title":"ACID的理解","date":"2022-04-02T02:58:45.000Z","description":"简单地讲述ACID。","_content":"# 1. 什么是ACID\n在说ACID之前我们先了解一个概念，也就是**事务**。<br/>\n事务（Transaction）是由一系列对系统中数据进行访问与更新的操作组成的一个程序执行单元（Unit),狭义上的事务特指数据库事务。一方面，当多个应用程序并发访问数据库时，事务可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。另一方面，事务为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持数据一致性的方法。<br/>\n\n数据库事务的四个特征也就是ACID，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），所以说，ACID是事务的四大特性。<br/>\n\n下面我们来详细讲解一下ACID：\n**原子性（Atomicity）：**事务的原子性是指事务必须是一个原子的操作序列单元。事务中包含的各项操作在一次执行过程中，只允许出现以下两种状态之一。\n- 全部成功执行。\n- 全部不执行。\n任何一项操作失败都将导致整个事务失败，同时其他已经被执行的操作都将被撤销并回滚，只有所有的操作全部成功，整个事务才算是成功完成。<br/>\n**一致性（Consistency）：**事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。也就是说，事务执行的结果必须是使数据库从一个一致性状态转变到另一个一致性状态，因此，当数据库只包含成功事务提交的结果时，就能说数据库处于一致性状态。而如果数据库系统在运行过程中发生故障，有些事务尚未完成就被迫中断，这些未完成的事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是不一致的状态。<br/>\n**隔离性：**事务的隔离性是指在并发环境中，并发的事务是相互隔离的，一个事务的执行不能被其它事务干扰。也就是说，不同的事务并发操作相同的数据时，每个事务都有各自完整的数据空间，即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。在标准SQL规范中，定义了 4 个事务隔离级别，不同的隔离级别对事务的处理不同，如未授权读、授权读取、可重复读、串行化<br/>\n**持久性：**事务的持久性也被称为永久性，是指一个事务一旦提交，它对数据库中对应数据的状态变更就应该是永久的。换句话说，一旦某个事务成功结束，那么它对数据库所做的更新就必须是被永久保存下来——即使发生系统崩溃或机器宕机等故障，只要数据库能够重新启动，那么一定能够将其恢复到事务成功结束时的状态。<br/>\n\n","source":"_posts/distributed/concept/ACID.md","raw":"---\ntitle: ACID的理解\ncategories: ['分布式基础']\ndate: 2022-04-02 10:58:45\ntags: ACID\ndescription: 简单地讲述ACID。\n---\n# 1. 什么是ACID\n在说ACID之前我们先了解一个概念，也就是**事务**。<br/>\n事务（Transaction）是由一系列对系统中数据进行访问与更新的操作组成的一个程序执行单元（Unit),狭义上的事务特指数据库事务。一方面，当多个应用程序并发访问数据库时，事务可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。另一方面，事务为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持数据一致性的方法。<br/>\n\n数据库事务的四个特征也就是ACID，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），所以说，ACID是事务的四大特性。<br/>\n\n下面我们来详细讲解一下ACID：\n**原子性（Atomicity）：**事务的原子性是指事务必须是一个原子的操作序列单元。事务中包含的各项操作在一次执行过程中，只允许出现以下两种状态之一。\n- 全部成功执行。\n- 全部不执行。\n任何一项操作失败都将导致整个事务失败，同时其他已经被执行的操作都将被撤销并回滚，只有所有的操作全部成功，整个事务才算是成功完成。<br/>\n**一致性（Consistency）：**事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。也就是说，事务执行的结果必须是使数据库从一个一致性状态转变到另一个一致性状态，因此，当数据库只包含成功事务提交的结果时，就能说数据库处于一致性状态。而如果数据库系统在运行过程中发生故障，有些事务尚未完成就被迫中断，这些未完成的事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是不一致的状态。<br/>\n**隔离性：**事务的隔离性是指在并发环境中，并发的事务是相互隔离的，一个事务的执行不能被其它事务干扰。也就是说，不同的事务并发操作相同的数据时，每个事务都有各自完整的数据空间，即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。在标准SQL规范中，定义了 4 个事务隔离级别，不同的隔离级别对事务的处理不同，如未授权读、授权读取、可重复读、串行化<br/>\n**持久性：**事务的持久性也被称为永久性，是指一个事务一旦提交，它对数据库中对应数据的状态变更就应该是永久的。换句话说，一旦某个事务成功结束，那么它对数据库所做的更新就必须是被永久保存下来——即使发生系统崩溃或机器宕机等故障，只要数据库能够重新启动，那么一定能够将其恢复到事务成功结束时的状态。<br/>\n\n","slug":"distributed/concept/ACID","published":1,"updated":"2022-06-07T07:08:21.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl43v16cx0006b6jh3xhda1g6","content":"<h1 id=\"1-什么是ACID\"><a href=\"#1-什么是ACID\" class=\"headerlink\" title=\"1. 什么是ACID\"></a>1. 什么是ACID</h1><p>在说ACID之前我们先了解一个概念，也就是<strong>事务</strong>。<br/><br>事务（Transaction）是由一系列对系统中数据进行访问与更新的操作组成的一个程序执行单元（Unit),狭义上的事务特指数据库事务。一方面，当多个应用程序并发访问数据库时，事务可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。另一方面，事务为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持数据一致性的方法。<br/></p>\n<p>数据库事务的四个特征也就是ACID，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），所以说，ACID是事务的四大特性。<br/></p>\n<p>下面我们来详细讲解一下ACID：<br><strong>原子性（Atomicity）：</strong>事务的原子性是指事务必须是一个原子的操作序列单元。事务中包含的各项操作在一次执行过程中，只允许出现以下两种状态之一。</p>\n<ul>\n<li>全部成功执行。</li>\n<li>全部不执行。<br>任何一项操作失败都将导致整个事务失败，同时其他已经被执行的操作都将被撤销并回滚，只有所有的操作全部成功，整个事务才算是成功完成。<br/></li>\n</ul>\n<p><strong>一致性（Consistency）：</strong>事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。也就是说，事务执行的结果必须是使数据库从一个一致性状态转变到另一个一致性状态，因此，当数据库只包含成功事务提交的结果时，就能说数据库处于一致性状态。而如果数据库系统在运行过程中发生故障，有些事务尚未完成就被迫中断，这些未完成的事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是不一致的状态。<br/><br><strong>隔离性：</strong>事务的隔离性是指在并发环境中，并发的事务是相互隔离的，一个事务的执行不能被其它事务干扰。也就是说，不同的事务并发操作相同的数据时，每个事务都有各自完整的数据空间，即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。在标准SQL规范中，定义了 4 个事务隔离级别，不同的隔离级别对事务的处理不同，如未授权读、授权读取、可重复读、串行化<br/><br><strong>持久性：</strong>事务的持久性也被称为永久性，是指一个事务一旦提交，它对数据库中对应数据的状态变更就应该是永久的。换句话说，一旦某个事务成功结束，那么它对数据库所做的更新就必须是被永久保存下来——即使发生系统崩溃或机器宕机等故障，只要数据库能够重新启动，那么一定能够将其恢复到事务成功结束时的状态。<br/></p>\n","site":{"data":{}},"wordcount":1061,"excerpt":"","more":"<h1 id=\"1-什么是ACID\"><a href=\"#1-什么是ACID\" class=\"headerlink\" title=\"1. 什么是ACID\"></a>1. 什么是ACID</h1><p>在说ACID之前我们先了解一个概念，也就是<strong>事务</strong>。<br/><br>事务（Transaction）是由一系列对系统中数据进行访问与更新的操作组成的一个程序执行单元（Unit),狭义上的事务特指数据库事务。一方面，当多个应用程序并发访问数据库时，事务可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。另一方面，事务为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持数据一致性的方法。<br/></p>\n<p>数据库事务的四个特征也就是ACID，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability），所以说，ACID是事务的四大特性。<br/></p>\n<p>下面我们来详细讲解一下ACID：<br><strong>原子性（Atomicity）：</strong>事务的原子性是指事务必须是一个原子的操作序列单元。事务中包含的各项操作在一次执行过程中，只允许出现以下两种状态之一。</p>\n<ul>\n<li>全部成功执行。</li>\n<li>全部不执行。<br>任何一项操作失败都将导致整个事务失败，同时其他已经被执行的操作都将被撤销并回滚，只有所有的操作全部成功，整个事务才算是成功完成。<br/></li>\n</ul>\n<p><strong>一致性（Consistency）：</strong>事务的一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。也就是说，事务执行的结果必须是使数据库从一个一致性状态转变到另一个一致性状态，因此，当数据库只包含成功事务提交的结果时，就能说数据库处于一致性状态。而如果数据库系统在运行过程中发生故障，有些事务尚未完成就被迫中断，这些未完成的事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是不一致的状态。<br/><br><strong>隔离性：</strong>事务的隔离性是指在并发环境中，并发的事务是相互隔离的，一个事务的执行不能被其它事务干扰。也就是说，不同的事务并发操作相同的数据时，每个事务都有各自完整的数据空间，即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。在标准SQL规范中，定义了 4 个事务隔离级别，不同的隔离级别对事务的处理不同，如未授权读、授权读取、可重复读、串行化<br/><br><strong>持久性：</strong>事务的持久性也被称为永久性，是指一个事务一旦提交，它对数据库中对应数据的状态变更就应该是永久的。换句话说，一旦某个事务成功结束，那么它对数据库所做的更新就必须是被永久保存下来——即使发生系统崩溃或机器宕机等故障，只要数据库能够重新启动，那么一定能够将其恢复到事务成功结束时的状态。<br/></p>\n"},{"title":"分布式的理解","date":"2022-04-02T02:04:35.000Z","description":null,"_content":"# 1. 什么是分布式\n分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。\n> 上面这个简单的定义涵盖了几乎所有有效地部署了网络化计算机的系统。严格地讲，同一个分布式系统中的计算机在空间部署上是可以随意分布的，这些计算机可能被放在不同的机柜上，也可能在不同的机房中，甚至分布在不同的城市。无论如何，一个标准的分布式系统在没有任何特定业务逻辑约束的情况下，都会有如下的几个特征。\n## 1.1 分布式系统的特征\n**分布性：**分布式系统中的多台计算机都会在空间上随意分布，同时，机器的分布情况也会随时变动。<br/>\n**对等性：**分布式系统中的计算机没有主/从之分，没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是对等的。<br/>\n**并发性：**同一个分布式系统中的多个节点，可能会并发地操作一些共享的资源，诸如数据库或分布式存储等。<br/>\n**缺乏全局时钟：**在分布式系统中，很难定义两个时间究竟谁先谁后，原因就是因为分布式系统缺乏一个全局的时钟序列控制。<br/>\n**故障总是发生：**组成分布式系统的所有计算机，都有可能发生任何形式的故障。\n## 1.2分布式环境的各种问题\n**通信异常：**分布式系统需要在各个环节之间进行网络通信，因此每次网络通信都会伴随网络不可用的风险，网络光纤、路由器或是DNS等硬件设备或是系统不可用都会导致最终分布式系统无法顺利完成一次网络通信。<br/>\n**网络分区：**当分布式节点由于网络异常发生造成只有部分节点能够正常通信——网络分区现象，俗称脑裂。当网络分区出现时，分布式系统会出现局部小集群，在极端情况下，这些局部小集群会独立完成原本需要整个分布式系统才能完成的功能，包括数据的事务处理，这就对了分布式一致性提出了非常大的挑战。<br/>\n**三态：**即成功、失败、超时。发生超时原因有两个：\n- 由于网络原因，该请求（消息）并没有被成功地发送到接收方，而是在发送过程中就发生了消息丢失现象。\n- 该请求（消息）成功的被接收方接收后，并进行了处理，但是在将响应反馈给发送方的过程中，发生了消息丢失现象。\n**节点故障：**宕机或僵死等。\n<br/>\n《未完待续》\n# 2. 参考\n1.《从Paxos到Zookeeper  分布式一致性原理与实践》","source":"_posts/distributed/concept/分布式的理解.md","raw":"---\ntitle: 分布式的理解\ncategories: ['分布式基础']\ndate: 2022-04-02 10:04:35\ntags:\ndescription:\n---\n# 1. 什么是分布式\n分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。\n> 上面这个简单的定义涵盖了几乎所有有效地部署了网络化计算机的系统。严格地讲，同一个分布式系统中的计算机在空间部署上是可以随意分布的，这些计算机可能被放在不同的机柜上，也可能在不同的机房中，甚至分布在不同的城市。无论如何，一个标准的分布式系统在没有任何特定业务逻辑约束的情况下，都会有如下的几个特征。\n## 1.1 分布式系统的特征\n**分布性：**分布式系统中的多台计算机都会在空间上随意分布，同时，机器的分布情况也会随时变动。<br/>\n**对等性：**分布式系统中的计算机没有主/从之分，没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是对等的。<br/>\n**并发性：**同一个分布式系统中的多个节点，可能会并发地操作一些共享的资源，诸如数据库或分布式存储等。<br/>\n**缺乏全局时钟：**在分布式系统中，很难定义两个时间究竟谁先谁后，原因就是因为分布式系统缺乏一个全局的时钟序列控制。<br/>\n**故障总是发生：**组成分布式系统的所有计算机，都有可能发生任何形式的故障。\n## 1.2分布式环境的各种问题\n**通信异常：**分布式系统需要在各个环节之间进行网络通信，因此每次网络通信都会伴随网络不可用的风险，网络光纤、路由器或是DNS等硬件设备或是系统不可用都会导致最终分布式系统无法顺利完成一次网络通信。<br/>\n**网络分区：**当分布式节点由于网络异常发生造成只有部分节点能够正常通信——网络分区现象，俗称脑裂。当网络分区出现时，分布式系统会出现局部小集群，在极端情况下，这些局部小集群会独立完成原本需要整个分布式系统才能完成的功能，包括数据的事务处理，这就对了分布式一致性提出了非常大的挑战。<br/>\n**三态：**即成功、失败、超时。发生超时原因有两个：\n- 由于网络原因，该请求（消息）并没有被成功地发送到接收方，而是在发送过程中就发生了消息丢失现象。\n- 该请求（消息）成功的被接收方接收后，并进行了处理，但是在将响应反馈给发送方的过程中，发生了消息丢失现象。\n**节点故障：**宕机或僵死等。\n<br/>\n《未完待续》\n# 2. 参考\n1.《从Paxos到Zookeeper  分布式一致性原理与实践》","slug":"distributed/concept/分布式的理解","published":1,"updated":"2022-06-07T07:08:21.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl43v16cz000ab6jhe7i0dzzr","content":"<h1 id=\"1-什么是分布式\"><a href=\"#1-什么是分布式\" class=\"headerlink\" title=\"1. 什么是分布式\"></a>1. 什么是分布式</h1><p>分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。</p>\n<blockquote>\n<p>上面这个简单的定义涵盖了几乎所有有效地部署了网络化计算机的系统。严格地讲，同一个分布式系统中的计算机在空间部署上是可以随意分布的，这些计算机可能被放在不同的机柜上，也可能在不同的机房中，甚至分布在不同的城市。无论如何，一个标准的分布式系统在没有任何特定业务逻辑约束的情况下，都会有如下的几个特征。</p>\n</blockquote>\n<h2 id=\"1-1-分布式系统的特征\"><a href=\"#1-1-分布式系统的特征\" class=\"headerlink\" title=\"1.1 分布式系统的特征\"></a>1.1 分布式系统的特征</h2><p><strong>分布性：</strong>分布式系统中的多台计算机都会在空间上随意分布，同时，机器的分布情况也会随时变动。<br/><br><strong>对等性：</strong>分布式系统中的计算机没有主/从之分，没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是对等的。<br/><br><strong>并发性：</strong>同一个分布式系统中的多个节点，可能会并发地操作一些共享的资源，诸如数据库或分布式存储等。<br/><br><strong>缺乏全局时钟：</strong>在分布式系统中，很难定义两个时间究竟谁先谁后，原因就是因为分布式系统缺乏一个全局的时钟序列控制。<br/><br><strong>故障总是发生：</strong>组成分布式系统的所有计算机，都有可能发生任何形式的故障。</p>\n<h2 id=\"1-2分布式环境的各种问题\"><a href=\"#1-2分布式环境的各种问题\" class=\"headerlink\" title=\"1.2分布式环境的各种问题\"></a>1.2分布式环境的各种问题</h2><p><strong>通信异常：</strong>分布式系统需要在各个环节之间进行网络通信，因此每次网络通信都会伴随网络不可用的风险，网络光纤、路由器或是DNS等硬件设备或是系统不可用都会导致最终分布式系统无法顺利完成一次网络通信。<br/><br><strong>网络分区：</strong>当分布式节点由于网络异常发生造成只有部分节点能够正常通信——网络分区现象，俗称脑裂。当网络分区出现时，分布式系统会出现局部小集群，在极端情况下，这些局部小集群会独立完成原本需要整个分布式系统才能完成的功能，包括数据的事务处理，这就对了分布式一致性提出了非常大的挑战。<br/><br><strong>三态：</strong>即成功、失败、超时。发生超时原因有两个：</p>\n<ul>\n<li>由于网络原因，该请求（消息）并没有被成功地发送到接收方，而是在发送过程中就发生了消息丢失现象。</li>\n<li>该请求（消息）成功的被接收方接收后，并进行了处理，但是在将响应反馈给发送方的过程中，发生了消息丢失现象。</li>\n</ul>\n<p><strong>节点故障：</strong>宕机或僵死等。<br><br/><br>《未完待续》</p>\n<h1 id=\"2-参考\"><a href=\"#2-参考\" class=\"headerlink\" title=\"2. 参考\"></a>2. 参考</h1><p>1.《从Paxos到Zookeeper  分布式一致性原理与实践》</p>\n","site":{"data":{}},"wordcount":887,"excerpt":"","more":"<h1 id=\"1-什么是分布式\"><a href=\"#1-什么是分布式\" class=\"headerlink\" title=\"1. 什么是分布式\"></a>1. 什么是分布式</h1><p>分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。</p>\n<blockquote>\n<p>上面这个简单的定义涵盖了几乎所有有效地部署了网络化计算机的系统。严格地讲，同一个分布式系统中的计算机在空间部署上是可以随意分布的，这些计算机可能被放在不同的机柜上，也可能在不同的机房中，甚至分布在不同的城市。无论如何，一个标准的分布式系统在没有任何特定业务逻辑约束的情况下，都会有如下的几个特征。</p>\n</blockquote>\n<h2 id=\"1-1-分布式系统的特征\"><a href=\"#1-1-分布式系统的特征\" class=\"headerlink\" title=\"1.1 分布式系统的特征\"></a>1.1 分布式系统的特征</h2><p><strong>分布性：</strong>分布式系统中的多台计算机都会在空间上随意分布，同时，机器的分布情况也会随时变动。<br/><br><strong>对等性：</strong>分布式系统中的计算机没有主/从之分，没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是对等的。<br/><br><strong>并发性：</strong>同一个分布式系统中的多个节点，可能会并发地操作一些共享的资源，诸如数据库或分布式存储等。<br/><br><strong>缺乏全局时钟：</strong>在分布式系统中，很难定义两个时间究竟谁先谁后，原因就是因为分布式系统缺乏一个全局的时钟序列控制。<br/><br><strong>故障总是发生：</strong>组成分布式系统的所有计算机，都有可能发生任何形式的故障。</p>\n<h2 id=\"1-2分布式环境的各种问题\"><a href=\"#1-2分布式环境的各种问题\" class=\"headerlink\" title=\"1.2分布式环境的各种问题\"></a>1.2分布式环境的各种问题</h2><p><strong>通信异常：</strong>分布式系统需要在各个环节之间进行网络通信，因此每次网络通信都会伴随网络不可用的风险，网络光纤、路由器或是DNS等硬件设备或是系统不可用都会导致最终分布式系统无法顺利完成一次网络通信。<br/><br><strong>网络分区：</strong>当分布式节点由于网络异常发生造成只有部分节点能够正常通信——网络分区现象，俗称脑裂。当网络分区出现时，分布式系统会出现局部小集群，在极端情况下，这些局部小集群会独立完成原本需要整个分布式系统才能完成的功能，包括数据的事务处理，这就对了分布式一致性提出了非常大的挑战。<br/><br><strong>三态：</strong>即成功、失败、超时。发生超时原因有两个：</p>\n<ul>\n<li>由于网络原因，该请求（消息）并没有被成功地发送到接收方，而是在发送过程中就发生了消息丢失现象。</li>\n<li>该请求（消息）成功的被接收方接收后，并进行了处理，但是在将响应反馈给发送方的过程中，发生了消息丢失现象。</li>\n</ul>\n<p><strong>节点故障：</strong>宕机或僵死等。<br><br/><br>《未完待续》</p>\n<h1 id=\"2-参考\"><a href=\"#2-参考\" class=\"headerlink\" title=\"2. 参考\"></a>2. 参考</h1><p>1.《从Paxos到Zookeeper  分布式一致性原理与实践》</p>\n"},{"title":"zookeeper入门","date":"2022-03-25T03:09:47.000Z","description":"介绍zookeeper的入门概念、数据模型、应用场景以及Java对它进行整合。","_content":"# 1. 前言<br/>\n在此刻的我并不知道zookeeper是什么，我听到zookeeper的第一感觉就是这家伙是啥啊，对的，前言就这么短，因为我也不知道它是啥，也没怎么用。——2022-03-25 11:09:47\n# 2. ZooKeeper介绍<br/>\n## 2.1 ZooKeeper名字的由来\n学习一样东西的时候，个人觉得最好是先了解它是怎么出现在人们眼前的，然后出现了之后是怎么慢慢地被人们使用的，使用后怎样被人们慢慢扩展的。\n这里介绍一下它的由来（摘自《从Paxos到Zookeeper  分布式一致性原理与实践 [倪超著][电子工业出版社]》）：\n> ZooKeeper最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。关于 \"ZooKeeper\" 这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目），雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 Raghu Ramakrishnan 开玩笑地说：\"再这样下去，我们这儿就变成动物园了！\"此话一出，大家纷纷表示就叫动物园管理员吧——因为各个以动物园命名的分布式组件放在一起，雅虎整个分布式系统看上去就像一个大型的动物园了，而ZooKeeper正好要用来进行分布式环境的协调——于是，ZooKeeper的名字也就由此诞生了。\n\n看完ZooKeeper名字的由来是不是有点想笑，传奇的分布式协调框架就由此被命名了，这名字像是不要钱想的一样😂不过也能理解，开发人员都是可爱的😆\n\n## 2.2 ZooKeeper概述\nZooKeeper他是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\n> 原语：一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。\n\nZooKeeper为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调、通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n此外，ZooKeeper将数据保存在内存中，性能是非常棒的。在\"读\"多于\"写\"的应用程序中尤其地高性能，因为\"写\"会导致所有的服务器进行数据同步。(\"读\"多于\"写\"是协调服务的典型场景)。\n\n## 2.3 ZooKeeper特点\n- **顺序一致性**：从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到ZooKeeper中去。\n- **原子性**：所有事务的请求处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功地应用了某一个事务，要么都没有应用。\n- **单一系统映像**：无论客户端连接到哪一个ZooKeeper服务器上，其看到的服务端数据模型都是一致的。\n- **可靠性**：任何一次更改请求被应用，更改的结果就会被持久化，知道被下一次更改覆盖。\n\n## 2.4 ZooKeeper典型应用场景\n\nZooKeeper概述中，我们介绍到使用其通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n下面选3个典型的应用场景来专门说说(后续更新具体代码逻辑)：\n1. **分布式锁**：通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放。\n2. **命名服务**：可以通过ZooKeeper的顺序节点生成全局唯一ID。\n3. **数据发布/订阅**：通过Watcher机制可以很方便地实现数据发布/订阅。当你将数据发布到ZooKeeper被监听的节点上，其他机器可通过监听ZooKeeper上的节点的变化来实现配置的动态更新。\n\n实际上，这些功能的实现基本上都得益于ZooKeeper可以保存数据的功能，但是ZooKeeper不适合保存大量数据，这一点需要注意一下😤\n\n# 3. ZooKeeper的功能<br/>\n友情提示👿：拿出小本本，下面的内容非常重要啊哈\n\n## 3.1 Data model（数据模型）\nZooKeeper数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数字可以说是数字、字符串或者是二进制序列。并且，每个节点还可以拥有N个子节点，最上层是根节点使用\"/\"来表示。每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最先单元。并且，每个znode都只有一个唯一的路径标识。\n\n强调一句👿：**ZooKeeper主要是用来协调服务，而不是用来存储业务数据的，所以，不要放比较大的数据在znode上，ZooKeeper给出的上线是每个结点的数据大小最大是1M。**\n\n从下图可以更直观地看出：ZooKeeper节点路径标识方式和Unix文件系统路径非常相似，都是由一系列使用\"/\"进行分割的路径表示，开发人员可以想这个结点中写入数据，也可以在节点下面创建子节点。\n这些操作后面我们来实操一下。\n![](https://javaguide.cn/assets/znode-structure.19119dbd.png)\n\n## 3.2 znode（数据节点）\n介绍了ZooKeeper树形数据模型之后，我们知道每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最小单元。你要存放的数据就放在上面，是你使用ZooKeeper过程中经常需要接触到的一个概念。\n\n### 3.2.1 znode的4中类型\n一般我们将znode分为4大类：\n- **持久（PERSISTENT）节点**：一旦创建就一直存在即使ZooKeeper集群宕机，直到将其删除。\n- **临时（EPHEMERAL）节点**：临时结点的生命周期是与**客户端会话（session）**绑定的，**会话消失则结点消失**。并且**临时结点只能做叶子结点**，不能创建子节点。\n- **持久顺序（PERSISTENT_SEQUENTIAL）节点**：除了具有持久（PERSISTENT）节点的特性之外，子节点的名称还具有顺序性。比如```/node1/00000000001```、```/node/00000000002```。\n- **临时顺序（EPHEMERAL_SEQUENTIAL）节点**：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。\n\n### 3.2.2 znode数据结构\n每个znode由2部分组成：\n- **stat**：状态信息。\n- **data**：节点存放的数据的具体内容。\n\n如下所示，我通过ZooKeeper的get命令来获取根目录下violet节点的内容。（get命令在下面会详细介绍哟）。\n```sh\n[zk: 127.0.0.1:2181(CONNECTED) 6] get /violet\n# 该数据节点关联的数据内容为空\nnull\n# 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出\ncZxid = 0x2\nctime = Tue Nov 27 18:05:34 CST 2022\nmZxid = 0x2\nmtime = Tue Nov 27 18:05:34 CST 2022\npZxid = 0x3\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 0\nnumChildren = 1\n```\n\nStat类中包含了一个数据节点的所有状态信息的字段，包括事务ID-cZxid、节点创建时间-ctime和子节点个数-numChidren等等。\n\n下面我们来看一下每个znode状态信息究竟代表的是什么吧！（下面的内容来源于《从Paxos到Zookeeper  分布式一致性原理与实践》，因为松松也不是特别清楚，要学会参考资料哟）：\n\n| **znode状态信息**|**解释**|\n|--|--|\n| cZxid|create ZXID，即该数据节点被创建时的事务id|\n|ctime|create time, 即该节点的创建时间|\n|mZxid|modified ZXID，即该节点最终一次更新时的事务id|\n|mtime|modified time，即该节点最后一次的更新时间|\n|pZxid|该节点的子节点列表最后一次修改时的事务id，只有子节点列表变更才会更新pZxid，子节点内容变更不会更新|\n|cversion|子节点版本号，当前节点的子节点每次变化时值增加1|\n|dataVersion|数据节点内容版本号，节点创建时为0，每更新一次节点内容（不管内容有无变化）该版本号的值增加1|\n|aclVersion|节点的ACL版本号，表示该节点ACL信息变更次数|\n|ephemeralOwner|创建该临时节点的会话的sessionid：如果当前节点为持久节点，则ephemeralOwner=0|\n|dataLength|数据节点内容长度|\n|numChildren|当前节点的子节点个数|\n\n## 3.3 版本（version）\n在前面我们已经提到，对应每个znode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个znode的三个相关的版本：\n- **dataVersion**：当前znode节点的版本号。\n- **cversion**：当前znode子节点的版本。\n- **aclVersion**：当前znode的ACL的版本号。\n\n## 3.4 ACL（权限控制）\nZooKeeper采用ACL（AccessControlLists）策略来进行权限控制，类似于UNIX文件系统的权限控制。\n\n对于znode操作的权限，ZooKeeper提供了以下5种：\n- **CREATE**：能创建子节点\n- **READ**：能获取节点数据和列出其子节点\n- **WRITE**：能设置/更新节点数据\n- **DELETE**：能删除子节点\n- **ADMIN**: 能设置节点ACL的权限\n\n其中尤其需要注意的是， CREATE和DELETE这两种权限都是针对子节点的权限控制。\n\n对于身份认证，提供了以下几种方式：\n- **world**：默认方式，所有用户都可无条件访问。\n- **auth**：不适用任何id，代表任何已认证的用户。\n- **digest**：用户名：密码认证方式：username:password。\n- **ip**：对指定ip进行限制。\n\n## 3.5 Watcher（事件监听器）\nWatcher（事件监听器），是ZooKeeper中的一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知感兴趣的客户端上去，该机制是ZooKeeper实现分布式协调服务的重要特性。\n![](https://javaguide.cn/assets/watche%E6%9C%BA%E5%88%B6.f523bd89.png)\n王之怒吼👿：非常有用的一个特性，都拿出小本本记好了，后面用到ZooKeeper基本离不开Watcher（事件监听）机制。\n\n## 3.6 会话（Session）\nSession 可以看做是ZooKeeper服务器与客户端之间的一个TCP长连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZooKeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watcher事件通知。\n\nSession有一个属性叫作：sessionTimeout，sessionTimeout代表会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话依然有效。\n\n另外，在为客户端创建会话之前，服务端首先会为每个客户端都分配一个sessionID。由于sessionID是ZooKeeper会话的一个重要标识，许多与会话相关的运行机制都是基于这个sessionID的，因此，无论是哪台服务器为客户端分配的sessionID，都务必保证全局唯一。\n\n# 4. ZooKeeper集群\n为了保证高可用，最好是以集群形态来部署ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么ZooKeeper本身仍然是可用的。通常3台服务器就可以构成一个ZooKeeper集群了。ZooKeeper官方提供的架构图就是一个ZooKeeper集群整体对外提供服务。\n![](https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4.6fdcc61e.png)\n上图中每一个Server代表一个安装ZooKeeper服务的服务器。组成ZooKeeper服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都保持着通信。集群间通过ZAB协议（ZooKeeper Atomic Broadcast）来保持数据的一致性。\n\n**最典型集群模式**：**Master/Slave模式（主备模式）。在这种模式中，通常Master服务器作为主服务器提供写服务，其他的Slave服务器从服务器通过异步复制的方式获取Master服务器最新的数据提供读服务。\n\n### 4.1 ZooKeeper集群角色\n但是，在ZooKeeper中没有选择传统的Master/Slave概念，而是引入了Leader、Follower和Observer三种角色。如下图所示\n![](https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.ffff8ef5.png)\nZooKeeper集群中的所有机器通过一个Leader**选举过程**来选定一台称为\"Leader\"的机器，Leader既可以为客户端提供写服务又能提供读服务。除了Leader外，**Follower**和**Observer**都只能提供读服务。Follower和Observer唯一的区别在于Observer机器不参与Leader的选举过程，也不参与写操作的\"过半写成功\"策略，因此Observer机器可以在不影响写性能的情况下提升集群的读性能。\n\n|角色|说明|\n|-|-|\n|Leader|为客户提供读和写的服务，负责投票的发起和决议，更新系统状态。|\n|Follower|为客户端提供读服务，如果是写服务则转发给Leader。参与选举过程中的投票。|\n|Observer|为客户端提供读服务，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与\"过半写成功\"策略。在不影响写性能的情况下提升集群的读性能。此角色于ZooKeeper3.3系列新增的角色。|\n\n当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，就会进入Leader选举过程，这个过程会选举产生新的Leader服务器。\n\n这个过程大概是这样子的：\n1. Leader election在（选举阶段）：节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准leader。\n2. Discovery（发现阶段）：在这个阶段，followers跟准leader进行通信，同步followers最近接收的事务提议。\n3. Synchronization（同步阶段）：同步阶段主要是利用leader前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后准leader才会成为真正的leader。\n4. Broadcast（广播阶段）：到了这个阶段，ZooKeeper集群才能正式对外提供事务服务，并且leader可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。\n\n### 4.2 ZooKeeper集群中的服务器状态\n- **LOOKING**：寻找Leader。\n- **LEADING**：Leader状态，对应的节点为Leader。\n- **FOLLOWING**：Follower状态，对应的节点为Follower。\n- **OBSERVING**：Observer状态，对应节点为Observer，该节点不参与Leader选举。\n\n### 4.3 ZooKeeper集群为啥最好是奇数台？\nZooKeeper集群在宕掉几个ZooKeeper服务器之后，如果剩下的ZooKeeper服务器个数大于宕掉的个数的话整个ZooKeeper才依然可用。假如我们的集群中有n台ZooKeeper服务器，那么也就是剩下的服务数必须大于n/2。先说一下结论，2n和2n-1的容忍度是一样的，都是n-1，大家可以先自己仔细想一想。\n\n比如：假如我们有3台，那么最大允许宕掉1台ZooKeeper服务器，如果我们有4台的的时候也同样只允许宕掉1台。 假如我们有5台，那么最大允许宕掉2台ZooKeeper服务器，如果我们有6台的的时候也同样只允许宕掉2台。\n\n综上，何必增加那一个不必要的ZooKeeper服务器呢？\n\n### 4.4 ZooKeeper选举的过半机制防止脑裂\n##### 何为集群脑裂？\n对于一个集群，通常多台机器会部署在不同机房，来提高这个集群的可用性。保证可用性的同时，会发生一种机房间网络线路故障，导致机房间网络不通，而集群被割裂成几个小集群。这时候子集群各自选主导致\"脑裂\"的情况。\n\n举例说明：比如现在有一个由6台服务器所组成的一个集群，部署在了2个机房，每个机房3台。正常情况下只有1个leader，但是当两个机房中间网络断开的时候，每个机房的3台服务器都会认为另一个机房的3台服务器下线，而选出自己的leader并对外提供服务。若没有过半机制，当网络恢复的时候会发现有2个leader。仿佛是1个大脑（leader）分散成了2个大脑，这就发生了脑裂现象。脑裂期间2个大脑都可能对外提供服务，这将会带来数据一致性等问题。\n\n##### 过半机制是如何防止脑裂现象产生的？\nZooKeeper的过半机制导致不可能产生2个leader，因为少于等于一半是不可能产生leader的，这就使得不论机房的机器如何分配都不可能发生脑裂。\n\n# 5. ZAB协议和Paxos算法\nPaxos算法应该可以说是ZooKeeer的灵魂了。但是，ZooKeeper并没有完全采用Paxos算法，而是使用ZAB协议作为其保证数据一致性的核心算法。另外，在ZooKeeper的官方文档中也指出，ZAB协议并不想Paxos算法那样，是一种通用的分布式一致性算法，它是一种特别为ZooKeeper设计的崩溃可恢复的原子消息广播算法。\n\n### 5.1 ZAB协议介绍\nZAB（ZooKeeper Atomic Broadcast 原子广播）协议是为分布式协调服务ZooKeeper专门设计的一种支持崩溃恢复的原子广播协议。在ZooKeeper中，主要依赖ZAB协议来实现分布式数据一致性，基于该协议，ZooKeeper实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\n\n### 5.2 ZAB协议两种基本的模式：崩溃恢复和消息广播\n\nZAB协议包括两种基本的模式，分别是\n- **崩溃恢复**：当整个服务框架在启动过程中，或是当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB协议就会进入恢复模式并选举产生新的Leader服务器。当选举产生了新的Leader服务器，同时集群中已经有过半的机器与该Leader服务器完成了状态同步之后，ZAB协议就会退出恢复模式。其中，**所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和Leader服务器的数据状态保持一致**。\n- **消息广播：当集群中已经有过半的Follwer服务器完成了和Leader服务器的状态同步，name整个服务框架就可以进入消息广播模式了**。当一台同样遵守ZAB协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个Leader服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到Leader所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。\n\n\n# 6. 总结\n1. ZooKeeper 本身就是一个分布式程序（只要半数以上节点存活，ZooKeeper 就能正常服务）。\n2. 为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 ZooKeeper 本身仍然是可用的。\n3. ZooKeeper 将数据保存在内存中，这也就保证了 高吞吐量和低延迟（但是内存限制了能够存储的容量不太大，此限制也是保持 znode 中存储的数据量较小的进一步原因）。\n4. ZooKeeper 是高性能的。 在“读”多于“写”的应用程序中尤其地明显，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景。）\n5. ZooKeeper 有临时节点的概念。 当创建临时节点的客户端会话一直保持活动，瞬时节点就一直存在。而当会话终结时，瞬时节点被删除。持久节点是指一旦这个 znode 被创建了，除非主动进行 znode 的移除操作，否则这个 znode 将一直保存在 ZooKeeper 上。\n6. ZooKeeper 底层其实只提供了两个功能：① 管理（存储、读取）用户程序提交的数据；② 为用户程序提供数据节点监听服务。\n# 7. 参考\n1. [《JavaGuide》——ZooKeeper相关概念总结（入门）](https://javaguide.cn/)\n2. 《从 Paxos 到 ZooKeeper 分布式一致性原理与实践》","source":"_posts/distributed/zookeeper/zookeeper入门.md","raw":"---\ntitle: zookeeper入门\ndate: 2022-03-25 11:09:47\ntags: zookeeper\ncategories: ['分布式基础', 'zookeeper']\ndescription: 介绍zookeeper的入门概念、数据模型、应用场景以及Java对它进行整合。\n---\n# 1. 前言<br/>\n在此刻的我并不知道zookeeper是什么，我听到zookeeper的第一感觉就是这家伙是啥啊，对的，前言就这么短，因为我也不知道它是啥，也没怎么用。——2022-03-25 11:09:47\n# 2. ZooKeeper介绍<br/>\n## 2.1 ZooKeeper名字的由来\n学习一样东西的时候，个人觉得最好是先了解它是怎么出现在人们眼前的，然后出现了之后是怎么慢慢地被人们使用的，使用后怎样被人们慢慢扩展的。\n这里介绍一下它的由来（摘自《从Paxos到Zookeeper  分布式一致性原理与实践 [倪超著][电子工业出版社]》）：\n> ZooKeeper最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。关于 \"ZooKeeper\" 这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目），雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 Raghu Ramakrishnan 开玩笑地说：\"再这样下去，我们这儿就变成动物园了！\"此话一出，大家纷纷表示就叫动物园管理员吧——因为各个以动物园命名的分布式组件放在一起，雅虎整个分布式系统看上去就像一个大型的动物园了，而ZooKeeper正好要用来进行分布式环境的协调——于是，ZooKeeper的名字也就由此诞生了。\n\n看完ZooKeeper名字的由来是不是有点想笑，传奇的分布式协调框架就由此被命名了，这名字像是不要钱想的一样😂不过也能理解，开发人员都是可爱的😆\n\n## 2.2 ZooKeeper概述\nZooKeeper他是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。\n> 原语：一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。\n\nZooKeeper为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调、通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n此外，ZooKeeper将数据保存在内存中，性能是非常棒的。在\"读\"多于\"写\"的应用程序中尤其地高性能，因为\"写\"会导致所有的服务器进行数据同步。(\"读\"多于\"写\"是协调服务的典型场景)。\n\n## 2.3 ZooKeeper特点\n- **顺序一致性**：从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到ZooKeeper中去。\n- **原子性**：所有事务的请求处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功地应用了某一个事务，要么都没有应用。\n- **单一系统映像**：无论客户端连接到哪一个ZooKeeper服务器上，其看到的服务端数据模型都是一致的。\n- **可靠性**：任何一次更改请求被应用，更改的结果就会被持久化，知道被下一次更改覆盖。\n\n## 2.4 ZooKeeper典型应用场景\n\nZooKeeper概述中，我们介绍到使用其通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。\n\n下面选3个典型的应用场景来专门说说(后续更新具体代码逻辑)：\n1. **分布式锁**：通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放。\n2. **命名服务**：可以通过ZooKeeper的顺序节点生成全局唯一ID。\n3. **数据发布/订阅**：通过Watcher机制可以很方便地实现数据发布/订阅。当你将数据发布到ZooKeeper被监听的节点上，其他机器可通过监听ZooKeeper上的节点的变化来实现配置的动态更新。\n\n实际上，这些功能的实现基本上都得益于ZooKeeper可以保存数据的功能，但是ZooKeeper不适合保存大量数据，这一点需要注意一下😤\n\n# 3. ZooKeeper的功能<br/>\n友情提示👿：拿出小本本，下面的内容非常重要啊哈\n\n## 3.1 Data model（数据模型）\nZooKeeper数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数字可以说是数字、字符串或者是二进制序列。并且，每个节点还可以拥有N个子节点，最上层是根节点使用\"/\"来表示。每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最先单元。并且，每个znode都只有一个唯一的路径标识。\n\n强调一句👿：**ZooKeeper主要是用来协调服务，而不是用来存储业务数据的，所以，不要放比较大的数据在znode上，ZooKeeper给出的上线是每个结点的数据大小最大是1M。**\n\n从下图可以更直观地看出：ZooKeeper节点路径标识方式和Unix文件系统路径非常相似，都是由一系列使用\"/\"进行分割的路径表示，开发人员可以想这个结点中写入数据，也可以在节点下面创建子节点。\n这些操作后面我们来实操一下。\n![](https://javaguide.cn/assets/znode-structure.19119dbd.png)\n\n## 3.2 znode（数据节点）\n介绍了ZooKeeper树形数据模型之后，我们知道每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最小单元。你要存放的数据就放在上面，是你使用ZooKeeper过程中经常需要接触到的一个概念。\n\n### 3.2.1 znode的4中类型\n一般我们将znode分为4大类：\n- **持久（PERSISTENT）节点**：一旦创建就一直存在即使ZooKeeper集群宕机，直到将其删除。\n- **临时（EPHEMERAL）节点**：临时结点的生命周期是与**客户端会话（session）**绑定的，**会话消失则结点消失**。并且**临时结点只能做叶子结点**，不能创建子节点。\n- **持久顺序（PERSISTENT_SEQUENTIAL）节点**：除了具有持久（PERSISTENT）节点的特性之外，子节点的名称还具有顺序性。比如```/node1/00000000001```、```/node/00000000002```。\n- **临时顺序（EPHEMERAL_SEQUENTIAL）节点**：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。\n\n### 3.2.2 znode数据结构\n每个znode由2部分组成：\n- **stat**：状态信息。\n- **data**：节点存放的数据的具体内容。\n\n如下所示，我通过ZooKeeper的get命令来获取根目录下violet节点的内容。（get命令在下面会详细介绍哟）。\n```sh\n[zk: 127.0.0.1:2181(CONNECTED) 6] get /violet\n# 该数据节点关联的数据内容为空\nnull\n# 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出\ncZxid = 0x2\nctime = Tue Nov 27 18:05:34 CST 2022\nmZxid = 0x2\nmtime = Tue Nov 27 18:05:34 CST 2022\npZxid = 0x3\ncversion = 1\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 0\nnumChildren = 1\n```\n\nStat类中包含了一个数据节点的所有状态信息的字段，包括事务ID-cZxid、节点创建时间-ctime和子节点个数-numChidren等等。\n\n下面我们来看一下每个znode状态信息究竟代表的是什么吧！（下面的内容来源于《从Paxos到Zookeeper  分布式一致性原理与实践》，因为松松也不是特别清楚，要学会参考资料哟）：\n\n| **znode状态信息**|**解释**|\n|--|--|\n| cZxid|create ZXID，即该数据节点被创建时的事务id|\n|ctime|create time, 即该节点的创建时间|\n|mZxid|modified ZXID，即该节点最终一次更新时的事务id|\n|mtime|modified time，即该节点最后一次的更新时间|\n|pZxid|该节点的子节点列表最后一次修改时的事务id，只有子节点列表变更才会更新pZxid，子节点内容变更不会更新|\n|cversion|子节点版本号，当前节点的子节点每次变化时值增加1|\n|dataVersion|数据节点内容版本号，节点创建时为0，每更新一次节点内容（不管内容有无变化）该版本号的值增加1|\n|aclVersion|节点的ACL版本号，表示该节点ACL信息变更次数|\n|ephemeralOwner|创建该临时节点的会话的sessionid：如果当前节点为持久节点，则ephemeralOwner=0|\n|dataLength|数据节点内容长度|\n|numChildren|当前节点的子节点个数|\n\n## 3.3 版本（version）\n在前面我们已经提到，对应每个znode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个znode的三个相关的版本：\n- **dataVersion**：当前znode节点的版本号。\n- **cversion**：当前znode子节点的版本。\n- **aclVersion**：当前znode的ACL的版本号。\n\n## 3.4 ACL（权限控制）\nZooKeeper采用ACL（AccessControlLists）策略来进行权限控制，类似于UNIX文件系统的权限控制。\n\n对于znode操作的权限，ZooKeeper提供了以下5种：\n- **CREATE**：能创建子节点\n- **READ**：能获取节点数据和列出其子节点\n- **WRITE**：能设置/更新节点数据\n- **DELETE**：能删除子节点\n- **ADMIN**: 能设置节点ACL的权限\n\n其中尤其需要注意的是， CREATE和DELETE这两种权限都是针对子节点的权限控制。\n\n对于身份认证，提供了以下几种方式：\n- **world**：默认方式，所有用户都可无条件访问。\n- **auth**：不适用任何id，代表任何已认证的用户。\n- **digest**：用户名：密码认证方式：username:password。\n- **ip**：对指定ip进行限制。\n\n## 3.5 Watcher（事件监听器）\nWatcher（事件监听器），是ZooKeeper中的一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知感兴趣的客户端上去，该机制是ZooKeeper实现分布式协调服务的重要特性。\n![](https://javaguide.cn/assets/watche%E6%9C%BA%E5%88%B6.f523bd89.png)\n王之怒吼👿：非常有用的一个特性，都拿出小本本记好了，后面用到ZooKeeper基本离不开Watcher（事件监听）机制。\n\n## 3.6 会话（Session）\nSession 可以看做是ZooKeeper服务器与客户端之间的一个TCP长连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZooKeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watcher事件通知。\n\nSession有一个属性叫作：sessionTimeout，sessionTimeout代表会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话依然有效。\n\n另外，在为客户端创建会话之前，服务端首先会为每个客户端都分配一个sessionID。由于sessionID是ZooKeeper会话的一个重要标识，许多与会话相关的运行机制都是基于这个sessionID的，因此，无论是哪台服务器为客户端分配的sessionID，都务必保证全局唯一。\n\n# 4. ZooKeeper集群\n为了保证高可用，最好是以集群形态来部署ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么ZooKeeper本身仍然是可用的。通常3台服务器就可以构成一个ZooKeeper集群了。ZooKeeper官方提供的架构图就是一个ZooKeeper集群整体对外提供服务。\n![](https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4.6fdcc61e.png)\n上图中每一个Server代表一个安装ZooKeeper服务的服务器。组成ZooKeeper服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都保持着通信。集群间通过ZAB协议（ZooKeeper Atomic Broadcast）来保持数据的一致性。\n\n**最典型集群模式**：**Master/Slave模式（主备模式）。在这种模式中，通常Master服务器作为主服务器提供写服务，其他的Slave服务器从服务器通过异步复制的方式获取Master服务器最新的数据提供读服务。\n\n### 4.1 ZooKeeper集群角色\n但是，在ZooKeeper中没有选择传统的Master/Slave概念，而是引入了Leader、Follower和Observer三种角色。如下图所示\n![](https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.ffff8ef5.png)\nZooKeeper集群中的所有机器通过一个Leader**选举过程**来选定一台称为\"Leader\"的机器，Leader既可以为客户端提供写服务又能提供读服务。除了Leader外，**Follower**和**Observer**都只能提供读服务。Follower和Observer唯一的区别在于Observer机器不参与Leader的选举过程，也不参与写操作的\"过半写成功\"策略，因此Observer机器可以在不影响写性能的情况下提升集群的读性能。\n\n|角色|说明|\n|-|-|\n|Leader|为客户提供读和写的服务，负责投票的发起和决议，更新系统状态。|\n|Follower|为客户端提供读服务，如果是写服务则转发给Leader。参与选举过程中的投票。|\n|Observer|为客户端提供读服务，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与\"过半写成功\"策略。在不影响写性能的情况下提升集群的读性能。此角色于ZooKeeper3.3系列新增的角色。|\n\n当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，就会进入Leader选举过程，这个过程会选举产生新的Leader服务器。\n\n这个过程大概是这样子的：\n1. Leader election在（选举阶段）：节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准leader。\n2. Discovery（发现阶段）：在这个阶段，followers跟准leader进行通信，同步followers最近接收的事务提议。\n3. Synchronization（同步阶段）：同步阶段主要是利用leader前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后准leader才会成为真正的leader。\n4. Broadcast（广播阶段）：到了这个阶段，ZooKeeper集群才能正式对外提供事务服务，并且leader可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。\n\n### 4.2 ZooKeeper集群中的服务器状态\n- **LOOKING**：寻找Leader。\n- **LEADING**：Leader状态，对应的节点为Leader。\n- **FOLLOWING**：Follower状态，对应的节点为Follower。\n- **OBSERVING**：Observer状态，对应节点为Observer，该节点不参与Leader选举。\n\n### 4.3 ZooKeeper集群为啥最好是奇数台？\nZooKeeper集群在宕掉几个ZooKeeper服务器之后，如果剩下的ZooKeeper服务器个数大于宕掉的个数的话整个ZooKeeper才依然可用。假如我们的集群中有n台ZooKeeper服务器，那么也就是剩下的服务数必须大于n/2。先说一下结论，2n和2n-1的容忍度是一样的，都是n-1，大家可以先自己仔细想一想。\n\n比如：假如我们有3台，那么最大允许宕掉1台ZooKeeper服务器，如果我们有4台的的时候也同样只允许宕掉1台。 假如我们有5台，那么最大允许宕掉2台ZooKeeper服务器，如果我们有6台的的时候也同样只允许宕掉2台。\n\n综上，何必增加那一个不必要的ZooKeeper服务器呢？\n\n### 4.4 ZooKeeper选举的过半机制防止脑裂\n##### 何为集群脑裂？\n对于一个集群，通常多台机器会部署在不同机房，来提高这个集群的可用性。保证可用性的同时，会发生一种机房间网络线路故障，导致机房间网络不通，而集群被割裂成几个小集群。这时候子集群各自选主导致\"脑裂\"的情况。\n\n举例说明：比如现在有一个由6台服务器所组成的一个集群，部署在了2个机房，每个机房3台。正常情况下只有1个leader，但是当两个机房中间网络断开的时候，每个机房的3台服务器都会认为另一个机房的3台服务器下线，而选出自己的leader并对外提供服务。若没有过半机制，当网络恢复的时候会发现有2个leader。仿佛是1个大脑（leader）分散成了2个大脑，这就发生了脑裂现象。脑裂期间2个大脑都可能对外提供服务，这将会带来数据一致性等问题。\n\n##### 过半机制是如何防止脑裂现象产生的？\nZooKeeper的过半机制导致不可能产生2个leader，因为少于等于一半是不可能产生leader的，这就使得不论机房的机器如何分配都不可能发生脑裂。\n\n# 5. ZAB协议和Paxos算法\nPaxos算法应该可以说是ZooKeeer的灵魂了。但是，ZooKeeper并没有完全采用Paxos算法，而是使用ZAB协议作为其保证数据一致性的核心算法。另外，在ZooKeeper的官方文档中也指出，ZAB协议并不想Paxos算法那样，是一种通用的分布式一致性算法，它是一种特别为ZooKeeper设计的崩溃可恢复的原子消息广播算法。\n\n### 5.1 ZAB协议介绍\nZAB（ZooKeeper Atomic Broadcast 原子广播）协议是为分布式协调服务ZooKeeper专门设计的一种支持崩溃恢复的原子广播协议。在ZooKeeper中，主要依赖ZAB协议来实现分布式数据一致性，基于该协议，ZooKeeper实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。\n\n### 5.2 ZAB协议两种基本的模式：崩溃恢复和消息广播\n\nZAB协议包括两种基本的模式，分别是\n- **崩溃恢复**：当整个服务框架在启动过程中，或是当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB协议就会进入恢复模式并选举产生新的Leader服务器。当选举产生了新的Leader服务器，同时集群中已经有过半的机器与该Leader服务器完成了状态同步之后，ZAB协议就会退出恢复模式。其中，**所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和Leader服务器的数据状态保持一致**。\n- **消息广播：当集群中已经有过半的Follwer服务器完成了和Leader服务器的状态同步，name整个服务框架就可以进入消息广播模式了**。当一台同样遵守ZAB协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个Leader服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到Leader所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。\n\n\n# 6. 总结\n1. ZooKeeper 本身就是一个分布式程序（只要半数以上节点存活，ZooKeeper 就能正常服务）。\n2. 为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 ZooKeeper 本身仍然是可用的。\n3. ZooKeeper 将数据保存在内存中，这也就保证了 高吞吐量和低延迟（但是内存限制了能够存储的容量不太大，此限制也是保持 znode 中存储的数据量较小的进一步原因）。\n4. ZooKeeper 是高性能的。 在“读”多于“写”的应用程序中尤其地明显，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景。）\n5. ZooKeeper 有临时节点的概念。 当创建临时节点的客户端会话一直保持活动，瞬时节点就一直存在。而当会话终结时，瞬时节点被删除。持久节点是指一旦这个 znode 被创建了，除非主动进行 znode 的移除操作，否则这个 znode 将一直保存在 ZooKeeper 上。\n6. ZooKeeper 底层其实只提供了两个功能：① 管理（存储、读取）用户程序提交的数据；② 为用户程序提供数据节点监听服务。\n# 7. 参考\n1. [《JavaGuide》——ZooKeeper相关概念总结（入门）](https://javaguide.cn/)\n2. 《从 Paxos 到 ZooKeeper 分布式一致性原理与实践》","slug":"distributed/zookeeper/zookeeper入门","published":1,"updated":"2022-06-07T07:08:21.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl43v16db000sb6jh1r6n39b4","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言<br/></h1><p>在此刻的我并不知道zookeeper是什么，我听到zookeeper的第一感觉就是这家伙是啥啊，对的，前言就这么短，因为我也不知道它是啥，也没怎么用。——2022-03-25 11:09:47</p>\n<h1 id=\"2-ZooKeeper介绍\"><a href=\"#2-ZooKeeper介绍\" class=\"headerlink\" title=\"2. ZooKeeper介绍\"></a>2. ZooKeeper介绍<br/></h1><h2 id=\"2-1-ZooKeeper名字的由来\"><a href=\"#2-1-ZooKeeper名字的由来\" class=\"headerlink\" title=\"2.1 ZooKeeper名字的由来\"></a>2.1 ZooKeeper名字的由来</h2><p>学习一样东西的时候，个人觉得最好是先了解它是怎么出现在人们眼前的，然后出现了之后是怎么慢慢地被人们使用的，使用后怎样被人们慢慢扩展的。<br>这里介绍一下它的由来（摘自《从Paxos到Zookeeper  分布式一致性原理与实践 [倪超著][电子工业出版社]》）：</p>\n<blockquote>\n<p>ZooKeeper最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。关于 “ZooKeeper” 这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目），雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 Raghu Ramakrishnan 开玩笑地说：”再这样下去，我们这儿就变成动物园了！”此话一出，大家纷纷表示就叫动物园管理员吧——因为各个以动物园命名的分布式组件放在一起，雅虎整个分布式系统看上去就像一个大型的动物园了，而ZooKeeper正好要用来进行分布式环境的协调——于是，ZooKeeper的名字也就由此诞生了。</p>\n</blockquote>\n<p>看完ZooKeeper名字的由来是不是有点想笑，传奇的分布式协调框架就由此被命名了，这名字像是不要钱想的一样😂不过也能理解，开发人员都是可爱的😆</p>\n<h2 id=\"2-2-ZooKeeper概述\"><a href=\"#2-2-ZooKeeper概述\" class=\"headerlink\" title=\"2.2 ZooKeeper概述\"></a>2.2 ZooKeeper概述</h2><p>ZooKeeper他是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p>\n<blockquote>\n<p>原语：一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。</p>\n</blockquote>\n<p>ZooKeeper为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调、通知、集群管理、Master选举、分布式锁和分布式队列等功能。</p>\n<p>此外，ZooKeeper将数据保存在内存中，性能是非常棒的。在”读”多于”写”的应用程序中尤其地高性能，因为”写”会导致所有的服务器进行数据同步。(“读”多于”写”是协调服务的典型场景)。</p>\n<h2 id=\"2-3-ZooKeeper特点\"><a href=\"#2-3-ZooKeeper特点\" class=\"headerlink\" title=\"2.3 ZooKeeper特点\"></a>2.3 ZooKeeper特点</h2><ul>\n<li><strong>顺序一致性</strong>：从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到ZooKeeper中去。</li>\n<li><strong>原子性</strong>：所有事务的请求处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功地应用了某一个事务，要么都没有应用。</li>\n<li><strong>单一系统映像</strong>：无论客户端连接到哪一个ZooKeeper服务器上，其看到的服务端数据模型都是一致的。</li>\n<li><strong>可靠性</strong>：任何一次更改请求被应用，更改的结果就会被持久化，知道被下一次更改覆盖。</li>\n</ul>\n<h2 id=\"2-4-ZooKeeper典型应用场景\"><a href=\"#2-4-ZooKeeper典型应用场景\" class=\"headerlink\" title=\"2.4 ZooKeeper典型应用场景\"></a>2.4 ZooKeeper典型应用场景</h2><p>ZooKeeper概述中，我们介绍到使用其通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。</p>\n<p>下面选3个典型的应用场景来专门说说(后续更新具体代码逻辑)：</p>\n<ol>\n<li><strong>分布式锁</strong>：通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放。</li>\n<li><strong>命名服务</strong>：可以通过ZooKeeper的顺序节点生成全局唯一ID。</li>\n<li><strong>数据发布/订阅</strong>：通过Watcher机制可以很方便地实现数据发布/订阅。当你将数据发布到ZooKeeper被监听的节点上，其他机器可通过监听ZooKeeper上的节点的变化来实现配置的动态更新。</li>\n</ol>\n<p>实际上，这些功能的实现基本上都得益于ZooKeeper可以保存数据的功能，但是ZooKeeper不适合保存大量数据，这一点需要注意一下😤</p>\n<h1 id=\"3-ZooKeeper的功能\"><a href=\"#3-ZooKeeper的功能\" class=\"headerlink\" title=\"3. ZooKeeper的功能\"></a>3. ZooKeeper的功能<br/></h1><p>友情提示👿：拿出小本本，下面的内容非常重要啊哈</p>\n<h2 id=\"3-1-Data-model（数据模型）\"><a href=\"#3-1-Data-model（数据模型）\" class=\"headerlink\" title=\"3.1 Data model（数据模型）\"></a>3.1 Data model（数据模型）</h2><p>ZooKeeper数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数字可以说是数字、字符串或者是二进制序列。并且，每个节点还可以拥有N个子节点，最上层是根节点使用”/“来表示。每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最先单元。并且，每个znode都只有一个唯一的路径标识。</p>\n<p>强调一句👿：<strong>ZooKeeper主要是用来协调服务，而不是用来存储业务数据的，所以，不要放比较大的数据在znode上，ZooKeeper给出的上线是每个结点的数据大小最大是1M。</strong></p>\n<p>从下图可以更直观地看出：ZooKeeper节点路径标识方式和Unix文件系统路径非常相似，都是由一系列使用”/“进行分割的路径表示，开发人员可以想这个结点中写入数据，也可以在节点下面创建子节点。<br>这些操作后面我们来实操一下。<br><img src=\"https://javaguide.cn/assets/znode-structure.19119dbd.png\"></p>\n<h2 id=\"3-2-znode（数据节点）\"><a href=\"#3-2-znode（数据节点）\" class=\"headerlink\" title=\"3.2 znode（数据节点）\"></a>3.2 znode（数据节点）</h2><p>介绍了ZooKeeper树形数据模型之后，我们知道每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最小单元。你要存放的数据就放在上面，是你使用ZooKeeper过程中经常需要接触到的一个概念。</p>\n<h3 id=\"3-2-1-znode的4中类型\"><a href=\"#3-2-1-znode的4中类型\" class=\"headerlink\" title=\"3.2.1 znode的4中类型\"></a>3.2.1 znode的4中类型</h3><p>一般我们将znode分为4大类：</p>\n<ul>\n<li><strong>持久（PERSISTENT）节点</strong>：一旦创建就一直存在即使ZooKeeper集群宕机，直到将其删除。</li>\n<li><strong>临时（EPHEMERAL）节点</strong>：临时结点的生命周期是与<strong>客户端会话（session）</strong>绑定的，<strong>会话消失则结点消失</strong>。并且<strong>临时结点只能做叶子结点</strong>，不能创建子节点。</li>\n<li><strong>持久顺序（PERSISTENT_SEQUENTIAL）节点</strong>：除了具有持久（PERSISTENT）节点的特性之外，子节点的名称还具有顺序性。比如<code>/node1/00000000001</code>、<code>/node/00000000002</code>。</li>\n<li><strong>临时顺序（EPHEMERAL_SEQUENTIAL）节点</strong>：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。</li>\n</ul>\n<h3 id=\"3-2-2-znode数据结构\"><a href=\"#3-2-2-znode数据结构\" class=\"headerlink\" title=\"3.2.2 znode数据结构\"></a>3.2.2 znode数据结构</h3><p>每个znode由2部分组成：</p>\n<ul>\n<li><strong>stat</strong>：状态信息。</li>\n<li><strong>data</strong>：节点存放的数据的具体内容。</li>\n</ul>\n<p>如下所示，我通过ZooKeeper的get命令来获取根目录下violet节点的内容。（get命令在下面会详细介绍哟）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter hljs\"><div class=\"hljs code-wrapper\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></div></td><td class=\"code\"><div class=\"hljs code-wrapper\"><pre><code class=\"hljs sh\">[zk: 127.0.0.1:2181(CONNECTED) 6] get /violet<br><span class=\"hljs-comment\"># 该数据节点关联的数据内容为空</span><br>null<br><span class=\"hljs-comment\"># 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出</span><br>cZxid = 0x2<br>ctime = Tue Nov 27 18:05:34 CST 2022<br>mZxid = 0x2<br>mtime = Tue Nov 27 18:05:34 CST 2022<br>pZxid = 0x3<br>cversion = 1<br>dataVersion = 0<br>aclVersion = 0<br>ephemeralOwner = 0x0<br>dataLength = 0<br>numChildren = 1<br></code></pre></div></td></tr></table></figure>\n\n<p>Stat类中包含了一个数据节点的所有状态信息的字段，包括事务ID-cZxid、节点创建时间-ctime和子节点个数-numChidren等等。</p>\n<p>下面我们来看一下每个znode状态信息究竟代表的是什么吧！（下面的内容来源于《从Paxos到Zookeeper  分布式一致性原理与实践》，因为松松也不是特别清楚，要学会参考资料哟）：</p>\n<table>\n<thead>\n<tr>\n<th><strong>znode状态信息</strong></th>\n<th><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cZxid</td>\n<td>create ZXID，即该数据节点被创建时的事务id</td>\n</tr>\n<tr>\n<td>ctime</td>\n<td>create time, 即该节点的创建时间</td>\n</tr>\n<tr>\n<td>mZxid</td>\n<td>modified ZXID，即该节点最终一次更新时的事务id</td>\n</tr>\n<tr>\n<td>mtime</td>\n<td>modified time，即该节点最后一次的更新时间</td>\n</tr>\n<tr>\n<td>pZxid</td>\n<td>该节点的子节点列表最后一次修改时的事务id，只有子节点列表变更才会更新pZxid，子节点内容变更不会更新</td>\n</tr>\n<tr>\n<td>cversion</td>\n<td>子节点版本号，当前节点的子节点每次变化时值增加1</td>\n</tr>\n<tr>\n<td>dataVersion</td>\n<td>数据节点内容版本号，节点创建时为0，每更新一次节点内容（不管内容有无变化）该版本号的值增加1</td>\n</tr>\n<tr>\n<td>aclVersion</td>\n<td>节点的ACL版本号，表示该节点ACL信息变更次数</td>\n</tr>\n<tr>\n<td>ephemeralOwner</td>\n<td>创建该临时节点的会话的sessionid：如果当前节点为持久节点，则ephemeralOwner=0</td>\n</tr>\n<tr>\n<td>dataLength</td>\n<td>数据节点内容长度</td>\n</tr>\n<tr>\n<td>numChildren</td>\n<td>当前节点的子节点个数</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-3-版本（version）\"><a href=\"#3-3-版本（version）\" class=\"headerlink\" title=\"3.3 版本（version）\"></a>3.3 版本（version）</h2><p>在前面我们已经提到，对应每个znode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个znode的三个相关的版本：</p>\n<ul>\n<li><strong>dataVersion</strong>：当前znode节点的版本号。</li>\n<li><strong>cversion</strong>：当前znode子节点的版本。</li>\n<li><strong>aclVersion</strong>：当前znode的ACL的版本号。</li>\n</ul>\n<h2 id=\"3-4-ACL（权限控制）\"><a href=\"#3-4-ACL（权限控制）\" class=\"headerlink\" title=\"3.4 ACL（权限控制）\"></a>3.4 ACL（权限控制）</h2><p>ZooKeeper采用ACL（AccessControlLists）策略来进行权限控制，类似于UNIX文件系统的权限控制。</p>\n<p>对于znode操作的权限，ZooKeeper提供了以下5种：</p>\n<ul>\n<li><strong>CREATE</strong>：能创建子节点</li>\n<li><strong>READ</strong>：能获取节点数据和列出其子节点</li>\n<li><strong>WRITE</strong>：能设置/更新节点数据</li>\n<li><strong>DELETE</strong>：能删除子节点</li>\n<li><strong>ADMIN</strong>: 能设置节点ACL的权限</li>\n</ul>\n<p>其中尤其需要注意的是， CREATE和DELETE这两种权限都是针对子节点的权限控制。</p>\n<p>对于身份认证，提供了以下几种方式：</p>\n<ul>\n<li><strong>world</strong>：默认方式，所有用户都可无条件访问。</li>\n<li><strong>auth</strong>：不适用任何id，代表任何已认证的用户。</li>\n<li><strong>digest</strong>：用户名：密码认证方式：username:password。</li>\n<li><strong>ip</strong>：对指定ip进行限制。</li>\n</ul>\n<h2 id=\"3-5-Watcher（事件监听器）\"><a href=\"#3-5-Watcher（事件监听器）\" class=\"headerlink\" title=\"3.5 Watcher（事件监听器）\"></a>3.5 Watcher（事件监听器）</h2><p>Watcher（事件监听器），是ZooKeeper中的一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知感兴趣的客户端上去，该机制是ZooKeeper实现分布式协调服务的重要特性。<br><img src=\"https://javaguide.cn/assets/watche%E6%9C%BA%E5%88%B6.f523bd89.png\"><br>王之怒吼👿：非常有用的一个特性，都拿出小本本记好了，后面用到ZooKeeper基本离不开Watcher（事件监听）机制。</p>\n<h2 id=\"3-6-会话（Session）\"><a href=\"#3-6-会话（Session）\" class=\"headerlink\" title=\"3.6 会话（Session）\"></a>3.6 会话（Session）</h2><p>Session 可以看做是ZooKeeper服务器与客户端之间的一个TCP长连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZooKeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watcher事件通知。</p>\n<p>Session有一个属性叫作：sessionTimeout，sessionTimeout代表会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话依然有效。</p>\n<p>另外，在为客户端创建会话之前，服务端首先会为每个客户端都分配一个sessionID。由于sessionID是ZooKeeper会话的一个重要标识，许多与会话相关的运行机制都是基于这个sessionID的，因此，无论是哪台服务器为客户端分配的sessionID，都务必保证全局唯一。</p>\n<h1 id=\"4-ZooKeeper集群\"><a href=\"#4-ZooKeeper集群\" class=\"headerlink\" title=\"4. ZooKeeper集群\"></a>4. ZooKeeper集群</h1><p>为了保证高可用，最好是以集群形态来部署ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么ZooKeeper本身仍然是可用的。通常3台服务器就可以构成一个ZooKeeper集群了。ZooKeeper官方提供的架构图就是一个ZooKeeper集群整体对外提供服务。<br><img src=\"https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4.6fdcc61e.png\"><br>上图中每一个Server代表一个安装ZooKeeper服务的服务器。组成ZooKeeper服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都保持着通信。集群间通过ZAB协议（ZooKeeper Atomic Broadcast）来保持数据的一致性。</p>\n<p><strong>最典型集群模式</strong>：**Master/Slave模式（主备模式）。在这种模式中，通常Master服务器作为主服务器提供写服务，其他的Slave服务器从服务器通过异步复制的方式获取Master服务器最新的数据提供读服务。</p>\n<h3 id=\"4-1-ZooKeeper集群角色\"><a href=\"#4-1-ZooKeeper集群角色\" class=\"headerlink\" title=\"4.1 ZooKeeper集群角色\"></a>4.1 ZooKeeper集群角色</h3><p>但是，在ZooKeeper中没有选择传统的Master/Slave概念，而是引入了Leader、Follower和Observer三种角色。如下图所示<br><img src=\"https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.ffff8ef5.png\"><br>ZooKeeper集群中的所有机器通过一个Leader<strong>选举过程</strong>来选定一台称为”Leader”的机器，Leader既可以为客户端提供写服务又能提供读服务。除了Leader外，<strong>Follower</strong>和<strong>Observer</strong>都只能提供读服务。Follower和Observer唯一的区别在于Observer机器不参与Leader的选举过程，也不参与写操作的”过半写成功”策略，因此Observer机器可以在不影响写性能的情况下提升集群的读性能。</p>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Leader</td>\n<td>为客户提供读和写的服务，负责投票的发起和决议，更新系统状态。</td>\n</tr>\n<tr>\n<td>Follower</td>\n<td>为客户端提供读服务，如果是写服务则转发给Leader。参与选举过程中的投票。</td>\n</tr>\n<tr>\n<td>Observer</td>\n<td>为客户端提供读服务，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与”过半写成功”策略。在不影响写性能的情况下提升集群的读性能。此角色于ZooKeeper3.3系列新增的角色。</td>\n</tr>\n</tbody></table>\n<p>当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，就会进入Leader选举过程，这个过程会选举产生新的Leader服务器。</p>\n<p>这个过程大概是这样子的：</p>\n<ol>\n<li>Leader election在（选举阶段）：节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准leader。</li>\n<li>Discovery（发现阶段）：在这个阶段，followers跟准leader进行通信，同步followers最近接收的事务提议。</li>\n<li>Synchronization（同步阶段）：同步阶段主要是利用leader前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后准leader才会成为真正的leader。</li>\n<li>Broadcast（广播阶段）：到了这个阶段，ZooKeeper集群才能正式对外提供事务服务，并且leader可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。</li>\n</ol>\n<h3 id=\"4-2-ZooKeeper集群中的服务器状态\"><a href=\"#4-2-ZooKeeper集群中的服务器状态\" class=\"headerlink\" title=\"4.2 ZooKeeper集群中的服务器状态\"></a>4.2 ZooKeeper集群中的服务器状态</h3><ul>\n<li><strong>LOOKING</strong>：寻找Leader。</li>\n<li><strong>LEADING</strong>：Leader状态，对应的节点为Leader。</li>\n<li><strong>FOLLOWING</strong>：Follower状态，对应的节点为Follower。</li>\n<li><strong>OBSERVING</strong>：Observer状态，对应节点为Observer，该节点不参与Leader选举。</li>\n</ul>\n<h3 id=\"4-3-ZooKeeper集群为啥最好是奇数台？\"><a href=\"#4-3-ZooKeeper集群为啥最好是奇数台？\" class=\"headerlink\" title=\"4.3 ZooKeeper集群为啥最好是奇数台？\"></a>4.3 ZooKeeper集群为啥最好是奇数台？</h3><p>ZooKeeper集群在宕掉几个ZooKeeper服务器之后，如果剩下的ZooKeeper服务器个数大于宕掉的个数的话整个ZooKeeper才依然可用。假如我们的集群中有n台ZooKeeper服务器，那么也就是剩下的服务数必须大于n/2。先说一下结论，2n和2n-1的容忍度是一样的，都是n-1，大家可以先自己仔细想一想。</p>\n<p>比如：假如我们有3台，那么最大允许宕掉1台ZooKeeper服务器，如果我们有4台的的时候也同样只允许宕掉1台。 假如我们有5台，那么最大允许宕掉2台ZooKeeper服务器，如果我们有6台的的时候也同样只允许宕掉2台。</p>\n<p>综上，何必增加那一个不必要的ZooKeeper服务器呢？</p>\n<h3 id=\"4-4-ZooKeeper选举的过半机制防止脑裂\"><a href=\"#4-4-ZooKeeper选举的过半机制防止脑裂\" class=\"headerlink\" title=\"4.4 ZooKeeper选举的过半机制防止脑裂\"></a>4.4 ZooKeeper选举的过半机制防止脑裂</h3><h5 id=\"何为集群脑裂？\"><a href=\"#何为集群脑裂？\" class=\"headerlink\" title=\"何为集群脑裂？\"></a>何为集群脑裂？</h5><p>对于一个集群，通常多台机器会部署在不同机房，来提高这个集群的可用性。保证可用性的同时，会发生一种机房间网络线路故障，导致机房间网络不通，而集群被割裂成几个小集群。这时候子集群各自选主导致”脑裂”的情况。</p>\n<p>举例说明：比如现在有一个由6台服务器所组成的一个集群，部署在了2个机房，每个机房3台。正常情况下只有1个leader，但是当两个机房中间网络断开的时候，每个机房的3台服务器都会认为另一个机房的3台服务器下线，而选出自己的leader并对外提供服务。若没有过半机制，当网络恢复的时候会发现有2个leader。仿佛是1个大脑（leader）分散成了2个大脑，这就发生了脑裂现象。脑裂期间2个大脑都可能对外提供服务，这将会带来数据一致性等问题。</p>\n<h5 id=\"过半机制是如何防止脑裂现象产生的？\"><a href=\"#过半机制是如何防止脑裂现象产生的？\" class=\"headerlink\" title=\"过半机制是如何防止脑裂现象产生的？\"></a>过半机制是如何防止脑裂现象产生的？</h5><p>ZooKeeper的过半机制导致不可能产生2个leader，因为少于等于一半是不可能产生leader的，这就使得不论机房的机器如何分配都不可能发生脑裂。</p>\n<h1 id=\"5-ZAB协议和Paxos算法\"><a href=\"#5-ZAB协议和Paxos算法\" class=\"headerlink\" title=\"5. ZAB协议和Paxos算法\"></a>5. ZAB协议和Paxos算法</h1><p>Paxos算法应该可以说是ZooKeeer的灵魂了。但是，ZooKeeper并没有完全采用Paxos算法，而是使用ZAB协议作为其保证数据一致性的核心算法。另外，在ZooKeeper的官方文档中也指出，ZAB协议并不想Paxos算法那样，是一种通用的分布式一致性算法，它是一种特别为ZooKeeper设计的崩溃可恢复的原子消息广播算法。</p>\n<h3 id=\"5-1-ZAB协议介绍\"><a href=\"#5-1-ZAB协议介绍\" class=\"headerlink\" title=\"5.1 ZAB协议介绍\"></a>5.1 ZAB协议介绍</h3><p>ZAB（ZooKeeper Atomic Broadcast 原子广播）协议是为分布式协调服务ZooKeeper专门设计的一种支持崩溃恢复的原子广播协议。在ZooKeeper中，主要依赖ZAB协议来实现分布式数据一致性，基于该协议，ZooKeeper实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</p>\n<h3 id=\"5-2-ZAB协议两种基本的模式：崩溃恢复和消息广播\"><a href=\"#5-2-ZAB协议两种基本的模式：崩溃恢复和消息广播\" class=\"headerlink\" title=\"5.2 ZAB协议两种基本的模式：崩溃恢复和消息广播\"></a>5.2 ZAB协议两种基本的模式：崩溃恢复和消息广播</h3><p>ZAB协议包括两种基本的模式，分别是</p>\n<ul>\n<li><strong>崩溃恢复</strong>：当整个服务框架在启动过程中，或是当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB协议就会进入恢复模式并选举产生新的Leader服务器。当选举产生了新的Leader服务器，同时集群中已经有过半的机器与该Leader服务器完成了状态同步之后，ZAB协议就会退出恢复模式。其中，<strong>所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和Leader服务器的数据状态保持一致</strong>。</li>\n<li><strong>消息广播：当集群中已经有过半的Follwer服务器完成了和Leader服务器的状态同步，name整个服务框架就可以进入消息广播模式了</strong>。当一台同样遵守ZAB协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个Leader服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到Leader所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。</li>\n</ul>\n<h1 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h1><ol>\n<li>ZooKeeper 本身就是一个分布式程序（只要半数以上节点存活，ZooKeeper 就能正常服务）。</li>\n<li>为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 ZooKeeper 本身仍然是可用的。</li>\n<li>ZooKeeper 将数据保存在内存中，这也就保证了 高吞吐量和低延迟（但是内存限制了能够存储的容量不太大，此限制也是保持 znode 中存储的数据量较小的进一步原因）。</li>\n<li>ZooKeeper 是高性能的。 在“读”多于“写”的应用程序中尤其地明显，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景。）</li>\n<li>ZooKeeper 有临时节点的概念。 当创建临时节点的客户端会话一直保持活动，瞬时节点就一直存在。而当会话终结时，瞬时节点被删除。持久节点是指一旦这个 znode 被创建了，除非主动进行 znode 的移除操作，否则这个 znode 将一直保存在 ZooKeeper 上。</li>\n<li>ZooKeeper 底层其实只提供了两个功能：① 管理（存储、读取）用户程序提交的数据；② 为用户程序提供数据节点监听服务。<h1 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7. 参考\"></a>7. 参考</h1></li>\n<li><a href=\"https://javaguide.cn/\">《JavaGuide》——ZooKeeper相关概念总结（入门）</a></li>\n<li>《从 Paxos 到 ZooKeeper 分布式一致性原理与实践》</li>\n</ol>\n","site":{"data":{}},"wordcount":8195,"excerpt":"","more":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1. 前言\"></a>1. 前言<br/></h1><p>在此刻的我并不知道zookeeper是什么，我听到zookeeper的第一感觉就是这家伙是啥啊，对的，前言就这么短，因为我也不知道它是啥，也没怎么用。——2022-03-25 11:09:47</p>\n<h1 id=\"2-ZooKeeper介绍\"><a href=\"#2-ZooKeeper介绍\" class=\"headerlink\" title=\"2. ZooKeeper介绍\"></a>2. ZooKeeper介绍<br/></h1><h2 id=\"2-1-ZooKeeper名字的由来\"><a href=\"#2-1-ZooKeeper名字的由来\" class=\"headerlink\" title=\"2.1 ZooKeeper名字的由来\"></a>2.1 ZooKeeper名字的由来</h2><p>学习一样东西的时候，个人觉得最好是先了解它是怎么出现在人们眼前的，然后出现了之后是怎么慢慢地被人们使用的，使用后怎样被人们慢慢扩展的。<br>这里介绍一下它的由来（摘自《从Paxos到Zookeeper  分布式一致性原理与实践 [倪超著][电子工业出版社]》）：</p>\n<blockquote>\n<p>ZooKeeper最早起源于雅虎研究院的一个研究小组。在当时，研究人员发现，在雅虎内部很多大型系统基本都需要依赖一个类似的系统来进行分布式协调，但是这些系统往往都存在分布式单点问题。所以雅虎的开发人员就试图开发一个通用的无单点问题的分布式协调框架，以便让开发人员将精力集中在处理业务逻辑上。关于 “ZooKeeper” 这个项目的名字，其实也有一段趣闻。在立项初期，考虑到之前内部很多项目都是使用动物的名字来命名的（例如著名的Pig项目），雅虎的工程师希望给这个项目也取一个动物的名字。时任研究院的首席科学家 Raghu Ramakrishnan 开玩笑地说：”再这样下去，我们这儿就变成动物园了！”此话一出，大家纷纷表示就叫动物园管理员吧——因为各个以动物园命名的分布式组件放在一起，雅虎整个分布式系统看上去就像一个大型的动物园了，而ZooKeeper正好要用来进行分布式环境的协调——于是，ZooKeeper的名字也就由此诞生了。</p>\n</blockquote>\n<p>看完ZooKeeper名字的由来是不是有点想笑，传奇的分布式协调框架就由此被命名了，这名字像是不要钱想的一样😂不过也能理解，开发人员都是可爱的😆</p>\n<h2 id=\"2-2-ZooKeeper概述\"><a href=\"#2-2-ZooKeeper概述\" class=\"headerlink\" title=\"2.2 ZooKeeper概述\"></a>2.2 ZooKeeper概述</h2><p>ZooKeeper他是一个开源的分布式协调服务，它的设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p>\n<blockquote>\n<p>原语：一般是指由若干条指令组成的程序段，用来实现某个特定功能，在执行过程中不可被中断。</p>\n</blockquote>\n<p>ZooKeeper为我们提供了高可用、高性能、稳定的分布式数据一致性解决方案，通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调、通知、集群管理、Master选举、分布式锁和分布式队列等功能。</p>\n<p>此外，ZooKeeper将数据保存在内存中，性能是非常棒的。在”读”多于”写”的应用程序中尤其地高性能，因为”写”会导致所有的服务器进行数据同步。(“读”多于”写”是协调服务的典型场景)。</p>\n<h2 id=\"2-3-ZooKeeper特点\"><a href=\"#2-3-ZooKeeper特点\" class=\"headerlink\" title=\"2.3 ZooKeeper特点\"></a>2.3 ZooKeeper特点</h2><ul>\n<li><strong>顺序一致性</strong>：从同一客户端发起的事务请求，最终将会严格地按照顺序被应用到ZooKeeper中去。</li>\n<li><strong>原子性</strong>：所有事务的请求处理结果在整个集群中所有机器上的应用情况是一致的，也就是说，要么整个集群中所有的机器都成功地应用了某一个事务，要么都没有应用。</li>\n<li><strong>单一系统映像</strong>：无论客户端连接到哪一个ZooKeeper服务器上，其看到的服务端数据模型都是一致的。</li>\n<li><strong>可靠性</strong>：任何一次更改请求被应用，更改的结果就会被持久化，知道被下一次更改覆盖。</li>\n</ul>\n<h2 id=\"2-4-ZooKeeper典型应用场景\"><a href=\"#2-4-ZooKeeper典型应用场景\" class=\"headerlink\" title=\"2.4 ZooKeeper典型应用场景\"></a>2.4 ZooKeeper典型应用场景</h2><p>ZooKeeper概述中，我们介绍到使用其通常被用于实现诸如数据发布/订阅、负载均衡、命名服务、分布式协调/通知、集群管理、Master选举、分布式锁和分布式队列等功能。</p>\n<p>下面选3个典型的应用场景来专门说说(后续更新具体代码逻辑)：</p>\n<ol>\n<li><strong>分布式锁</strong>：通过创建唯一节点获得分布式锁，当获得锁的一方执行完相关代码或者是挂掉之后就释放。</li>\n<li><strong>命名服务</strong>：可以通过ZooKeeper的顺序节点生成全局唯一ID。</li>\n<li><strong>数据发布/订阅</strong>：通过Watcher机制可以很方便地实现数据发布/订阅。当你将数据发布到ZooKeeper被监听的节点上，其他机器可通过监听ZooKeeper上的节点的变化来实现配置的动态更新。</li>\n</ol>\n<p>实际上，这些功能的实现基本上都得益于ZooKeeper可以保存数据的功能，但是ZooKeeper不适合保存大量数据，这一点需要注意一下😤</p>\n<h1 id=\"3-ZooKeeper的功能\"><a href=\"#3-ZooKeeper的功能\" class=\"headerlink\" title=\"3. ZooKeeper的功能\"></a>3. ZooKeeper的功能<br/></h1><p>友情提示👿：拿出小本本，下面的内容非常重要啊哈</p>\n<h2 id=\"3-1-Data-model（数据模型）\"><a href=\"#3-1-Data-model（数据模型）\" class=\"headerlink\" title=\"3.1 Data model（数据模型）\"></a>3.1 Data model（数据模型）</h2><p>ZooKeeper数据模型采用层次化的多叉树形结构，每个节点上都可以存储数据，这些数字可以说是数字、字符串或者是二进制序列。并且，每个节点还可以拥有N个子节点，最上层是根节点使用”/“来表示。每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最先单元。并且，每个znode都只有一个唯一的路径标识。</p>\n<p>强调一句👿：<strong>ZooKeeper主要是用来协调服务，而不是用来存储业务数据的，所以，不要放比较大的数据在znode上，ZooKeeper给出的上线是每个结点的数据大小最大是1M。</strong></p>\n<p>从下图可以更直观地看出：ZooKeeper节点路径标识方式和Unix文件系统路径非常相似，都是由一系列使用”/“进行分割的路径表示，开发人员可以想这个结点中写入数据，也可以在节点下面创建子节点。<br>这些操作后面我们来实操一下。<br><img src=\"https://javaguide.cn/assets/znode-structure.19119dbd.png\"></p>\n<h2 id=\"3-2-znode（数据节点）\"><a href=\"#3-2-znode（数据节点）\" class=\"headerlink\" title=\"3.2 znode（数据节点）\"></a>3.2 znode（数据节点）</h2><p>介绍了ZooKeeper树形数据模型之后，我们知道每个数据节点在ZooKeeper中被称为znode，它是ZooKeeper中数据的最小单元。你要存放的数据就放在上面，是你使用ZooKeeper过程中经常需要接触到的一个概念。</p>\n<h3 id=\"3-2-1-znode的4中类型\"><a href=\"#3-2-1-znode的4中类型\" class=\"headerlink\" title=\"3.2.1 znode的4中类型\"></a>3.2.1 znode的4中类型</h3><p>一般我们将znode分为4大类：</p>\n<ul>\n<li><strong>持久（PERSISTENT）节点</strong>：一旦创建就一直存在即使ZooKeeper集群宕机，直到将其删除。</li>\n<li><strong>临时（EPHEMERAL）节点</strong>：临时结点的生命周期是与<strong>客户端会话（session）</strong>绑定的，<strong>会话消失则结点消失</strong>。并且<strong>临时结点只能做叶子结点</strong>，不能创建子节点。</li>\n<li><strong>持久顺序（PERSISTENT_SEQUENTIAL）节点</strong>：除了具有持久（PERSISTENT）节点的特性之外，子节点的名称还具有顺序性。比如<code>/node1/00000000001</code>、<code>/node/00000000002</code>。</li>\n<li><strong>临时顺序（EPHEMERAL_SEQUENTIAL）节点</strong>：除了具备临时（EPHEMERAL）节点的特性之外，子节点的名称还具有顺序性。</li>\n</ul>\n<h3 id=\"3-2-2-znode数据结构\"><a href=\"#3-2-2-znode数据结构\" class=\"headerlink\" title=\"3.2.2 znode数据结构\"></a>3.2.2 znode数据结构</h3><p>每个znode由2部分组成：</p>\n<ul>\n<li><strong>stat</strong>：状态信息。</li>\n<li><strong>data</strong>：节点存放的数据的具体内容。</li>\n</ul>\n<p>如下所示，我通过ZooKeeper的get命令来获取根目录下violet节点的内容。（get命令在下面会详细介绍哟）。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[zk: 127.0.0.1:2181(CONNECTED) 6] get /violet<br><span class=\"hljs-comment\"># 该数据节点关联的数据内容为空</span><br>null<br><span class=\"hljs-comment\"># 下面是该数据节点的一些状态信息，其实就是 Stat 对象的格式化输出</span><br>cZxid = 0x2<br>ctime = Tue Nov 27 18:05:34 CST 2022<br>mZxid = 0x2<br>mtime = Tue Nov 27 18:05:34 CST 2022<br>pZxid = 0x3<br>cversion = 1<br>dataVersion = 0<br>aclVersion = 0<br>ephemeralOwner = 0x0<br>dataLength = 0<br>numChildren = 1<br></code></pre></td></tr></table></figure>\n\n<p>Stat类中包含了一个数据节点的所有状态信息的字段，包括事务ID-cZxid、节点创建时间-ctime和子节点个数-numChidren等等。</p>\n<p>下面我们来看一下每个znode状态信息究竟代表的是什么吧！（下面的内容来源于《从Paxos到Zookeeper  分布式一致性原理与实践》，因为松松也不是特别清楚，要学会参考资料哟）：</p>\n<table>\n<thead>\n<tr>\n<th><strong>znode状态信息</strong></th>\n<th><strong>解释</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>cZxid</td>\n<td>create ZXID，即该数据节点被创建时的事务id</td>\n</tr>\n<tr>\n<td>ctime</td>\n<td>create time, 即该节点的创建时间</td>\n</tr>\n<tr>\n<td>mZxid</td>\n<td>modified ZXID，即该节点最终一次更新时的事务id</td>\n</tr>\n<tr>\n<td>mtime</td>\n<td>modified time，即该节点最后一次的更新时间</td>\n</tr>\n<tr>\n<td>pZxid</td>\n<td>该节点的子节点列表最后一次修改时的事务id，只有子节点列表变更才会更新pZxid，子节点内容变更不会更新</td>\n</tr>\n<tr>\n<td>cversion</td>\n<td>子节点版本号，当前节点的子节点每次变化时值增加1</td>\n</tr>\n<tr>\n<td>dataVersion</td>\n<td>数据节点内容版本号，节点创建时为0，每更新一次节点内容（不管内容有无变化）该版本号的值增加1</td>\n</tr>\n<tr>\n<td>aclVersion</td>\n<td>节点的ACL版本号，表示该节点ACL信息变更次数</td>\n</tr>\n<tr>\n<td>ephemeralOwner</td>\n<td>创建该临时节点的会话的sessionid：如果当前节点为持久节点，则ephemeralOwner=0</td>\n</tr>\n<tr>\n<td>dataLength</td>\n<td>数据节点内容长度</td>\n</tr>\n<tr>\n<td>numChildren</td>\n<td>当前节点的子节点个数</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-3-版本（version）\"><a href=\"#3-3-版本（version）\" class=\"headerlink\" title=\"3.3 版本（version）\"></a>3.3 版本（version）</h2><p>在前面我们已经提到，对应每个znode，ZooKeeper都会为其维护一个叫作Stat的数据结构，Stat中记录了这个znode的三个相关的版本：</p>\n<ul>\n<li><strong>dataVersion</strong>：当前znode节点的版本号。</li>\n<li><strong>cversion</strong>：当前znode子节点的版本。</li>\n<li><strong>aclVersion</strong>：当前znode的ACL的版本号。</li>\n</ul>\n<h2 id=\"3-4-ACL（权限控制）\"><a href=\"#3-4-ACL（权限控制）\" class=\"headerlink\" title=\"3.4 ACL（权限控制）\"></a>3.4 ACL（权限控制）</h2><p>ZooKeeper采用ACL（AccessControlLists）策略来进行权限控制，类似于UNIX文件系统的权限控制。</p>\n<p>对于znode操作的权限，ZooKeeper提供了以下5种：</p>\n<ul>\n<li><strong>CREATE</strong>：能创建子节点</li>\n<li><strong>READ</strong>：能获取节点数据和列出其子节点</li>\n<li><strong>WRITE</strong>：能设置/更新节点数据</li>\n<li><strong>DELETE</strong>：能删除子节点</li>\n<li><strong>ADMIN</strong>: 能设置节点ACL的权限</li>\n</ul>\n<p>其中尤其需要注意的是， CREATE和DELETE这两种权限都是针对子节点的权限控制。</p>\n<p>对于身份认证，提供了以下几种方式：</p>\n<ul>\n<li><strong>world</strong>：默认方式，所有用户都可无条件访问。</li>\n<li><strong>auth</strong>：不适用任何id，代表任何已认证的用户。</li>\n<li><strong>digest</strong>：用户名：密码认证方式：username:password。</li>\n<li><strong>ip</strong>：对指定ip进行限制。</li>\n</ul>\n<h2 id=\"3-5-Watcher（事件监听器）\"><a href=\"#3-5-Watcher（事件监听器）\" class=\"headerlink\" title=\"3.5 Watcher（事件监听器）\"></a>3.5 Watcher（事件监听器）</h2><p>Watcher（事件监听器），是ZooKeeper中的一个很重要的特性。ZooKeeper允许用户在指定节点上注册一些Watcher，并且在一些特定事件触发的时候，ZooKeeper服务端会将事件通知感兴趣的客户端上去，该机制是ZooKeeper实现分布式协调服务的重要特性。<br><img src=\"https://javaguide.cn/assets/watche%E6%9C%BA%E5%88%B6.f523bd89.png\"><br>王之怒吼👿：非常有用的一个特性，都拿出小本本记好了，后面用到ZooKeeper基本离不开Watcher（事件监听）机制。</p>\n<h2 id=\"3-6-会话（Session）\"><a href=\"#3-6-会话（Session）\" class=\"headerlink\" title=\"3.6 会话（Session）\"></a>3.6 会话（Session）</h2><p>Session 可以看做是ZooKeeper服务器与客户端之间的一个TCP长连接，通过这个连接，客户端能够通过心跳检测与服务器保持有效的会话，也能向ZooKeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watcher事件通知。</p>\n<p>Session有一个属性叫作：sessionTimeout，sessionTimeout代表会话的超时时间。当由于服务器压力太大、网络故障或是客户端主动断开连接等各种原因导致客户端连接断开时，只要在sessionTimeout规定的时间内能够重新连接上集群中任意一台服务器，那么之前创建的会话依然有效。</p>\n<p>另外，在为客户端创建会话之前，服务端首先会为每个客户端都分配一个sessionID。由于sessionID是ZooKeeper会话的一个重要标识，许多与会话相关的运行机制都是基于这个sessionID的，因此，无论是哪台服务器为客户端分配的sessionID，都务必保证全局唯一。</p>\n<h1 id=\"4-ZooKeeper集群\"><a href=\"#4-ZooKeeper集群\" class=\"headerlink\" title=\"4. ZooKeeper集群\"></a>4. ZooKeeper集群</h1><p>为了保证高可用，最好是以集群形态来部署ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么ZooKeeper本身仍然是可用的。通常3台服务器就可以构成一个ZooKeeper集群了。ZooKeeper官方提供的架构图就是一个ZooKeeper集群整体对外提供服务。<br><img src=\"https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4.6fdcc61e.png\"><br>上图中每一个Server代表一个安装ZooKeeper服务的服务器。组成ZooKeeper服务的服务器都会在内存中维护当前的服务器状态，并且每台服务器之间都保持着通信。集群间通过ZAB协议（ZooKeeper Atomic Broadcast）来保持数据的一致性。</p>\n<p><strong>最典型集群模式</strong>：**Master/Slave模式（主备模式）。在这种模式中，通常Master服务器作为主服务器提供写服务，其他的Slave服务器从服务器通过异步复制的方式获取Master服务器最新的数据提供读服务。</p>\n<h3 id=\"4-1-ZooKeeper集群角色\"><a href=\"#4-1-ZooKeeper集群角色\" class=\"headerlink\" title=\"4.1 ZooKeeper集群角色\"></a>4.1 ZooKeeper集群角色</h3><p>但是，在ZooKeeper中没有选择传统的Master/Slave概念，而是引入了Leader、Follower和Observer三种角色。如下图所示<br><img src=\"https://javaguide.cn/assets/zookeeper%E9%9B%86%E7%BE%A4%E4%B8%AD%E7%9A%84%E8%A7%92%E8%89%B2.ffff8ef5.png\"><br>ZooKeeper集群中的所有机器通过一个Leader<strong>选举过程</strong>来选定一台称为”Leader”的机器，Leader既可以为客户端提供写服务又能提供读服务。除了Leader外，<strong>Follower</strong>和<strong>Observer</strong>都只能提供读服务。Follower和Observer唯一的区别在于Observer机器不参与Leader的选举过程，也不参与写操作的”过半写成功”策略，因此Observer机器可以在不影响写性能的情况下提升集群的读性能。</p>\n<table>\n<thead>\n<tr>\n<th>角色</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Leader</td>\n<td>为客户提供读和写的服务，负责投票的发起和决议，更新系统状态。</td>\n</tr>\n<tr>\n<td>Follower</td>\n<td>为客户端提供读服务，如果是写服务则转发给Leader。参与选举过程中的投票。</td>\n</tr>\n<tr>\n<td>Observer</td>\n<td>为客户端提供读服务，如果是写服务则转发给Leader。不参与选举过程中的投票，也不参与”过半写成功”策略。在不影响写性能的情况下提升集群的读性能。此角色于ZooKeeper3.3系列新增的角色。</td>\n</tr>\n</tbody></table>\n<p>当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，就会进入Leader选举过程，这个过程会选举产生新的Leader服务器。</p>\n<p>这个过程大概是这样子的：</p>\n<ol>\n<li>Leader election在（选举阶段）：节点在一开始都处于选举阶段，只要有一个节点得到超半数节点的票数，它就可以当选准leader。</li>\n<li>Discovery（发现阶段）：在这个阶段，followers跟准leader进行通信，同步followers最近接收的事务提议。</li>\n<li>Synchronization（同步阶段）：同步阶段主要是利用leader前一阶段获得的最新提议历史，同步集群中所有的副本。同步完成之后准leader才会成为真正的leader。</li>\n<li>Broadcast（广播阶段）：到了这个阶段，ZooKeeper集群才能正式对外提供事务服务，并且leader可以进行消息广播。同时如果有新的节点加入，还需要对新节点进行同步。</li>\n</ol>\n<h3 id=\"4-2-ZooKeeper集群中的服务器状态\"><a href=\"#4-2-ZooKeeper集群中的服务器状态\" class=\"headerlink\" title=\"4.2 ZooKeeper集群中的服务器状态\"></a>4.2 ZooKeeper集群中的服务器状态</h3><ul>\n<li><strong>LOOKING</strong>：寻找Leader。</li>\n<li><strong>LEADING</strong>：Leader状态，对应的节点为Leader。</li>\n<li><strong>FOLLOWING</strong>：Follower状态，对应的节点为Follower。</li>\n<li><strong>OBSERVING</strong>：Observer状态，对应节点为Observer，该节点不参与Leader选举。</li>\n</ul>\n<h3 id=\"4-3-ZooKeeper集群为啥最好是奇数台？\"><a href=\"#4-3-ZooKeeper集群为啥最好是奇数台？\" class=\"headerlink\" title=\"4.3 ZooKeeper集群为啥最好是奇数台？\"></a>4.3 ZooKeeper集群为啥最好是奇数台？</h3><p>ZooKeeper集群在宕掉几个ZooKeeper服务器之后，如果剩下的ZooKeeper服务器个数大于宕掉的个数的话整个ZooKeeper才依然可用。假如我们的集群中有n台ZooKeeper服务器，那么也就是剩下的服务数必须大于n/2。先说一下结论，2n和2n-1的容忍度是一样的，都是n-1，大家可以先自己仔细想一想。</p>\n<p>比如：假如我们有3台，那么最大允许宕掉1台ZooKeeper服务器，如果我们有4台的的时候也同样只允许宕掉1台。 假如我们有5台，那么最大允许宕掉2台ZooKeeper服务器，如果我们有6台的的时候也同样只允许宕掉2台。</p>\n<p>综上，何必增加那一个不必要的ZooKeeper服务器呢？</p>\n<h3 id=\"4-4-ZooKeeper选举的过半机制防止脑裂\"><a href=\"#4-4-ZooKeeper选举的过半机制防止脑裂\" class=\"headerlink\" title=\"4.4 ZooKeeper选举的过半机制防止脑裂\"></a>4.4 ZooKeeper选举的过半机制防止脑裂</h3><h5 id=\"何为集群脑裂？\"><a href=\"#何为集群脑裂？\" class=\"headerlink\" title=\"何为集群脑裂？\"></a>何为集群脑裂？</h5><p>对于一个集群，通常多台机器会部署在不同机房，来提高这个集群的可用性。保证可用性的同时，会发生一种机房间网络线路故障，导致机房间网络不通，而集群被割裂成几个小集群。这时候子集群各自选主导致”脑裂”的情况。</p>\n<p>举例说明：比如现在有一个由6台服务器所组成的一个集群，部署在了2个机房，每个机房3台。正常情况下只有1个leader，但是当两个机房中间网络断开的时候，每个机房的3台服务器都会认为另一个机房的3台服务器下线，而选出自己的leader并对外提供服务。若没有过半机制，当网络恢复的时候会发现有2个leader。仿佛是1个大脑（leader）分散成了2个大脑，这就发生了脑裂现象。脑裂期间2个大脑都可能对外提供服务，这将会带来数据一致性等问题。</p>\n<h5 id=\"过半机制是如何防止脑裂现象产生的？\"><a href=\"#过半机制是如何防止脑裂现象产生的？\" class=\"headerlink\" title=\"过半机制是如何防止脑裂现象产生的？\"></a>过半机制是如何防止脑裂现象产生的？</h5><p>ZooKeeper的过半机制导致不可能产生2个leader，因为少于等于一半是不可能产生leader的，这就使得不论机房的机器如何分配都不可能发生脑裂。</p>\n<h1 id=\"5-ZAB协议和Paxos算法\"><a href=\"#5-ZAB协议和Paxos算法\" class=\"headerlink\" title=\"5. ZAB协议和Paxos算法\"></a>5. ZAB协议和Paxos算法</h1><p>Paxos算法应该可以说是ZooKeeer的灵魂了。但是，ZooKeeper并没有完全采用Paxos算法，而是使用ZAB协议作为其保证数据一致性的核心算法。另外，在ZooKeeper的官方文档中也指出，ZAB协议并不想Paxos算法那样，是一种通用的分布式一致性算法，它是一种特别为ZooKeeper设计的崩溃可恢复的原子消息广播算法。</p>\n<h3 id=\"5-1-ZAB协议介绍\"><a href=\"#5-1-ZAB协议介绍\" class=\"headerlink\" title=\"5.1 ZAB协议介绍\"></a>5.1 ZAB协议介绍</h3><p>ZAB（ZooKeeper Atomic Broadcast 原子广播）协议是为分布式协调服务ZooKeeper专门设计的一种支持崩溃恢复的原子广播协议。在ZooKeeper中，主要依赖ZAB协议来实现分布式数据一致性，基于该协议，ZooKeeper实现了一种主备模式的系统架构来保持集群中各个副本之间的数据一致性。</p>\n<h3 id=\"5-2-ZAB协议两种基本的模式：崩溃恢复和消息广播\"><a href=\"#5-2-ZAB协议两种基本的模式：崩溃恢复和消息广播\" class=\"headerlink\" title=\"5.2 ZAB协议两种基本的模式：崩溃恢复和消息广播\"></a>5.2 ZAB协议两种基本的模式：崩溃恢复和消息广播</h3><p>ZAB协议包括两种基本的模式，分别是</p>\n<ul>\n<li><strong>崩溃恢复</strong>：当整个服务框架在启动过程中，或是当Leader服务器出现网络中断、崩溃退出与重启等异常情况时，ZAB协议就会进入恢复模式并选举产生新的Leader服务器。当选举产生了新的Leader服务器，同时集群中已经有过半的机器与该Leader服务器完成了状态同步之后，ZAB协议就会退出恢复模式。其中，<strong>所谓的状态同步是指数据同步，用来保证集群中存在过半的机器能够和Leader服务器的数据状态保持一致</strong>。</li>\n<li><strong>消息广播：当集群中已经有过半的Follwer服务器完成了和Leader服务器的状态同步，name整个服务框架就可以进入消息广播模式了</strong>。当一台同样遵守ZAB协议的服务器启动后加入到集群中时，如果此时集群中已经存在一个Leader服务器在负责进行消息广播，那么新加入的服务器就会自觉地进入数据恢复模式：找到Leader所在的服务器，并与其进行数据同步，然后一起参与到消息广播流程中去。</li>\n</ul>\n<h1 id=\"6-总结\"><a href=\"#6-总结\" class=\"headerlink\" title=\"6. 总结\"></a>6. 总结</h1><ol>\n<li>ZooKeeper 本身就是一个分布式程序（只要半数以上节点存活，ZooKeeper 就能正常服务）。</li>\n<li>为了保证高可用，最好是以集群形态来部署 ZooKeeper，这样只要集群中大部分机器是可用的（能够容忍一定的机器故障），那么 ZooKeeper 本身仍然是可用的。</li>\n<li>ZooKeeper 将数据保存在内存中，这也就保证了 高吞吐量和低延迟（但是内存限制了能够存储的容量不太大，此限制也是保持 znode 中存储的数据量较小的进一步原因）。</li>\n<li>ZooKeeper 是高性能的。 在“读”多于“写”的应用程序中尤其地明显，因为“写”会导致所有的服务器间同步状态。（“读”多于“写”是协调服务的典型场景。）</li>\n<li>ZooKeeper 有临时节点的概念。 当创建临时节点的客户端会话一直保持活动，瞬时节点就一直存在。而当会话终结时，瞬时节点被删除。持久节点是指一旦这个 znode 被创建了，除非主动进行 znode 的移除操作，否则这个 znode 将一直保存在 ZooKeeper 上。</li>\n<li>ZooKeeper 底层其实只提供了两个功能：① 管理（存储、读取）用户程序提交的数据；② 为用户程序提供数据节点监听服务。<h1 id=\"7-参考\"><a href=\"#7-参考\" class=\"headerlink\" title=\"7. 参考\"></a>7. 参考</h1></li>\n<li><a href=\"https://javaguide.cn/\">《JavaGuide》——ZooKeeper相关概念总结（入门）</a></li>\n<li>《从 Paxos 到 ZooKeeper 分布式一致性原理与实践》</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl43v16cn0000b6jhampnh49j","category_id":"cl43v16ct0002b6jh3q9cf63f","_id":"cl43v16d0000bb6jh84dzf0uk"},{"post_id":"cl43v16cs0001b6jhhe2t7dvi","category_id":"cl43v16cx0007b6jhc4e6h9i2","_id":"cl43v16d0000fb6jhc3z108kp"},{"post_id":"cl43v16cv0004b6jh1yuhdhxd","category_id":"cl43v16d0000cb6jhgmhd1uj0","_id":"cl43v16d1000jb6jhei44fn9i"},{"post_id":"cl43v16cw0005b6jhfkhy343b","category_id":"cl43v16d1000gb6jh9zgs7khe","_id":"cl43v16d3000ob6jhawtdewcb"},{"post_id":"cl43v16cx0006b6jh3xhda1g6","category_id":"cl43v16d1000gb6jh9zgs7khe","_id":"cl43v16d4000qb6jhgztc7810"},{"post_id":"cl43v16cz000ab6jhe7i0dzzr","category_id":"cl43v16d1000gb6jh9zgs7khe","_id":"cl43v16d4000rb6jh75y93en0"},{"post_id":"cl43v16db000sb6jh1r6n39b4","category_id":"cl43v16d1000gb6jh9zgs7khe","_id":"cl43v16dd000wb6jhaqazckep"},{"post_id":"cl43v16db000sb6jh1r6n39b4","category_id":"cl43v16dc000ub6jh5d135rvh","_id":"cl43v16dd000xb6jh8i5g0jwj"}],"PostTag":[{"post_id":"cl43v16cn0000b6jhampnh49j","tag_id":"cl43v16cu0003b6jh62yo6ppi","_id":"cl43v16cy0009b6jhdnlz8o9h"},{"post_id":"cl43v16cs0001b6jhhe2t7dvi","tag_id":"cl43v16cy0008b6jhczkr09qs","_id":"cl43v16d0000eb6jh9iyw9m6h"},{"post_id":"cl43v16cv0004b6jh1yuhdhxd","tag_id":"cl43v16d0000db6jh14l1eb0n","_id":"cl43v16d1000ib6jh7oet75v2"},{"post_id":"cl43v16cw0005b6jhfkhy343b","tag_id":"cl43v16d1000hb6jhc1409jy3","_id":"cl43v16d3000mb6jhe8ww8xvo"},{"post_id":"cl43v16cx0006b6jh3xhda1g6","tag_id":"cl43v16d2000lb6jh6322beqz","_id":"cl43v16d4000pb6jh4o002e0h"},{"post_id":"cl43v16db000sb6jh1r6n39b4","tag_id":"cl43v16db000tb6jh8nzed43r","_id":"cl43v16dc000vb6jh47ctegpu"}],"Tag":[{"name":"快速排序","_id":"cl43v16cu0003b6jh62yo6ppi"},{"name":"mysql","_id":"cl43v16cy0008b6jhczkr09qs"},{"name":"redis","_id":"cl43v16d0000db6jh14l1eb0n"},{"name":"分布式协议","_id":"cl43v16d1000hb6jhc1409jy3"},{"name":"ACID","_id":"cl43v16d2000lb6jh6322beqz"},{"name":"zookeeper","_id":"cl43v16db000tb6jh8nzed43r"}]}}