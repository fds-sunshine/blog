<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>快速排序</title>
    <link href="/fds-sunshine.github.io/2022/03/24/acwing/quicksort/"/>
    <url>/fds-sunshine.github.io/2022/03/24/acwing/quicksort/</url>
    
    <content type="html"><![CDATA[<h1 id="快速排序-如有不足之处-请各方大佬在底下批评指正"><a href="#快速排序-如有不足之处-请各方大佬在底下批评指正" class="headerlink" title="快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)"></a>快速排序(如有不足之处, 请各方大佬在底下批评指正!!!)</h1><p>快速排序是从冒泡排序演变而来的算法，但是它比快排要高效得多，所以我们把它叫做快速排序😂<br>快速排序之所以快，是因为它用到了一个思想😮 ———&gt; 分治(不懂的可以百度哟😁)</p><p>那么快排是怎么实现的呢?让我们来看一下下面的图文解释:</p><h4 id="1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7"><a href="#1-我们需要确定一个分界点-例如图中以标蓝的方格作为分界点7" class="headerlink" title="1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:"></a>1. 我们需要确定一个分界点, 例如图中以标蓝的方格作为分界点7:</h4><p> <img src="https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/1.png"></p><h4 id="2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点"><a href="#2-然后我们把小于分界点的元素放在分界点的左边-例如上图的-1-3-4-5-并且把大于分界点的元素放在分界点的右边-例如上图的-8-10-12-放置好后大概是这样的-不一定是这样-有可能是其它的情况-此时-在分界点左边的元素小于或等于分界点-在分界点右边的元素大于或等于分界点" class="headerlink" title="2. 然后我们把小于分界点的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把大于分界点的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在分界点左边的元素小于或等于分界点, 在分界点右边的元素大于或等于分界点:"></a>2. 然后我们把<strong>小于分界点</strong>的元素放在分界点的左边,例如上图的(1, 3, 4, 5), 并且把<strong>大于分界点</strong>的元素放在分界点的右边, 例如上图的(8, 10, 12), 放置好后大概是这样的(不一定是这样,有可能是其它的情况), 此时, 在<strong>分界点</strong>左边的元素<strong>小于或等于</strong>分界点, 在<strong>分界点</strong>右边的元素<strong>大于或等于</strong>分界点:</h4><p><img src="https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/2.png"></p><h4 id="3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示"><a href="#3-利用分界点分好两边的元素后-得到下面的三个部分-我们分别对左边的部分与右边的部分分别进行1与2的操作-最后便可以排好序了-下图演示" class="headerlink" title="3. 利用分界点分好两边的元素后,得到下面的三个部分, 我们分别对左边的部分与右边的部分分别进行1与2的操作, 最后便可以排好序了(下图演示):"></a>3. 利用<strong>分界点</strong>分好两边的元素后,得到下面的三个部分, 我们分别对<strong>左边的部分</strong>与<strong>右边的部分</strong>分别进行1与2的操作, 最后便可以排好序了(下图演示):</h4><p><img src="https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/3.png"><br><img src="https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/4.png"><br><img src="https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/5.png"><br><img src="https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/6.png"><br><img src="https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/7.png"><br><img src="https://gitee.com/violet-bug/imageurl/raw/master/acwing/quicksort/8.png"></p><blockquote><p>到这里, 这个数组便已经排好序了</p></blockquote><h4 id="4-这时候就进入我们紧张刺激的代码环节"><a href="#4-这时候就进入我们紧张刺激的代码环节" class="headerlink" title="4. 这时候就进入我们紧张刺激的代码环节:"></a>4. 这时候就进入我们紧张刺激的代码环节:</h4><h5 id="4-1-Java代码"><a href="#4-1-Java代码" class="headerlink" title="4.1 Java代码"></a>4.1 Java代码</h5><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">//1.确定分界点</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = arr[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">//2.确定分界点左边的元素</span><br>    <span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span>(i &lt; x);<br>    <span class="hljs-comment">//3.确定分界点右边的元素</span><br>    <span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span>(j &gt; x);<br>    <span class="hljs-comment">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>    <span class="hljs-comment">//有代码整洁洁癖的童鞋可以把if里面的代码写成一个方法,然后在进行调用</span><br>    <span class="hljs-keyword">if</span>(i &lt; j) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>        arr[i] = arr[j];<br>        arr[j] = temp;<br>    &#125;<br>    <span class="hljs-comment">//5.递归处理分界点左边的元素</span><br>    quick_sort(arr, l, j);<br>    <span class="hljs-comment">//6.递归处理分界点右边的元素</span><br>    quick_sort(arr, j + <span class="hljs-number">1</span>, r);<br>&#125;<br></code></pre></div></td></tr></table></figure><h5 id="4-2-C代码"><a href="#4-2-C代码" class="headerlink" title="4.2 C代码"></a>4.2 C代码</h5><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">//1.确定分界点</span><br>        <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = arr[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>        <span class="hljs-comment">//2.确定分界点左边的元素</span><br>        <span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span>(arr[i] &lt; x);<br>        <span class="hljs-comment">//3.确定分界点右边的元素</span><br>        <span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span>(arr[j] &gt; x);<br>        <span class="hljs-comment">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class="hljs-keyword">if</span>(i &lt; j) <br>        &#123;<br>            <span class="hljs-type">int</span> temp = arr[i];<br>            arr[i] = arr[j];<br>            arr[j] = temp;<br>        &#125;;<br>        <span class="hljs-comment">//5.递归处理分界点左边的元素</span><br>        quick_sort(arr, l, j);<br>        <span class="hljs-comment">//6.递归处理分界点右边的元素</span><br>        quick_sort(arr, j + <span class="hljs-number">1</span>, r);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h5 id="4-3-C-代码"><a href="#4-3-C-代码" class="headerlink" title="4.3 C++代码"></a>4.3 C++代码</h5><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(l &gt;= r) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-comment">//1.确定分界点</span><br>        <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = arr[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>        <span class="hljs-comment">//2.确定分界点左边的元素</span><br>        <span class="hljs-keyword">do</span> i++; <span class="hljs-keyword">while</span>(arr[i] &lt; x);<br>        <span class="hljs-comment">//3.确定分界点右边的元素</span><br>        <span class="hljs-keyword">do</span> j--; <span class="hljs-keyword">while</span>(arr[j] &gt; x);<br>        <span class="hljs-comment">//4.交换元素以便把小于分界点的元素放到左边, 大于分界点的元素放到右边</span><br>        <span class="hljs-keyword">if</span>(i &lt; j) <span class="hljs-built_in">swap</span>(arr[i], arr[j]);<br>        <span class="hljs-comment">//5.递归处理分界点左边的元素</span><br>        <span class="hljs-built_in">quick_sort</span>(arr, l, j);<br>        <span class="hljs-comment">//6.递归处理分界点右边的元素</span><br>        <span class="hljs-built_in">quick_sort</span>(arr, j + <span class="hljs-number">1</span>, r);<br>    &#125;<br></code></pre></div></td></tr></table></figure><h5 id="4-4-Python代码-语法忘记-后续更新"><a href="#4-4-Python代码-语法忘记-后续更新" class="headerlink" title="4.4 Python代码(语法忘记, 后续更新)"></a>4.4 Python代码(语法忘记, 后续更新)</h5><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quick_sort</span>(<span class="hljs-params">arr, l, r</span>):<br>    i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = arr[l + r &gt;&gt; <span class="hljs-number">1</span>];<br></code></pre></div></td></tr></table></figure><h5 id="4-5-Go代码-后续更新"><a href="#4-5-Go代码-后续更新" class="headerlink" title="4.5 Go代码(后续更新)"></a>4.5 Go代码(后续更新)</h5><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>acwing算法基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>快速排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>六月的目标</title>
    <link href="/fds-sunshine.github.io/2022/03/23/violet/"/>
    <url>/fds-sunshine.github.io/2022/03/23/violet/</url>
    
    <content type="html"><![CDATA[<h1 id="六月的目标"><a href="#六月的目标" class="headerlink" title="六月的目标"></a>六月的目标</h1><ol><li>Spring Cloud.</li><li>JVM.</li><li>MySQL</li><li>设计模式.</li><li>zookeeper.</li><li>redis.</li><li>kafka.</li><li>RabbitMQ、RocketMQ.</li><li>mongoDB.</li><li>读写分离&amp;分库分表.</li><li>并发编程.</li></ol>]]></content>
    
    
    <categories>
      
      <category>六月的目标</category>
      
    </categories>
    
    
    <tags>
      
      <tag>六月的目标</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
